<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行走的康康</title>
  
  <subtitle>静下心来,不要浮躁</subtitle>
  <link href="https://blog.littlekang.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.littlekang.xyz/"/>
  <updated>2022-03-31T18:45:14.162Z</updated>
  <id>https://blog.littlekang.xyz/</id>
  
  <author>
    <name>Kang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>u-boot学习笔记-relocate</title>
    <link href="https://blog.littlekang.xyz/article/10514/"/>
    <id>https://blog.littlekang.xyz/article/10514/</id>
    <published>2022-03-31T18:26:55.000Z</published>
    <updated>2022-03-31T18:45:14.162Z</updated>
    
    <content type="html"><![CDATA[<p>u-boot的relocate是新版本u-boot开始有的一个功能，是指u-boot的重定向动作，将自身拷贝到sdram上的另外一个位置的动作。</p><p>新版u-boot跟老版u-boot不太一样的地方，新版u-boot不管u-boot的加载地址在哪里，启动后会计算出一个靠近sdram顶端的地址，将自身代码拷贝到该地址，继续运行。</p><span id="more"></span><h1 id="rerocate介绍"><a href="#rerocate介绍" class="headerlink" title="rerocate介绍"></a>rerocate介绍</h1><h2 id="relocate是什么"><a href="#relocate是什么" class="headerlink" title="relocate是什么"></a>relocate是什么</h2><p><strong>u-boot的relocate操作，是指u-boot的重定向动作</strong>。</p><p><strong>uboot自身镜像(拷贝)到内存中另外一个位置的动作</strong>。</p><h2 id="为什么需要relocate"><a href="#为什么需要relocate" class="headerlink" title="为什么需要relocate"></a>为什么需要relocate</h2><p>考虑的问题：</p><ul><li><p>绝大部分嵌入式处理器都是<code>哈佛结构</code>，数据空间和程序空间独立编址；<br>u-boot固件一般存放在内部norflash，或者上电时自动映射nandflash、MMC等外部存储设备到iROM;<br>数据变量一般使用内部iRAM，或者内部Cache等，一般iRAM等都很小，运行速度慢，也不能满足复杂程序的运行需求；所以，在DDR, SDRAM等初始化完成之后，u-boot将自身relocate到DDR，SDRAM中去运行；</p></li><li><p>考虑到后续的kernel是在DDR SDRAM的低端位置解压缩并执行的，为了避免麻烦，u-boot将使用DRAM的顶端地址，即<code>gd-&gt;ram_top</code>所代表的位置；</p></li><li><p>考虑到u-boot升级时，relocate之后，让从u-boot中升级u-boot成为可能，不然如果u-boot还是从norflash等中加载程序到iRAM中运行，当升级写入新u-boot固件到norflash中时，会导致程序cash掉，因为在运行时程序文件被修改覆盖；</p><blockquote><p>REF: <a href="https://u-boot.denx.narkive.com/JVIH8BMp/why-relocate-it-self-to-ram-from-flash">why u-boot relocate it self to RAM from</a></p></blockquote></li></ul><h2 id="SPL和relocate的关系"><a href="#SPL和relocate的关系" class="headerlink" title="SPL和relocate的关系"></a>SPL和relocate的关系</h2><p>SPL的出现，是u-boot为了解决一些处理器，它的iROM很小，没有办法存储完整的u-boot固件。</p><p>所以使用SPL处理一些紧急的必须的初始化操作(大部分由汇编完成，少量c代码)，初始化内存(SDRAM，DDR等)，然后负责将u-boot拷贝到内存中，跳转到内存中运行。</p><p><strong>那么使用SPL之后是不是就不需要relocate了呢？</strong></p><p>按照我的理解是可以不需要的，不知道对不对？</p><p>假定SPL拷贝u-boot的目标地址和relocate的目标地址一样，这样的话，我的理解是不需要的。</p><p>那么看u-boot的代码，还是进行relocate的。在u-boot的代码框架里，SPL和u-boot是两个独立运行的程序，虽然他们共享源码的结构，通过宏来区分。我的理解u-boot的设计是为了兼容大部分处理器，所以这里还是进行了relocate，即因为不知道SPL拷贝到内存的地址是否是符合u-boot要求的。</p><p>这样看来SPL和relocate是为了解决不同的问题，他们既有一定的联系，又是相对比较独立的。</p><p><strong>新版本的u-boot，无论是否拷贝，都将u-boot relocate到sdram顶端地址。</strong></p><h1 id="relocate实现需要的条件"><a href="#relocate实现需要的条件" class="headerlink" title="relocate实现需要的条件"></a>relocate实现需要的条件</h1><h2 id="需要的条件"><a href="#需要的条件" class="headerlink" title="需要的条件"></a>需要的条件</h2><p><strong>At arch level</strong>: add linker flag -pie<br>添加链接标识 <code>-pie</code>用于生成位置无关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">This causes the linker to generate fixup tables .rel.dyn and .dynsym,</span><br><span class="line">which must be applied to the relocated image before transferring</span><br><span class="line">control to it.</span><br><span class="line"> </span><br><span class="line">These fixups are described in the ARM ELF documentation as type 23</span><br><span class="line">(program-base-relative) and 2 (symbol-relative)</span><br></pre></td></tr></table></figure><p><strong>At cpu level</strong>: modify linker file and add a relocation and fixup loop</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">the linker file must be modified to include the .rel.dyn and .dynsym</span><br><span class="line">tables in the binary image, and to provide symbols for the relocation</span><br><span class="line">code to access these tables</span><br><span class="line"> </span><br><span class="line">The relocation and fixup loop must be executed after executing</span><br><span class="line">board_init_f at initial location and before executing board_init_r</span><br><span class="line">at final location.</span><br></pre></td></tr></table></figure><p><strong>At board level</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dram_init(): bd pointer is now at this point NOT accessible, so only</span><br><span class="line">detect the real dramsize, and store it in gd-&gt;ram_size. Bst detected</span><br><span class="line">with get_ram_size().</span><br></pre></td></tr></table></figure><p><strong>TODO:</strong> move also dram initialization there on boards where it is possible.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Setup of the the bd_t dram bank info is done in the new function</span><br><span class="line">dram_init_banksize() called after bd is accessible.</span><br></pre></td></tr></table></figure><p><strong>At lib level</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Board.c code is adapted from ppc code</span><br></pre></td></tr></table></figure><p>** WARNING **<br>Boards which are not fixed to support relocation will be REMOVED!</p><hr><p>For boards which boot from spl, it is possible to save one copy<br>对于从SPL启动的，当<code>CONFIG_SYS_TEXT_BASE</code>和relocate目标地址相等时，可以不进行再次拷贝</p><p>if <code>CONFIG_SYS_TEXT_BASE</code> &#x3D;&#x3D; relocation address! This prevents that uboot code<br>is copied again in relocate_code().</p><blockquote><p>REF: <a href="https://github.com/ARM-software/u-boot/blob/master/doc/README.arm-relocation">https://github.com/ARM-software/u-boot/blob/master/doc/README.arm-relocation</a></p></blockquote><h2 id="位置无关代码的原理"><a href="#位置无关代码的原理" class="headerlink" title="位置无关代码的原理"></a>位置无关代码的原理</h2><p>生成位置无关代码步骤：</p><ul><li><p>首先是编译源文件的时候，需要将其编译成位置无关代码，主要通过gcc的<code>-fpic</code>选项（也有可能是<code>fPIC</code>,<code>fPIE</code>, <code>mword-relocations</code>选项）</p></li><li><p>其次是连接时要将其连接成一个完整的位置无关的可执行文件，主要通过ld的<code>-fpie</code>选项</p></li></ul><p>ARM如何生成位置无关代码：</p><p>由于使用pic时movt &#x2F; movw指令会硬编码16bit的地址域，而uboot的relocation并不支持这个，<br><strong>所以arm平台使用mword-relocations来生成位置无关代码。-fno-pic则表示不使用pic。</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#arch/arm/config.mk</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># The movt / movw can hardcode 16 bit parts of the addresses in the</span></span><br><span class="line"><span class="comment"># instruction. Relocation is not supported for that case, so disable</span></span><br><span class="line"><span class="comment"># such usage by requiring word relocations.</span></span><br><span class="line">PLATFORM_CPPFLAGS += <span class="variable">$(<span class="built_in">call</span> cc-option, -mword-relocations)</span></span><br><span class="line">PLATFORM_CPPFLAGS += <span class="variable">$(<span class="built_in">call</span> cc-option, -fno-pic)</span></span><br></pre></td></tr></table></figure><h2 id="rel-dyn段简单介绍"><a href="#rel-dyn段简单介绍" class="headerlink" title=".rel .dyn段简单介绍"></a>.rel .dyn段简单介绍</h2><p>对于一些绝对地址符号（例如已经初始化的全局变量），会将其以label的形式放在每个函数的代码实现的末端。<br>在链接的过程中，会把这些label的地址统一维护在.rel.dyn段中，当relocation的时候，方便对这些地址的fix。</p><p>这块只是看懂了个粗略的，没有更深入的去分析，这块可以参考：<a href="https://blog.css8.cn/post/2583310.html">https://blog.css8.cn/post/2583310.html</a></p><p>为了更方便分析汇编代码，这里将优化关掉了：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#顶层Makefile</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">ifdef</span> CONFIG_CC_OPTIMIZE_FOR_SIZE</span><br><span class="line">KBUILD_CFLAGS    += -O0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">KBUILD_CFLAGS    += -O0</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>在<code>common/board_f.c</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">init_fnc_t</span> init_sequence_f[] = &#123;</span><br><span class="line">    setup_mon_len,</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_OF_CONTROL</span></span><br><span class="line">    fdtdec_setup,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TRACE</span></span><br><span class="line">    trace_early_init,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    initf_malloc,</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> board_init_f(ulong boot_flags)</span><br><span class="line">&#123;</span><br><span class="line">    gd-&gt;flags = boot_flags;</span><br><span class="line">    gd-&gt;have_console = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    asm_puts(<span class="string">&quot;will board_init_f()...\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//init_sequence_f是一个指针数组，里面存放各初始化函数的函数指针</span></span><br><span class="line">    <span class="comment">//是一个已初始化的全局变量</span></span><br><span class="line">    <span class="keyword">if</span> (initcall_run_list(init_sequence_f))</span><br><span class="line">        hang();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>arm-linux-gnueabi-objdump -D -S u-boot &gt;dump</code>反汇编u-boot elf文件, 查找对应的汇编代码</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/3000_2549-ZkCtdn7uXPgPcQtV.png" alt="image-20220330002548843" style="zoom:200%;" /><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/3000_4157-P2bTCM59TECYKQEp.png" alt="image-20220330004157730" style="zoom:200%;" /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">void board_init_f(ulong boot_flags)</span><br><span class="line">&#123;</span><br><span class="line">#压栈操作</span><br><span class="line"> 5fe0dbb8:   e92d4800    push    &#123;fp, lr&#125;</span><br><span class="line"> 5fe0dbbc:   e28db004    add fp, sp, #4</span><br><span class="line"> 5fe0dbc0:   e24dd008    sub sp, sp, #8</span><br><span class="line"> 5fe0dbc4:   e50b0008    str r0, [fp, #-8]</span><br><span class="line"> </span><br><span class="line">#gd结构的首地址存放在r9</span><br><span class="line">     gd-&gt;flags = boot_flags;</span><br><span class="line"> 5fe0dbc8:   e1a02009    mov r2, r9</span><br><span class="line"> 5fe0dbcc:   e51b3008    ldr r3, [fp, #-8]</span><br><span class="line"> 5fe0dbd0:   e5823004    str r3, [r2, #4]</span><br><span class="line"> </span><br><span class="line">     gd-&gt;have_console = 0;</span><br><span class="line"> 5fe0dbd4:   e1a02009    mov r2, r9</span><br><span class="line"> 5fe0dbd8:   e3a03000    mov r3, #0</span><br><span class="line"> 5fe0dbdc:   e582301c    str r3, [r2, #28]</span><br><span class="line"> </span><br><span class="line">     asm_puts(&quot;will board_init_f()...\n&quot;);</span><br><span class="line"> 5fe0dbe0:   e59f0024    ldr r0, [pc, #36]   ; 5fe0dc0c &lt;board_init_f+0x54&gt;</span><br><span class="line"> 5fe0dbe4:   ebffd214    bl  5fe0243c &lt;asm_puts&gt;</span><br><span class="line"> </span><br><span class="line">#由于ARM的流水线机制，当前PC值为当前地址加8个字节, 即当前PC=0x5fe0 dbf0</span><br><span class="line">#ldr r0,[pc, #32]表示将0x5fe0 dc10地址处的内容赋值给r0,</span><br><span class="line">#而0x5fe5 90c4正是init_sequence_f的地址，所以取得了init_sequence_f的地址</span><br><span class="line">     if (initcall_run_list(init_sequence_f))</span><br><span class="line"> 5fe0dbe8:   e59f0020    ldr r0, [pc, #32]   ; 5fe0dc10 &lt;board_init_f+0x58&gt;</span><br><span class="line"> 5fe0dbec:   eb00a3ee    bl  5fe36bac &lt;initcall_run_list&gt;</span><br><span class="line"> 5fe0dbf0:   e1a03000    mov r3, r0</span><br><span class="line"> 5fe0dbf4:   e3530000    cmp r3, #0</span><br><span class="line"> 5fe0dbf8:   0a000000    beq 5fe0dc00 &lt;board_init_f+0x48&gt;</span><br><span class="line">         hang();</span><br><span class="line"> 5fe0dbfc:   eb00ca87    bl  5fe40620 &lt;hang&gt;</span><br><span class="line">         !defined(CONFIG_EFI_APP) &amp;&amp; !CONFIG_IS_ENABLED(X86_64) &amp;&amp; \</span><br><span class="line">         !defined(CONFIG_ARC)</span><br><span class="line">     /* NOTREACHED - jump_to_copy() does not return */</span><br><span class="line">     hang();</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"> 5fe0dc00:   e1a00000    nop         ; (mov r0, r0)</span><br><span class="line"> 5fe0dc04:   e24bd004    sub sp, fp, #4</span><br><span class="line"> 5fe0dc08:   e8bd8800    pop &#123;fp, pc&#125;</span><br><span class="line"> 5fe0dc0c:   5fe51950    svcpl   0x00e51950</span><br><span class="line">#通过5fe0dc10找到init_sequence_f的地址</span><br><span class="line"> 5fe0dc10:   5fe590c4    svcpl   0x00e590c4</span><br></pre></td></tr></table></figure><h1 id="relocate代码分析"><a href="#relocate代码分析" class="headerlink" title="relocate代码分析"></a>relocate代码分析</h1><h2 id="gd结构体分析"><a href="#gd结构体分析" class="headerlink" title="gd结构体分析"></a>gd结构体分析</h2><p>gd就是指u-boot里面大名鼎鼎的<code>global_data</code>结构体，那么为什么会需要这样一个结构体呢？</p><p>要理解global data的意义，需要先理解如下的事实：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">u-boot是一个bootloader，有些情况下，它可能位于系统的只读存储器（ROM或者flash）中，并从那里开始执行。</span><br><span class="line"> </span><br><span class="line">因此，这种情况下，在u-boot执行的前期（在将自己copy到可读写的存储器之前），它所在的存储空间，是不可写的，这会有两个问题：</span><br><span class="line">1）堆栈无法使用，无法执行函数调用，也即C环境不可用。</span><br><span class="line">2）没有data段（或者正确初始化的data段）可用，不同函数或者代码之间，无法通过全局变量的形式共享数据。</span><br></pre></td></tr></table></figure><p>对于问题1，通常的解决方案是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">u-boot运行起来之后，在那些不需要执行任何初始化动作即可使用的、可读写的存储区域，开辟一段堆栈（stack）空间。</span><br><span class="line">一般来说，大部分的平台（如很多ARM平台），都有自己的SRAM，可用作堆栈空间。</span><br><span class="line">如果实在不行，也有可借用CPU的data cache的方法（不再过多说明）。</span><br></pre></td></tr></table></figure><p>对于问题2，解决方案要稍微复杂一些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">首先，对于开发者来说，在u-boot被拷贝到可读写的RAM（这个动作称作relocation）之前，永远不要使用全局变量。</span><br><span class="line">其次，在relocation之前，不同模块之间，确实有通过全局变量的形式传递数据的需求。怎么办？这就是global data需要解决的事情。</span><br></pre></td></tr></table></figure><p>u-boot是如何解决的?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为了在relocation前通过全局变量的形式传递数据，u-boot设计了一个巧妙的方法：</span><br><span class="line"> </span><br><span class="line">1）定义一个struct global_data类型的数据结构，里面保存了各色各样需要传递的数据</span><br><span class="line"> </span><br><span class="line">2）堆栈配置好之后，在堆栈开始的位置，为struct global_data预留空间，并将开始地址（就是一个struct global_data指针）</span><br><span class="line">保存在一个寄存器(arm使用r9,arm64使用x18)中，后续的传递，都是通过保存在寄存器中的指针实现</span><br></pre></td></tr></table></figure><p>以上摘自：wowo的<a href="http://www.wowotech.net/u-boot/boot_flow_2.html">u-boot启动流程分析(2)_板级(board)部分</a></p><p>gd结构体分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//include/asm-generic/global_data.h  (u-boot 2018.09)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">global_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">bd_t</span> *bd;              <span class="comment">//传递给kernel的board信息</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flags;   <span class="comment">//一些标志位，用于指示初始化是否已执行等</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> baudrate; <span class="comment">//串口/console波特率</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> cpu_clk; <span class="comment">/* CPU clock in Hz!        */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bus_clk;</span><br><span class="line">    <span class="comment">/* We cannot bracket this with CONFIG_PCI due to mpc5xxx */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> pci_clk;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> mem_clk;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_LCD) || defined(CONFIG_VIDEO) <span class="comment">//LCD or video相关</span></span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> fb_base;                       <span class="comment">/* Base address of framebuffer mem */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_POST)            <span class="comment">//上电自检相关(Power-On-Self-Test, POST)</span></span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> post_log_word;    <span class="comment">/* Record POST activities */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> post_log_res;     <span class="comment">/* success of POST test */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> post_init_f_time; <span class="comment">/* When post_init_f started */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BOARD_TYPES</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> board_type;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> have_console; <span class="comment">/* serial_init() was called */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在console未初始化前，缓存字符内容，如果定义PRE_CONSOLE_BUFFER</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_IS_ENABLED(PRE_CONSOLE_BUFFER)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> precon_buf_idx; <span class="comment">/* Pre-Console buffer index */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//u-boot环境变量相关</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> env_addr;     <span class="comment">/* Address  of Environment struct */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> env_valid;    <span class="comment">/* Environment valid? enum env_valid */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> env_has_init; <span class="comment">/* Bitmask of boolean of struct env_location offsets */</span></span><br><span class="line">    <span class="type">int</span> env_load_prio;          <span class="comment">/* Priority of the loaded environment */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ram_base;      <span class="comment">/* Base address of RAM used by U-Boot */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ram_top;       <span class="comment">/* Top address of RAM used by U-Boot */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> relocaddr;     <span class="comment">/* Start address of U-Boot in RAM;u-boot重定向后的地址 */</span></span><br><span class="line">    <span class="type">phys_size_t</span> ram_size;        <span class="comment">/* RAM size */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> mon_len;       <span class="comment">/* monitor len，对于arm,等于(ulong)&amp;__bss_end - (ulong)_start*/</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> irq_sp;        <span class="comment">/* irq stack pointer */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> start_addr_sp; <span class="comment">/* start_addr_stackpointer */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> reloc_off;     <span class="comment">/* relocate偏移量*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">global_data</span> *<span class="title">new_gd</span>;</span>  <span class="comment">/* relocated global data;重定向后的gd结构体*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//如果启用了驱动模型</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DM</span></span><br><span class="line">    <span class="comment">//DM中的根设备，也是uboot中第一个创建的udevice，也就对应了dts里的根节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">udevice</span> *<span class="title">dm_root</span>;</span> <span class="comment">/* Root instance for Driver Model */</span></span><br><span class="line">    <span class="comment">//在relocation之前DM中的根设备</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">udevice</span> *<span class="title">dm_root_f</span>;</span> <span class="comment">/* Pre-relocation root instance */</span></span><br><span class="line">    <span class="comment">//uclass链表，所有被udevice匹配的uclass都会被挂载到这个链表上</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">uclass_root</span>;</span> <span class="comment">/* Head of core tree */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TIMER</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">udevice</span> *<span class="title">timer</span>;</span> <span class="comment">/* Timer instance for Driver Model */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="type">const</span> <span class="type">void</span> *fdt_blob;   <span class="comment">/* Our device tree, NULL if none; 设备的dtb地址*/</span></span><br><span class="line">    <span class="type">void</span> *new_fdt;          <span class="comment">/* Relocated FDT；重定向后的dtb地址*/</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> fdt_size; <span class="comment">/* Space reserved for relocated FDT */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_OF_LIVE</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device_node</span> *<span class="title">of_root</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">jt_funcs</span> *<span class="title">jt</span>;</span> <span class="comment">/* jump table */</span></span><br><span class="line">    <span class="type">char</span> env_buf[<span class="number">32</span>];    <span class="comment">/* buffer for env_get() before reloc. */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TRACE</span></span><br><span class="line">    <span class="type">void</span> *trace_buff; <span class="comment">/* The trace buffer */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_SYS_I2C)</span></span><br><span class="line">    <span class="type">int</span> cur_i2c_bus; <span class="comment">/* current used i2c bus */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SYS_I2C_MXC</span></span><br><span class="line">    <span class="type">void</span> *srdata[<span class="number">10</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> timebase_h;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> timebase_l;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_VAL(SYS_MALLOC_F_LEN)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> malloc_base;  <span class="comment">/* base address of early malloc() */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> malloc_limit; <span class="comment">/* limit address */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> malloc_ptr;   <span class="comment">/* current address */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PCI</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pci_controller</span> *<span class="title">hose</span>;</span> <span class="comment">/* PCI hose for early use */</span></span><br><span class="line">    <span class="type">phys_addr_t</span> pci_ram_top;     <span class="comment">/* top of region accessible to PCI */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PCI_BOOTDELAY</span></span><br><span class="line">    <span class="type">int</span> pcidelay_done;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">udevice</span> *<span class="title">cur_serial_dev</span>;</span> <span class="comment">/* current serial device; 当前串口设备号*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">arch_global_data</span> <span class="title">arch</span>;</span>   <span class="comment">/* architecture-specific data */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_CONSOLE_RECORD</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">membuff</span> <span class="title">console_out</span>;</span> <span class="comment">/* console output */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">membuff</span> <span class="title">console_in</span>;</span>  <span class="comment">/* console input */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DM_VIDEO</span></span><br><span class="line">    ulong video_top;    <span class="comment">/* Top of video frame buffer area */</span></span><br><span class="line">    ulong video_bottom; <span class="comment">/* Bottom of video frame buffer area */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_BOOTSTAGE</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bootstage_data</span> *<span class="title">bootstage</span>;</span>     <span class="comment">/* Bootstage information */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bootstage_data</span> *<span class="title">new_bootstage</span>;</span> <span class="comment">/* Relocated bootstage info */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_LOG</span></span><br><span class="line">    <span class="type">int</span> log_drop_count;        <span class="comment">/* Number of dropped log messages */</span></span><br><span class="line">    <span class="type">int</span> default_log_level;     <span class="comment">/* For devices with no filters */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">log_head</span>;</span> <span class="comment">/* List of struct log_device */</span></span><br><span class="line">    <span class="type">int</span> log_fmt;               <span class="comment">/* Mask containing log format info */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125; <span class="type">gd_t</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Global Data Flags - the top 16 bits are reserved for arch-specific flags</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_RELOC 0x00001            <span class="comment">/* Code was relocated to RAM          */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_DEVINIT 0x00002          <span class="comment">/* Devices have been initialized      */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_SILENT 0x00004           <span class="comment">/* Silent mode                             */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_POSTFAIL 0x00008         <span class="comment">/* Critical POST test failed          */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_POSTSTOP 0x00010         <span class="comment">/* POST seqeunce aborted              */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_LOGINIT 0x00020          <span class="comment">/* Log Buffer has been initialized    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_DISABLE_CONSOLE 0x00040  <span class="comment">/* Disable console (in &amp; out)          */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_ENV_READY 0x00080        <span class="comment">/* Env. imported into hash table      */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_SERIAL_READY 0x00100     <span class="comment">/* Pre-reloc serial console ready     */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_FULL_MALLOC_INIT 0x00200 <span class="comment">/* Full malloc() is ready              */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_SPL_INIT 0x00400         <span class="comment">/* spl_init() has been called          */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_SKIP_RELOC 0x00800       <span class="comment">/* Don&#x27;t relocate                        */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_RECORD 0x01000           <span class="comment">/* Record console                         */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_ENV_DEFAULT 0x02000      <span class="comment">/* Default variable flag                 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_SPL_EARLY_INIT 0x04000   <span class="comment">/* Early SPL init is done              */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GD_FLG_LOG_READY 0x08000        <span class="comment">/* Log system is ready for use          */</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//include/asm-generic/u-boot.h (u-boot 2018.09)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Board information passed to Linux kernel from U-Boot</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* include/asm-ppc/u-boot.h</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">bd_info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_memstart;    <span class="comment">/* start of DRAM memory */</span></span><br><span class="line">    <span class="type">phys_size_t</span> bi_memsize;       <span class="comment">/* size     of DRAM memory in bytes */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_flashstart;  <span class="comment">/* start of FLASH memory */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_flashsize;   <span class="comment">/* size     of FLASH memory */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_flashoffset; <span class="comment">/* reserved area for startup monitor */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_sramstart;   <span class="comment">/* start of SRAM memory */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_sramsize;    <span class="comment">/* size     of SRAM memory */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_ARM</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_arm_freq; <span class="comment">/* arm frequency */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_dsp_freq; <span class="comment">/* dsp core frequency */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_ddr_freq; <span class="comment">/* ddr frequency */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_MPC8xx) || defined(CONFIG_E500) || defined(CONFIG_MPC86xx)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_immr_base; <span class="comment">/* base of IMMR register */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_M68K)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_mbar_base; <span class="comment">/* base of internal registers */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_MPC83xx)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_immrbar;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_bootflags;   <span class="comment">/* boot / reboot flag (Unused) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_ip_addr;     <span class="comment">/* IP Address */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> bi_enetaddr[<span class="number">6</span>]; <span class="comment">/* OLD: see README.enetaddr */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> bi_ethspeed;   <span class="comment">/* Ethernet speed in Mbps */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_intfreq;     <span class="comment">/* Internal Freq, in MHz */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_busfreq;     <span class="comment">/* Bus Freq, in MHz */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_CPM2)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_cpmfreq; <span class="comment">/* CPM_CLK Freq, in MHz */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_brgfreq; <span class="comment">/* BRG_CLK Freq, in MHz */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_sccfreq; <span class="comment">/* SCC_CLK Freq, in MHz */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_vco;     <span class="comment">/* VCO Out from PLL, in MHz */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_M68K)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_ipbfreq; <span class="comment">/* IPB Bus Freq, in MHz */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_pcifreq; <span class="comment">/* PCI Bus Freq, in MHz */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_EXTRA_CLOCK)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_inpfreq; <span class="comment">/* input Freq in MHz */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_vcofreq; <span class="comment">/* vco Freq in MHz */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> bi_flbfreq; <span class="comment">/* Flexbus Freq in MHz */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_HAS_ETH1</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> bi_enet1addr[<span class="number">6</span>]; <span class="comment">/* OLD: see README.enetaddr */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_HAS_ETH2</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> bi_enet2addr[<span class="number">6</span>]; <span class="comment">/* OLD: see README.enetaddr */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_HAS_ETH3</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> bi_enet3addr[<span class="number">6</span>]; <span class="comment">/* OLD: see README.enetaddr */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_HAS_ETH4</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> bi_enet4addr[<span class="number">6</span>]; <span class="comment">/* OLD: see README.enetaddr */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_HAS_ETH5</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> bi_enet5addr[<span class="number">6</span>]; <span class="comment">/* OLD: see README.enetaddr */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    ulong bi_arch_number; <span class="comment">/* unique id for this board */</span></span><br><span class="line">    ulong bi_boot_params; <span class="comment">/* where this board expects params */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_NR_DRAM_BANKS</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span> <span class="comment">/* RAM configuration */</span></span><br><span class="line">        <span class="type">phys_addr_t</span> start;</span><br><span class="line">        <span class="type">phys_size_t</span> size;</span><br><span class="line">    &#125; bi_dram[CONFIG_NR_DRAM_BANKS];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">&#125; <span class="type">bd_t</span>;</span><br></pre></td></tr></table></figure><p>对于arm，gd的首地址存放在<code>r9</code>中，u-boot定义了<code>DECLARE_GLOBAL_DATA_PTR</code>宏，通过它即可访问gd结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arch/arm/include/asm/global_data.h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_ARM64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_GLOBAL_DATA_PTR        register volatile gd_t *gd asm (<span class="string">&quot;x18&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_GLOBAL_DATA_PTR        register volatile gd_t *gd asm (<span class="string">&quot;r9&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>gd的内存分布：</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/3002_1527-cSG5C1lkWNGWXnM8.png" alt="image-20220330021527690" style="zoom:200%;" /><p>图来自：<a href="https://blog.csdn.net/ooonebook/article/details/53013545">https://blog.csdn.net/ooonebook/article/details/53013545</a></p><h2 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a>代码流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 对relocate进行空间规划</span><br><span class="line">* 计算uboot代码空间到relocation的位置的偏移</span><br><span class="line">* relocate旧的global_data到新的global_data的空间上</span><br><span class="line">* relocate旧的uboot代码空间到新的空间上去</span><br><span class="line">* 修改relocate之后全局变量的label。</span><br><span class="line">* relocate中断向量表</span><br></pre></td></tr></table></figure><h2 id="基础：ARM-ABI约定"><a href="#基础：ARM-ABI约定" class="headerlink" title="基础：ARM ABI约定"></a>基础：ARM ABI约定</h2><p>ARM架构程序调用标准(Procedure Call Standard for the ARM Architecture, <strong>AAPCS</strong>)描述了ARM架构下应用程序二进制接口(Application Binary Interface, <strong>ABI</strong>)程序调用的标准.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">寄存器      别名        特殊名          程序调用标准中作用</span><br><span class="line">r15                     PC              程序计数器.</span><br><span class="line">r14                     LR              链接寄存器.</span><br><span class="line">r13                     SP              栈指针.</span><br><span class="line">r12                     IP              程序调用过程中备份寄存器.</span><br><span class="line">r11         v8                          变量寄存器8.</span><br><span class="line">r10         v7                          变量寄存器7.</span><br><span class="line">r9                      v6 / SB / TR    平台寄存器, 该寄存器意义由平台标准指定.</span><br><span class="line">r8          v5                          变量寄存器5.</span><br><span class="line">r7          v4                          变量寄存器4.</span><br><span class="line">r6          v3                          变量寄存器3.</span><br><span class="line">r5          v2                          变量寄存器2.</span><br><span class="line">r4          v1                          变量寄存器1.</span><br><span class="line">r3          a4                          参数 / 备份寄存器4.</span><br><span class="line">r2          a3                          参数 / 备份寄存器3.</span><br><span class="line">r1          a2                          参数 / 结果 / 备份寄存器2.</span><br><span class="line">r0          a1                          参数 / 结果 / 备份寄存器1.</span><br></pre></td></tr></table></figure><p><strong>程序计数器r15–PC</strong>——指向<code>正在取址</code>的指令</p><p>由于RAM的流水线结构，对于3级流水线结构，指令分为三个阶段执行：取址，译码(识别将要被执行的指令)，执行(处理指令并将结果写回寄存器)；<strong>人们习惯约定将“正在执行的指令作为参考点”</strong>，称之为当前第一条指令，因此PC总是指向第3条指令，对于arm32，每条指令为4byte，所以**<code>PC=当前程序执行位置+8</code>**.</p><p><strong>链接寄存器r14–LR</strong>——用于保存子程序的返回地址;</p><p><strong>栈指针r13–SP</strong>——指示当前要出栈或入栈的数据</p><p>在子程序中寄存器r13不能用作它用，它的值在进入、退出子程序时必须相等;</p><h2 id="总体代码-main"><a href="#总体代码-main" class="headerlink" title="总体代码-_main"></a>总体代码-<code>_main</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">#arch/arm/lib/crt0.S</span><br><span class="line"> </span><br><span class="line">ENTRY(_main)</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">* Set up initial C runtime environment and call board_init_f(0).</span><br><span class="line">*/</span><br><span class="line"> </span><br><span class="line">    #预设堆栈指针，只是预设的堆栈地址，不是最终的</span><br><span class="line">#if defined(CONFIG_SPL_BUILD) &amp;&amp; defined(CONFIG_SPL_STACK)</span><br><span class="line">    ldr    r0, =(CONFIG_SPL_STACK)            #SPL的话一般使用片内SRAM</span><br><span class="line">#else</span><br><span class="line">    ldr    r0, =(CONFIG_SYS_INIT_SP_ADDR)    #u-boot使用片外SDRAM</span><br><span class="line">#endif</span><br><span class="line">    bic    r0, r0, #7    /* 8-byte alignment for ABI compliance */</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">    * 将r0作为board_init_f_alloc_reserve()的参数，分配栈空间</span><br><span class="line">    * 返回后，r0里存放的是gd的首地址，同时也是新的堆栈地址</span><br><span class="line">    * 因为堆栈是向下增长的，而gd的内容是向上的，所以互不冲突</span><br><span class="line">    */</span><br><span class="line">    mov    sp, r0</span><br><span class="line">    bl    board_init_f_alloc_reserve</span><br><span class="line">    mov    sp, r0</span><br><span class="line">    /* set up gd here, outside any C code */</span><br><span class="line">    mov    r9, r0     #使用r9保存gd的首地址</span><br><span class="line"> </span><br><span class="line">    #初始化gd结构体</span><br><span class="line">    bl    board_init_f_init_reserve</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">    * board_init_f实现了：</span><br><span class="line">    *        1.对relocate进行空间规划</span><br><span class="line">    *        2.计算uboot代码空间到relocation的位置的偏移</span><br><span class="line">    *        3.relocate旧的global_data到新的global_data的空间上</span><br><span class="line">    */</span><br><span class="line">    mov    r0, #0</span><br><span class="line">    bl    board_init_f</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#if ! defined(CONFIG_SPL_BUILD)</span><br><span class="line">/*</span><br><span class="line">* Set up intermediate environment (new sp and gd) and call</span><br><span class="line">* relocate_code(addr_moni). Trick here is that we&#x27;ll return</span><br><span class="line">* &#x27;here&#x27; but relocated.</span><br><span class="line">*/</span><br><span class="line"> </span><br><span class="line">    #新的栈地址</span><br><span class="line">    ldr    r0, [r9, #GD_START_ADDR_SP]    /* sp = gd-&gt;start_addr_sp */</span><br><span class="line">    bic    r0, r0, #7                    /* 8-byte alignment for ABI compliance */</span><br><span class="line">    mov    sp, r0                       </span><br><span class="line"> </span><br><span class="line">    #新的gd地址，新gd位于旧gd-&gt;bd之下</span><br><span class="line">    ldr    r9, [r9, #GD_BD]            /* r9 = gd-&gt;bd */</span><br><span class="line">    sub    r9, r9, #GD_SIZE            /* new GD is below bd */</span><br><span class="line"> </span><br><span class="line">    #计算返回地址在新的u-boot空间中的地址。b调用函数返回之后，就跳到了新的u-boot代码空间中</span><br><span class="line">    adr    lr, here</span><br><span class="line">    ldr    r0, [r9, #GD_RELOC_OFF]        /* r0 = gd-&gt;reloc_off */</span><br><span class="line">    add    lr, lr, r0</span><br><span class="line">    #if defined(CONFIG_CPU_V7M)</span><br><span class="line">        orr    lr, #1                    /* As required by Thumb-only */</span><br><span class="line">    #endif</span><br><span class="line">    ldr    r0, [r9, #GD_RELOCADDR]        /* r0 = gd-&gt;relocaddr */</span><br><span class="line"> </span><br><span class="line">    /* relocate_code实现了</span><br><span class="line">    * 1. relocate旧的uboot代码空间到新的空间上去</span><br><span class="line">    * 2. 修改relocate之后全局变量的label(.rel.dyn段等)</span><br><span class="line">    */</span><br><span class="line">    b    relocate_code</span><br><span class="line"> </span><br><span class="line">    #以下为新的u-boot代码空间</span><br><span class="line"> </span><br><span class="line">here:</span><br><span class="line">    /*</span><br><span class="line">    * now relocate vectors</span><br><span class="line">    */</span><br><span class="line">    bl    relocate_vectors</span><br><span class="line"> </span><br><span class="line">/* Set up final (full) environment */</span><br><span class="line"> </span><br><span class="line">    bl    c_runtime_cpu_setup    /* we still call old routine here */</span><br><span class="line">#endif /*!defined(CONFIG_SPL_BUILD)*/</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#if !defined(CONFIG_SPL_BUILD) || defined(CONFIG_SPL_FRAMEWORK)</span><br><span class="line">    #对于SPL</span><br><span class="line">    #ifdef CONFIG_SPL_BUILD</span><br><span class="line">        /* Use a DRAM stack for the rest of SPL, if requested */</span><br><span class="line">        bl    spl_relocate_stack_gd</span><br><span class="line">        cmp    r0, #0</span><br><span class="line">        movne    sp, r0</span><br><span class="line">        movne    r9, r0</span><br><span class="line">    #endif</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">    * 以下作用：清空bss段</span><br><span class="line">    */</span><br><span class="line">    ldr    r0, =__bss_start    /* this is auto-relocated! */</span><br><span class="line">    #ifdef CONFIG_USE_ARCH_MEMSET</span><br><span class="line">        ldr    r3, =__bss_end        /* this is auto-relocated! */</span><br><span class="line">        mov    r1, #0x00000000        /* prepare zero to clear BSS */</span><br><span class="line"> </span><br><span class="line">        subs    r2, r3, r0        /* r2 = memset len */</span><br><span class="line">        bl    memset</span><br><span class="line">    #else</span><br><span class="line">        ldr    r1, =__bss_end        /* this is auto-relocated! */</span><br><span class="line">        mov    r2, #0x00000000        /* prepare zero to clear BSS */</span><br><span class="line"> </span><br><span class="line">        clbss_l:cmp    r0, r1            /* while not at end of BSS */</span><br><span class="line">        #if defined(CONFIG_CPU_V7M)</span><br><span class="line">            itt    lo</span><br><span class="line">        #endif</span><br><span class="line">        strlo    r2, [r0]        /* clear 32-bit BSS word */</span><br><span class="line">        addlo    r0, r0, #4        /* move to next */</span><br><span class="line">        blo    clbss_l</span><br><span class="line">    #endif</span><br><span class="line"> </span><br><span class="line">    #if ! defined(CONFIG_SPL_BUILD)</span><br><span class="line">        bl coloured_LED_init</span><br><span class="line">        bl red_led_on</span><br><span class="line">    #endif</span><br><span class="line"> </span><br><span class="line">    /*</span><br><span class="line">    * 执行board_init_r()</span><br><span class="line">    * 参数1： gd-&gt;new_gd</span><br><span class="line">    * 参数2： gd-&gt;relocaddr</span><br><span class="line">    */</span><br><span class="line">    /* call board_init_r(gd_t *id, ulong dest_addr) */</span><br><span class="line">    mov     r0, r9                  /* gd_t */</span><br><span class="line">    ldr    r1, [r9, #GD_RELOCADDR]        /* dest_addr */</span><br><span class="line"> </span><br><span class="line">    /* call board_init_r */</span><br><span class="line">    #if CONFIG_IS_ENABLED(SYS_THUMB_BUILD)</span><br><span class="line">        ldr    lr, =board_init_r        /* this is auto-relocated! */</span><br><span class="line">        bx    lr</span><br><span class="line">    #else</span><br><span class="line">        ldr    pc, =board_init_r        /* this is auto-relocated! */</span><br><span class="line"> </span><br><span class="line">        @ mov r0, #0xfd</span><br><span class="line">        @ bl    asm_led_on</span><br><span class="line">    #endif</span><br><span class="line"> </span><br><span class="line">    /* we should not return here. */</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">ENDPROC(_main)</span><br></pre></td></tr></table></figure><p><strong>以下内容，以正在移植的OK6410板子为分析对象。</strong></p><h2 id="board-init-f-alloc-reserve-分析"><a href="#board-init-f-alloc-reserve-分析" class="headerlink" title="board_init_f_alloc_reserve()分析"></a>board_init_f_alloc_reserve()分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//common/init/board_init.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Allocate reserved space for use as &#x27;globals&#x27; from &#x27;top&#x27; address and</span></span><br><span class="line"><span class="comment">* return &#x27;bottom&#x27; address of allocated space</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Notes:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Actual reservation cannot be done from within this function as</span></span><br><span class="line"><span class="comment">* it requires altering the C stack pointer, so this will be done by</span></span><br><span class="line"><span class="comment">* the caller upon return from this function.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* IMPORTANT:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Alignment constraints may differ for each &#x27;chunk&#x27; allocated. For now:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* - GD is aligned down on a 16-byte boundary</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"> *  - the early malloc arena is not aligned, therefore it follows the stack</span></span><br><span class="line"><span class="comment"> *   alignment constraint of the architecture for which we are bulding.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"> *  - GD is allocated last, so that the return value of this functions is</span></span><br><span class="line"><span class="comment"> *   both the bottom of the reserved area and the address of GD, should</span></span><br><span class="line"><span class="comment"> *   the calling context need it.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 以手头的OK6410板子分析：</span></span><br><span class="line"><span class="comment">* CONFIG_SYS_TEXT_BASE = 0x5FE00000</span></span><br><span class="line"><span class="comment">* CONFIG_SYS_INIT_SP_ADDR = (CONFIG_SYS_TEXT_BASE - 0x80)</span></span><br><span class="line"><span class="comment">* SYS_MALLOC_F_LEN宏没有定义</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">ulong <span class="title function_">board_init_f_alloc_reserve</span><span class="params">(ulong top)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Reserve early malloc arena */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_VAL(SYS_MALLOC_F_LEN)</span></span><br><span class="line">    top -= CONFIG_VAL(SYS_MALLOC_F_LEN);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* LAST : reserve GD (rounded up to a multiple of 16 bytes) */</span></span><br><span class="line">    <span class="comment">//保留出了用于存放gd的空间，并使新sp地址16字节对齐，这里gd_size=208=0xd0</span></span><br><span class="line">    top = rounddown(top-<span class="keyword">sizeof</span>(<span class="keyword">struct</span> global_data), <span class="number">16</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="board-init-f-init-reserve分析"><a href="#board-init-f-init-reserve分析" class="headerlink" title="board_init_f_init_reserve分析"></a>board_init_f_init_reserve分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//common/init/board_init.c</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Initialize reserved space (which has been safely allocated on the C</span></span><br><span class="line"><span class="comment">* stack from the C runtime environment handling code).</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Notes:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Actual reservation was done by the caller; the locations from base</span></span><br><span class="line"><span class="comment">* to base+size-1 (where &#x27;size&#x27; is the value returned by the allocation</span></span><br><span class="line"><span class="comment">* function above) can be accessed freely without risk of corrupting the</span></span><br><span class="line"><span class="comment">* C runtime environment.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* IMPORTANT:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Upon return from the allocation function above, on some architectures</span></span><br><span class="line"><span class="comment">* the caller will set gd to the lowest reserved location. Therefore, in</span></span><br><span class="line"><span class="comment">* this initialization function, the global data MUST be placed at base.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* ALSO IMPORTANT:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* On some architectures, gd will already be good when entering this</span></span><br><span class="line"><span class="comment">* function. On others, it will only be good once arch_setup_gd() returns.</span></span><br><span class="line"><span class="comment">* Therefore, global data accesses must be done:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* - through gd_ptr if before the call to arch_setup_gd();</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* - through gd once arch_setup_gd() has been called.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Do not use &#x27;gd-&gt;&#x27; until arch_setup_gd() has been called!</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* IMPORTANT TOO:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Initialization for each &quot;chunk&quot; (GD, early malloc arena...) ends with</span></span><br><span class="line"><span class="comment">* an incrementation line of the form &#x27;base += &lt;some size&gt;&#x27;. The last of</span></span><br><span class="line"><span class="comment">* these incrementations seems useless, as base will not be used any</span></span><br><span class="line"><span class="comment">* more after this incrementation; but if/when a new &quot;chunk&quot; is appended,</span></span><br><span class="line"><span class="comment">* this increment will be essential as it will give base right value for</span></span><br><span class="line"><span class="comment">* this new chunk (which will have to end with its own incrementation</span></span><br><span class="line"><span class="comment">* statement). Besides, the compiler&#x27;s optimizer will silently detect</span></span><br><span class="line"><span class="comment">* and remove the last base incrementation, therefore leaving that last</span></span><br><span class="line"><span class="comment">* (seemingly useless) incrementation causes no code increase.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">board_init_f_init_reserve</span><span class="params">(ulong base)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">global_data</span> *<span class="title">gd_ptr</span>;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * clear GD entirely and set it up.</span></span><br><span class="line"><span class="comment">     * Use gd_ptr, as gd may not be properly set yet.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    gd_ptr = (<span class="keyword">struct</span> global_data *)base;</span><br><span class="line">    <span class="comment">/* zero the area */</span></span><br><span class="line">    <span class="built_in">memset</span>(gd_ptr, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(*gd));</span><br><span class="line">    <span class="comment">/* set GD unless architecture did it already */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(CONFIG_ARM)</span></span><br><span class="line">    arch_setup_gd(gd_ptr);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* next alloc will be higher by one GD plus 16-byte alignment */</span></span><br><span class="line">    base += roundup(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> global_data), <span class="number">16</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * record early malloc arena start.</span></span><br><span class="line"><span class="comment">     * Use gd as it is now properly set for all architectures.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_VAL(SYS_MALLOC_F_LEN)</span></span><br><span class="line">    <span class="comment">/* go down one &#x27;early malloc arena&#x27; */</span></span><br><span class="line">    gd-&gt;malloc_base = base;</span><br><span class="line">    <span class="comment">/* next alloc will be higher by one &#x27;early malloc arena&#x27; size */</span></span><br><span class="line">    base += CONFIG_VAL(SYS_MALLOC_F_LEN);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完此函数后，内存分布如下：</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/3100_4910-n6OxP0RAMVr3HlBF.png" alt="image-20220331004909952" style="zoom:200%;" /> <h2 id="board-init-f-分析"><a href="#board-init-f-分析" class="headerlink" title="board_init_f()分析"></a>board_init_f()分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//common/board_f.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">board_init_f</span><span class="params">(ulong boot_flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过r9访问gd结构体</span></span><br><span class="line">    gd-&gt;flags = boot_flags;</span><br><span class="line">    gd-&gt;have_console = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//通过init_sequence_f指针数组执行初始化流程，指针数组中存放各初始化函数首地址   </span></span><br><span class="line">    <span class="keyword">if</span> (initcall_run_list(init_sequence_f))</span><br><span class="line">        hang();</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(CONFIG_ARM) &amp;&amp; !defined(CONFIG_SANDBOX) &amp;&amp; \</span></span><br><span class="line"><span class="meta">        !defined(CONFIG_EFI_APP) &amp;&amp; !CONFIG_IS_ENABLED(X86_64) &amp;&amp; \</span></span><br><span class="line"><span class="meta">        !defined(CONFIG_ARC)</span></span><br><span class="line">    <span class="comment">/* NOTREACHED - jump_to_copy() does not return */</span></span><br><span class="line">    hang();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//init_sequence_f数组</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">init_fnc_t</span> init_sequence_f[] = &#123;</span><br><span class="line">    setup_mon_len,      <span class="comment">//设置gd-&gt;mon_len,即u-boot的大小</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_OF_CONTROL</span></span><br><span class="line">    fdtdec_setup,        <span class="comment">//设置gd-&gt;fdt_blob,即dts存放的地址</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TRACE</span></span><br><span class="line">    trace_early_init,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">   dram_init,<span class="comment">/* configure available RAM banks */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略..... 删除部分宏相关，对arm平台无效代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以下是一些和布局相关得函数</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Now that we have DRAM mapped and working, we can</span></span><br><span class="line"><span class="comment">     * relocate the code and continue running from DRAM.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Reserve memory at end of RAM for (top down in that order):</span></span><br><span class="line"><span class="comment">     *  - area that won&#x27;t get touched by U-Boot and Linux (optional)</span></span><br><span class="line"><span class="comment">     *  - kernel log buffer</span></span><br><span class="line"><span class="comment">     *  - protected RAM</span></span><br><span class="line"><span class="comment">     *  - LCD framebuffer</span></span><br><span class="line"><span class="comment">     *  - monitor code</span></span><br><span class="line"><span class="comment">     *  - board info struct</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    setup_dest_addr,</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PRAM</span></span><br><span class="line">    reserve_pram,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    reserve_round_4k,</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_ARM</span></span><br><span class="line">    reserve_mmu,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    reserve_video,</span><br><span class="line">    reserve_trace,</span><br><span class="line">    reserve_uboot,</span><br><span class="line">    reserve_malloc,</span><br><span class="line">    reserve_board,</span><br><span class="line">    setup_machine,</span><br><span class="line">    reserve_global_data,</span><br><span class="line">    reserve_fdt,</span><br><span class="line">    reserve_bootstage,</span><br><span class="line">    reserve_arch,</span><br><span class="line">    reserve_stacks,</span><br><span class="line">    dram_init_banksize,</span><br><span class="line">    show_dram_config,</span><br><span class="line">    display_new_sp,</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_OF_BOARD_FIXUP</span></span><br><span class="line">    fix_fdt,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    INIT_FUNC_WATCHDOG_RESET</span><br><span class="line">    reloc_fdt,</span><br><span class="line">    reloc_bootstage,</span><br><span class="line">    setup_reloc,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(CONFIG_ARM) &amp;&amp; !defined(CONFIG_SANDBOX) &amp;&amp; \</span></span><br><span class="line"><span class="meta">        !CONFIG_IS_ENABLED(X86_64)</span></span><br><span class="line">    jump_to_copy,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里分析一些重要的函数：</p><ul><li><p><strong>setup_dest_addr()</strong>–目的地址初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//common/board_f.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">setup_dest_addr</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*表示u-boot的大小，在uboot代码空间relocate的时候，</span></span><br><span class="line"><span class="comment">    * relocate的size就是由这里决定</span></span><br><span class="line"><span class="comment">    * gd-&gt;mon_len = (ulong)&amp;__bss_end - (ulong)_start;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">debug(<span class="string">&quot;Monitor len: %08lX\n&quot;</span>, gd-&gt;mon_len);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ram is setup, size stored in gd !!</span></span><br><span class="line"><span class="comment"> * 表示ram的大小，对于ok6410，在smdk6410.c中由dram_init()初始化</span></span><br><span class="line"><span class="comment"> * gd-&gt;bd-&gt;bi_dram[0].start = 0x50000000; </span></span><br><span class="line"><span class="comment">     *gd-&gt;bd-&gt;bi_dram[0].size = 0x10000000; //256M</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">debug(<span class="string">&quot;Ram size: %08lX\n&quot;</span>, (ulong)gd-&gt;ram_size);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_SYS_MEM_TOP_HIDE)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Subtract specified amount of memory to hide so that it won&#x27;t</span></span><br><span class="line"><span class="comment"> * get &quot;touched&quot; at all by U-Boot. By fixing up gd-&gt;ram_size</span></span><br><span class="line"><span class="comment"> * the Linux kernel should now get passed the now &quot;corrected&quot;</span></span><br><span class="line"><span class="comment"> * memory size and won&#x27;t touch it either. This should work</span></span><br><span class="line"><span class="comment"> * for arch/ppc and arch/powerpc. Only Linux board ports in</span></span><br><span class="line"><span class="comment"> * arch/powerpc with bootwrapper support, that recalculate the</span></span><br><span class="line"><span class="comment"> * memory size from the SDRAM controller setup will have to</span></span><br><span class="line"><span class="comment"> * get fixed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gd-&gt;ram_size -= CONFIG_SYS_MEM_TOP_HIDE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SYS_SDRAM_BASE</span></span><br><span class="line">gd-&gt;ram_base = CONFIG_SYS_SDRAM_BASE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 计算dram的顶端地址：gd-&gt;ram_top = gd-&gt;ram_base + gd-&gt;ram_size;</span></span><br><span class="line"><span class="comment">    * relocate地址(新u-boot的起始地址)：gd-&gt;relocaddr = gd-&gt;ram_top;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">gd-&gt;ram_top = gd-&gt;ram_base + get_effective_memsize();</span><br><span class="line">gd-&gt;ram_top = board_get_usable_ram_top(gd-&gt;mon_len);</span><br><span class="line">gd-&gt;relocaddr = gd-&gt;ram_top;</span><br><span class="line">debug(<span class="string">&quot;Ram top: %08lX\n&quot;</span>, (ulong)gd-&gt;ram_top);</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CONFIG_MP) &amp;&amp; (defined(CONFIG_MPC86xx) || defined(CONFIG_E500))</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We need to make sure the location we intend to put secondary core</span></span><br><span class="line"><span class="comment"> * boot code is reserved and not used by any part of u-boot</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (gd-&gt;relocaddr &gt; determine_mp_bootpg(<span class="literal">NULL</span>)) &#123;</span><br><span class="line">gd-&gt;relocaddr = determine_mp_bootpg(<span class="literal">NULL</span>);</span><br><span class="line">debug(<span class="string">&quot;Reserving MP boot page to %08lx\n&quot;</span>, gd-&gt;relocaddr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>setup_reloc()</strong>–计算u-boot地址偏移量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//common/board_f.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">setup_reloc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (gd-&gt;flags &amp; GD_FLG_SKIP_RELOC) &#123;</span><br><span class="line">debug(<span class="string">&quot;Skipping relocation due to flag\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_SYS_TEXT_BASE</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ARM</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 对于arm</span></span><br><span class="line"><span class="comment">    * 偏移量gd-&gt;reloc_off=gd-&gt;relocaddr-(unsigned long)__image_copy_start</span></span><br><span class="line"><span class="comment">    * gd-&gt;relocaddr为新u-boot的起始地址</span></span><br><span class="line"><span class="comment">    * __image_copy_start在u-boot.lds链接器脚本文件中定义，是旧u-boot的起始地址</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">gd-&gt;reloc_off = gd-&gt;relocaddr - (<span class="type">unsigned</span> <span class="type">long</span>)__image_copy_start;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(CONFIG_M68K)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On all ColdFire arch cpu, monitor code starts always</span></span><br><span class="line"><span class="comment"> * just after the default vector table location, so at 0x400</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gd-&gt;reloc_off = gd-&gt;relocaddr - (CONFIG_SYS_TEXT_BASE + <span class="number">0x400</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">gd-&gt;reloc_off = gd-&gt;relocaddr - CONFIG_SYS_TEXT_BASE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//relocate旧的global_data到新的global_data的空间上</span></span><br><span class="line"><span class="built_in">memcpy</span>(gd-&gt;new_gd, (<span class="type">char</span> *)gd, <span class="keyword">sizeof</span>(<span class="type">gd_t</span>));</span><br><span class="line"></span><br><span class="line">debug(<span class="string">&quot;Relocation Offset is: %08lx\n&quot;</span>, gd-&gt;reloc_off);</span><br><span class="line">debug(<span class="string">&quot;Relocating to %08lx, new gd at %08lx, sp at %08lx\n&quot;</span>,</span><br><span class="line">      gd-&gt;relocaddr, (ulong)map_to_sysmem(gd-&gt;new_gd),</span><br><span class="line">      gd-&gt;start_addr_sp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="relocate-code分析"><a href="#relocate-code分析" class="headerlink" title="relocate_code分析"></a>relocate_code分析</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#ldr    r0, [r9, #GD_RELOCADDR]</span><br><span class="line">#bl relocate_code</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * arch/arm/lib/relocate.S</span><br><span class="line"> *</span><br><span class="line"> * void relocate_code(addr_moni)</span><br><span class="line"> *</span><br><span class="line"> * This function relocates the monitor code.</span><br><span class="line"> *</span><br><span class="line"> * NOTE:</span><br><span class="line"> * To prevent the code below from containing references with an R_ARM_ABS32</span><br><span class="line"> * relocation record type, we never refer to linker-defined symbols directly.</span><br><span class="line"> * Instead, we declare literals which contain their relative location with</span><br><span class="line"> * respect to relocate_code, and at run time, add relocate_code back to them.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">ENTRY(relocate_code)</span><br><span class="line">/*</span><br><span class="line">* r0是新的u-boot起始地址， __image_copy_start是原u-boot起始地址</span><br><span class="line">* r4偏移量， r2原u-boot的结束地址  </span><br><span class="line">*/</span><br><span class="line">ldrr1, =__image_copy_start/* r1 &lt;- SRC &amp;__image_copy_start */</span><br><span class="line">subsr4, r0, r1/* r4 &lt;- relocation offset */</span><br><span class="line">beqrelocate_done/* skip relocation */</span><br><span class="line">ldrr2, =__image_copy_end/* r2 &lt;- SRC &amp;__image_copy_end */</span><br><span class="line"></span><br><span class="line">copy_loop:</span><br><span class="line">ldmiar1!, &#123;r10-r11&#125;/* copy from source address [r1]    */</span><br><span class="line">stmiar0!, &#123;r10-r11&#125;/* copy to   target address [r0]    */</span><br><span class="line">cmpr1, r2/* until source end address [r2]    */</span><br><span class="line">blocopy_loop</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * relocate之后，根据位置无关代码原理，需要fix.rel .dyn段的地址</span><br><span class="line"> * fix .rel.dyn relocations</span><br><span class="line"> */</span><br><span class="line">ldrr2, =__rel_dyn_start/* r2 &lt;- SRC &amp;__rel_dyn_start */</span><br><span class="line">ldrr3, =__rel_dyn_end/* r3 &lt;- SRC &amp;__rel_dyn_end */</span><br><span class="line">fixloop:</span><br><span class="line">ldmiar2!, &#123;r0-r1&#125;/* (r0,r1) &lt;- (SRC location,fixup) */</span><br><span class="line">andr1, r1, #0xff</span><br><span class="line">cmpr1, #R_ARM_RELATIVE/*R_ARM_RELATIVE=23=0x17*/</span><br><span class="line">bnefixnext/*比较高4byte是否是0x17,不是说明不是label*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* label在relocate uboot的时候也已经复制到了新的uboot地址空间了</span><br><span class="line">* 这里要注意，是对新的uboot地址空间label进行修改</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/* relative fix: increase location by offset */</span><br><span class="line">/*</span><br><span class="line">* r0存的是旧地址空间的label地址</span><br><span class="line">* 新地址空间的label地址=旧地址空间的label地址+偏移</span><br><span class="line">*/</span><br><span class="line">addr0, r0, r4</span><br><span class="line">ldrr1, [r0]/*从label中获取绝对地址符号的地址，存放在r1中*/</span><br><span class="line">addr1, r1, r4/*新地址*/</span><br><span class="line">strr1, [r0]/*更新label地址*/</span><br><span class="line">fixnext:</span><br><span class="line">cmpr2, r3</span><br><span class="line">blofixloop</span><br><span class="line"></span><br><span class="line">relocate_done:</span><br><span class="line"></span><br><span class="line">#ifdef __XSCALE__</span><br><span class="line">/*</span><br><span class="line"> * On xscale, icache must be invalidated and write buffers drained,</span><br><span class="line"> * even with cache disabled - 4.2.7 of xscale core developer&#x27;s manual</span><br><span class="line"> */</span><br><span class="line">mcrp15, 0, r0, c7, c7, 0/* invalidate icache */</span><br><span class="line">mcrp15, 0, r0, c7, c10, 4/* drain write buffer */</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/* ARMv4- don&#x27;t know bx lr but the assembler fails to see that */</span><br><span class="line"></span><br><span class="line">#ifdef __ARM_ARCH_4__</span><br><span class="line">movpc, lr</span><br><span class="line">#else</span><br><span class="line">bxlr</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">ENDPROC(relocate_code)</span><br></pre></td></tr></table></figure><h2 id="relocate-vectors分析"><a href="#relocate-vectors分析" class="headerlink" title="relocate_vectors分析"></a>relocate_vectors分析</h2><p>arm平台中断向量表定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#arch/arm/lib/vectors.S</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *************************************************************************</span><br><span class="line"> *</span><br><span class="line"> * Indirect vectors table</span><br><span class="line"> *</span><br><span class="line"> * Symbols referenced here must be defined somewhere else</span><br><span class="line"> *</span><br><span class="line"> *************************************************************************</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">.globl_undefined_instruction</span><br><span class="line">.globl_software_interrupt</span><br><span class="line">.globl_prefetch_abort</span><br><span class="line">.globl_data_abort</span><br><span class="line">.globl_not_used</span><br><span class="line">.globl_irq</span><br><span class="line">.globl_fiq</span><br><span class="line"></span><br><span class="line">_undefined_instruction:.word undefined_instruction</span><br><span class="line">_software_interrupt:.word software_interrupt</span><br><span class="line">_prefetch_abort:.word prefetch_abort</span><br><span class="line">_data_abort:.word data_abort</span><br><span class="line">_not_used:.word not_used</span><br><span class="line">_irq:.word irq</span><br><span class="line">_fiq:.word fiq</span><br><span class="line"></span><br><span class="line">.balignl 16,0xdeadbeef</span><br></pre></td></tr></table></figure><p>在ARM V4及V4T以后的大部分处理器中，<strong>中断向量表的位置可以有两个位置</strong>：一个是<code>0x00000000</code>，另一个是<code>0xFFFF0000</code>。可以通过CP15协处理器c1寄存器中V位(bit[13])控制。V和中断向量表的对应关系如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V=0  0x00000000~0x0000001C</span><br><span class="line"></span><br><span class="line">V=1  0xFFFF0000~0xFFFF001C</span><br></pre></td></tr></table></figure><p>当u-boot relocate之后，其异常处理函数也发生了变化，所以需要更新中断向量表。</p><p>查看objdump反汇编的u-boot文件，可以知道中断向量表在u-boot代码空间的情况：</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-04/0102_1720-T2pkc1yHyW9n6wiB.png" alt="image-20220401021720267" style="zoom:200%;" /><p>relocate_vectors代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#arch/arm/lib/relocate.S</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Default/weak exception vectors relocation routine</span><br><span class="line"> *</span><br><span class="line"> * This routine covers the standard ARM cases: normal (0x00000000),</span><br><span class="line"> * high (0xffff0000) and VBAR. SoCs which do not comply with any of</span><br><span class="line"> * the standard cases must provide their own, strong, version.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">.section.text.relocate_vectors,&quot;ax&quot;,%progbits</span><br><span class="line">.weakrelocate_vectors</span><br><span class="line"></span><br><span class="line">ENTRY(relocate_vectors)</span><br><span class="line"></span><br><span class="line">#ifdef CONFIG_CPU_V7M</span><br><span class="line">/*</span><br><span class="line"> * On ARMv7-M we only have to write the new vector address</span><br><span class="line"> * to VTOR register.</span><br><span class="line"> */</span><br><span class="line">ldrr0, [r9, #GD_RELOCADDR]/* r0 = gd-&gt;relocaddr */</span><br><span class="line">ldrr1, =V7M_SCB_BASE</span><br><span class="line">strr0, [r1, V7M_SCB_VTOR]</span><br><span class="line">#else</span><br><span class="line">#ifdef CONFIG_HAS_VBAR</span><br><span class="line">/*</span><br><span class="line"> * If the ARM processor has the security extensions,</span><br><span class="line"> * use VBAR to relocate the exception vectors.</span><br><span class="line"> */</span><br><span class="line">ldrr0, [r9, #GD_RELOCADDR]/* r0 = gd-&gt;relocaddr */</span><br><span class="line">mcr     p15, 0, r0, c12, c0, 0  /* Set VBAR */</span><br><span class="line">#else</span><br><span class="line">/*</span><br><span class="line"> * Copy the relocated exception vectors to the</span><br><span class="line"> * correct address</span><br><span class="line"> * CP15 c1 V bit gives us the location of the vectors:</span><br><span class="line"> * 0x00000000 or 0xFFFF0000.</span><br><span class="line"> * cp15协处理器的c1寄存器v标志位来决定向量表位置：0x00000000 or 0xFFFF0000</span><br><span class="line"> */</span><br><span class="line">ldrr0, [r9, #GD_RELOCADDR]/* r0 = gd-&gt;relocaddr，获取新u-boot起始地址*/</span><br><span class="line"></span><br><span class="line">mrcp15, 0, r2, c1, c0, 0/* V bit (bit[13]) in CP15 c1 */</span><br><span class="line">andsr2, r2, #(1 &lt;&lt; 13)</span><br><span class="line">ldreqr1, =0x00000000/* If V=0 */</span><br><span class="line">ldrner1, =0xFFFF0000/* If V=1 */</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* 没明白？？？？</span><br><span class="line">*/</span><br><span class="line">ldmiar0!, &#123;r2-r8,r10&#125;</span><br><span class="line">stmiar1!, &#123;r2-r8,r10&#125;</span><br><span class="line">ldmiar0!, &#123;r2-r8,r10&#125;</span><br><span class="line">stmiar1!, &#123;r2-r8,r10&#125;</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br><span class="line">bxlr</span><br><span class="line"></span><br><span class="line">ENDPROC(relocate_vectors)</span><br></pre></td></tr></table></figure><h1 id="待处理问题"><a href="#待处理问题" class="headerlink" title="待处理问题"></a>待处理问题</h1><p>u-boot relocate后的内存布局？</p><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://blog.csdn.net/ooonebook/article/details/53047992">uboot番外篇–uboot relocation介绍</a></p><p><a href="https://blog.csdn.net/skyflying2012/article/details/37660265">uboot的ocation原理详细分析</a></p><p><a href="https://wowothink.com/146db8db/">u-boot启动流程</a></p><p><a href="https://www.cfanz.cn/resource/detail/jWPXyMJJxDBYM">超详细【Uboot驱动开发】(二) uboot启动流程分析</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;u-boot的relocate是新版本u-boot开始有的一个功能，是指u-boot的重定向动作，将自身拷贝到sdram上的另外一个位置的动作。&lt;/p&gt;
&lt;p&gt;新版u-boot跟老版u-boot不太一样的地方，新版u-boot不管u-boot的加载地址在哪里，启动后会计算出一个靠近sdram顶端的地址，将自身代码拷贝到该地址，继续运行。&lt;/p&gt;</summary>
    
    
    
    <category term="U-Boot" scheme="https://blog.littlekang.xyz/categories/U-Boot/"/>
    
    
    <category term="u-boot" scheme="https://blog.littlekang.xyz/tags/u-boot/"/>
    
  </entry>
  
  <entry>
    <title>使用acme.sh申请泛域名证书</title>
    <link href="https://blog.littlekang.xyz/article/3481/"/>
    <id>https://blog.littlekang.xyz/article/3481/</id>
    <published>2022-03-31T07:36:41.000Z</published>
    <updated>2022-03-31T08:45:58.664Z</updated>
    
    <content type="html"><![CDATA[<p>这两天域名的证书又到期了，因为qiong呀一直都在用免费的，之前也使用过<code>acme.sh</code>来申请&amp;更新证书，但是使用一段时间后不能更新了，没有整好，就换到了<strong>zerossl</strong>，但是今天发现不能再次免费续了，超过了免费次数3次。</p><p>还是因为qiong，所以寻找了一下其他方案，看网络还是<code>acme.sh</code>相关的居多，今天又折腾了下<code>acme.sh</code>脚本，成功了，记录之。</p><span id="more"></span><h1 id="acme安装"><a href="#acme安装" class="headerlink" title="acme安装"></a>acme安装</h1><p>github仓库地址：<a href="https://github.com/acmesh-official/acme.sh">https://github.com/acmesh-official/acme.sh</a></p><p>根据README文档，可以有以下几种安装方式：</p><p>在线安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用curl</span></span><br><span class="line">curl https://get.acme.sh | sh -s email=my@example.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或者使用wget</span></span><br><span class="line">wget -O -  https://get.acme.sh | sh -s email=my@example.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过拉取git源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/acmesh-official/acme.sh.git</span><br><span class="line">cd ./acme.sh</span><br><span class="line">./acme.sh --install -m my@example.com</span><br></pre></td></tr></table></figure><p>手动安装(如果没有root权限，推荐这种)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">复制acme.sh到home</span></span><br><span class="line">cp acme.sh ~/.acme.sh/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">.bashrc创建一个别名</span></span><br><span class="line">alias acme.sh=&#x27;~/.acme.sh/acme.sh&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建cront定时任务脚本</span></span><br><span class="line">0 0 * * * &quot;/home/user/.acme.sh&quot;/acme.sh --cron --home &quot;/home/user/.acme.sh&quot; &gt; /dev/null</span><br></pre></td></tr></table></figure><p>这里使用了curl的安装方式，网络不是很稳定，试了几次成功了。</p><h1 id="证书申请"><a href="#证书申请" class="headerlink" title="证书申请"></a>证书申请</h1><p>根据<a href="https://github.com/acmesh-official/acme.sh/wiki/Change-default-CA-to-ZeroSSL">wiki</a>中的说明，从v3.0开始，默认CA服务商改为<code>ZeroSSL</code>，根据网上的教程操作了，在关联账号的时候就是不成功，超时不知道是网络问题，还是因为我的账号已经在web控制台申请了三次免费了；所以修改使用<code>Letsencrypt</code>.</p><p><strong>修改默认CA Server</strong>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br></pre></td></tr></table></figure><p><strong>配置DNS API参数</strong>：</p><p>这里使用了DNS API添加record方式来完成证书申请时的验证，有关DNS API可以参考官方wiki:</p><p><a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a></p><p>主要是需要定义相关的token，这边使用的是cloudflare，需要的参数如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export CF_Token=&quot;xxxxxxxxxxxxxxxxx&quot;</span><br><span class="line">export CF_Account_ID=&quot;xxxxxxxxxxxxx&quot;</span><br><span class="line">export CF_Zone_ID=&quot;xxxxxxxxxxxxx&quot;</span><br></pre></td></tr></table></figure><p>申请成功后，相关的参数将会保存在<code>domain/xxx.conf</code>文件中.</p><p><strong>申请证书</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./acme.sh --issue --dns dns_cf -d example.com -d www.example.com</span><br></pre></td></tr></table></figure><h1 id="证书部署"><a href="#证书部署" class="headerlink" title="证书部署"></a>证书部署</h1><p>关于证书部署可以参考官方wiki:</p><blockquote><p><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></p><p><a href="https://github.com/acmesh-official/acme.sh/wiki">https://github.com/acmesh-official/acme.sh/wiki</a></p></blockquote><p>这里说一下的是，可以通过<code>deploy_hook</code>实现自定义部署，有关deploy_hook详细参考：</p><p><a href="https://github.com/acmesh-official/acme.sh/wiki/deployhooks">https://github.com/acmesh-official/acme.sh/wiki/deployhooks</a></p><p>在<code>~/.acme.sh/deploy</code>目录下，存放自定义部署脚本，示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mayapi</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Here is a sample custom api script.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">This file name is <span class="string">&quot;myapi.sh&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">So, here must be a method   myapi_deploy()</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Which will be called by acme.sh to deploy the cert</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">returns 0 means success, otherwise error.</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######  Public functions #####################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">domain keyfile certfile cafile fullchain</span></span><br><span class="line">myapi_deploy() &#123;</span><br><span class="line">    _cdomain=&quot;$1&quot;</span><br><span class="line">    _ckey=&quot;$2&quot;</span><br><span class="line">    _ccert=&quot;$3&quot;</span><br><span class="line">    _cca=&quot;$4&quot;</span><br><span class="line">    _cfullchain=&quot;$5&quot;</span><br><span class="line"></span><br><span class="line">    echo &quot;will update domain: $_cdomain cert....&quot;</span><br><span class="line"></span><br><span class="line">    #update nginx cert</span><br><span class="line">    cat $_cfullchain &gt;/opt/etc/cert/cer/nginx.cer</span><br><span class="line">    cat $_ckey &gt;/opt/etc/cert/key/nginx.key</span><br><span class="line"></span><br><span class="line">    echo &quot;update nginx cert OK.&quot;</span><br><span class="line"></span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行部署脚本</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --deploy -d example.com --deploy-hook myapi</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这两天域名的证书又到期了，因为qiong呀一直都在用免费的，之前也使用过&lt;code&gt;acme.sh&lt;/code&gt;来申请&amp;amp;更新证书，但是使用一段时间后不能更新了，没有整好，就换到了&lt;strong&gt;zerossl&lt;/strong&gt;，但是今天发现不能再次免费续了，超过了免费次数3次。&lt;/p&gt;
&lt;p&gt;还是因为qiong，所以寻找了一下其他方案，看网络还是&lt;code&gt;acme.sh&lt;/code&gt;相关的居多，今天又折腾了下&lt;code&gt;acme.sh&lt;/code&gt;脚本，成功了，记录之。&lt;/p&gt;</summary>
    
    
    
    <category term="软件工具" scheme="https://blog.littlekang.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="nas" scheme="https://blog.littlekang.xyz/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>OK6410 u-boot-2018移植-SPL</title>
    <link href="https://blog.littlekang.xyz/article/50702/"/>
    <id>https://blog.littlekang.xyz/article/50702/</id>
    <published>2022-03-26T16:42:38.000Z</published>
    <updated>2022-03-26T17:16:30.609Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要使能SPL功能呢？</p><p>因为根据<code>S3C6410_Internal_ROM_Booting.pdf</code>文档中的启动流程描述，从Nand启动时，系统上电三星固化好的BL0会自动加载Nand中前8K到iROM；<br>因为u-boot的大小大于8K，BL0无法将所有的u-boot加载到iROM，u-boot为了解决此类设备的问题，引入了SPL。<br>由SPL (BL1)负责将u-boot (BL2)拷贝到SDRAM，DDR等，然后跳转到BL2中执行。</p><span id="more"></span><h1 id="SPL相关基础"><a href="#SPL相关基础" class="headerlink" title="SPL相关基础"></a>SPL相关基础</h1><p>参考之前的学习笔记：</p><blockquote><p><a href="https://blog.littlekang.xyz/article/20552/">u-boot SPL学习笔记</a></p></blockquote><h1 id="SPL相关配置"><a href="#SPL相关配置" class="headerlink" title="SPL相关配置"></a>SPL相关配置</h1><p>在<code>arch/arm/mach-s3c6410/Kconfig</code>中添加<code>SPPORT_SPL</code>表示支持SPL:</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/2622_5836-5n4PdrfwKQgKOWiH.png" alt="image-20220326225836128" style="zoom:200%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#在smdk6410_defconfig中添加</span><br><span class="line"></span><br><span class="line">CONFIG_SPL_LOGLEVEL=7</span><br><span class="line"></span><br><span class="line">CONFIG_SPL=y</span><br><span class="line">CONFIG_SPL_NAND_BOOT=y</span><br><span class="line">CONFIG_SPL_LDSCRIPT=&quot;board/$(BOARDDIR)/u-boot-spl.lds&quot;</span><br><span class="line">CONFIG_SPL_BOARD_INIT=y</span><br><span class="line"></span><br><span class="line">#因为IROM 8K，编译时检查SPL文件大小</span><br><span class="line">CONFIG_SPL_MAX_SIZE=8192</span><br><span class="line">CONFIG_SPL_TEXT_BASE=0x0C000000</span><br><span class="line">CONFIG_SPL_STACK=0x0C004080</span><br><span class="line"></span><br><span class="line">CONFIG_SYS_SPL_MALLOC_START=0x0C003000</span><br><span class="line">CONFIG_SYS_SPL_MALLOC_SIZE=4096</span><br><span class="line"></span><br><span class="line">CONFIG_SPL_NAND_SUPPORT=y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## SPL debug</span><br><span class="line">#CONFIG_SPL_SERIAL_SUPPORT=y</span><br><span class="line"></span><br><span class="line">## support printf()</span><br><span class="line">CONFIG_SPL_LIBCOMMON_SUPPORT=y</span><br><span class="line">CONFIG_SPL_LIBGENERIC_SUPPORT=y</span><br><span class="line">CONFIG_SPL_PRINTF=y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在include/configs/smdk6410.h中定义</span><br><span class="line">/*</span><br><span class="line">* BL1 16K (every 2K of one page, 4page * 2K=8K; 4pages=4*4K=16K)</span><br><span class="line">*/</span><br><span class="line">#define CONFIG_SPL_NAND_RAW_ONLY</span><br><span class="line">#define CONFIG_SYS_NAND_U_BOOT_OFFS       4  /*pages, 4*4096=16K*/</span><br><span class="line">#define CONFIG_SYS_NAND_U_BOOT_DST        CONFIG_SYS_TEXT_BASE</span><br><span class="line">#define CONFIG_SYS_NAND_U_BOOT_SIZE       (512*1024)</span><br><span class="line"></span><br><span class="line">#define CONFIG_SYS_MONITOR_LEN  (512*1024)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="SPL启动流程"><a href="#SPL启动流程" class="headerlink" title="SPL启动流程"></a>SPL启动流程</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#根据u-boot-spl.lds链接脚本，入口为_start</span><br><span class="line"></span><br><span class="line">_start# vectors.S</span><br><span class="line">reset# arch/cpu/arm1176/start.S</span><br><span class="line">lowlevel_init# board/samsung/smdk6410/lowlevel_init.S</span><br><span class="line">#LED灯，时钟，串口，nand控制器，sdram</span><br><span class="line">_main#arch/arm/lib/crt0.S</span><br><span class="line">#CONFIG_SPL_STACK 堆栈使用SRAM</span><br><span class="line">#分配16字节对齐的栈空间，返回栈指针</span><br><span class="line">board_init_f_alloc_reserve()#common/init/board_init.c</span><br><span class="line"></span><br><span class="line">#初始化GD</span><br><span class="line">board_init_f_init_reserve()#common/init/board_init.c</span><br><span class="line"></span><br><span class="line">#重载board_init_f(),完成板子必要的操作，必须正常返回，不能直接调用board_init_r()</span><br><span class="line">board_init_f()</span><br><span class="line"></span><br><span class="line">#relocate GD结构，如果定义CONFIG_SPL_STACK_R</span><br><span class="line">#对于一些board_init_r()运行需要更多栈空间的情况，可以定义，然后进行relocate，从而使用SDRAM栈空间</span><br><span class="line">spl_relocate_stack_gd()</span><br><span class="line"></span><br><span class="line">#清除BSS</span><br><span class="line"></span><br><span class="line">#调用board_init_r</span><br><span class="line">mov     r0, r9                  /* gd_t */</span><br><span class="line">ldrr1, [r9, #GD_RELOCADDR]/* dest_addr */</span><br><span class="line">ldrpc, =board_init_r</span><br><span class="line"></span><br><span class="line">board_init_r()#common/spl/spl.c</span><br><span class="line">spl_set_bd()#common/spl/spl.c</span><br><span class="line">spl_init()#common/spl/spl.c</span><br><span class="line">spl_common_init()</span><br><span class="line">                    #启动流程记录，主要用于log</span><br><span class="line">bootstage_init()#include/bootstage.h</span><br><span class="line">                        #of_control dts相关初始化(可选，未启用)</span><br><span class="line">                        #dm相关初始化(可选，未启用)</span><br><span class="line">                    </span><br><span class="line">                    #定时器初始化,10ms</span><br><span class="line">                    timer_init()#arch/arm/mach-s3c6410/timer.c</span><br><span class="line">                    #是否初始化板子其他硬件(可选未启用)，通过定义CONFIG_BOARD_INIT启用;需要自己实现</span><br><span class="line">                   spl_board_init()</span><br><span class="line">                   #启动次数计数(未使用)</span><br><span class="line">                    bootcount_inc()</span><br><span class="line">                    </span><br><span class="line">                    #配置启动顺序，这里选择的是:BOOT_DEVICE_NAND</span><br><span class="line">                    board_boot_order()</span><br><span class="line">                    spl_boot_device()#board/samsung/smdk6410.c</span><br><span class="line">                    </span><br><span class="line">                    #从nand启动</span><br><span class="line">                    boot_from_devices()#common/spl/spl.c</span><br><span class="line">                    #spl_ll_find_loader()从`.u_boot_list`段中查找boot入口, </span><br><span class="line">                    spl_ll_find_loader()</span><br><span class="line">                    </span><br><span class="line">                    #拷贝BL2到SDRAM</span><br><span class="line">                    spl_load_image()#common/spl/spl_nand.c</span><br><span class="line">                    nand_init()#board/samsung/smdk6410/smdk6410.c</span><br><span class="line">                    nand_spl_load_image()#board/samsung/smdk6410/smdk6410.c</span><br><span class="line">                    spl_set_header_raw_uboot() #common/spl/spl.c</span><br><span class="line">                    spl_image-&gt;size = CONFIG_SYS_MONITOR_LEN</span><br><span class="line">                    spl_image-&gt;entry_point = CONFIG_SYS_UBOOT_START;</span><br><span class="line">spl_image-&gt;load_addr = CONFIG_SYS_TEXT_BASE;</span><br><span class="line"></span><br><span class="line">                    nand_deselect()#board/samsung/smdk6410.c</span><br><span class="line">                    </span><br><span class="line">                    #跳转前的准备</span><br><span class="line">                    spl_board_prepare_for_boot()</span><br><span class="line">                    </span><br><span class="line">                    #跳转到u-boot(BL2)</span><br><span class="line">                    jump_to_image_no_args()</span><br><span class="line">                    </span><br></pre></td></tr></table></figure><h2 id="gd在哪里定义的"><a href="#gd在哪里定义的" class="headerlink" title="gd在哪里定义的"></a>gd在哪里定义的</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arch/arm/include/asm/global_data.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __clang__ <span class="comment">//如果使用__clang__编译器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">//否则</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_ARM64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_GLOBAL_DATA_PTRregister volatile gd_t *gd asm (<span class="string">&quot;x18&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_GLOBAL_DATA_PTRregister volatile gd_t *gd asm (<span class="string">&quot;r9&quot;</span>)<span class="comment">//32位arm,使用r9来存放gd首地址</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="需要自己实现哪些函数"><a href="#需要自己实现哪些函数" class="headerlink" title="需要自己实现哪些函数"></a>需要自己实现哪些函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* timer_init(): arm/arch/mach-s3c6410/timer.c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">timer_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">S3C64XX_TIMERS *<span class="type">const</span> timers = S3C64XX_GetBase_TIMERS();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* use PWM Timer 4 because it has no output */</span></span><br><span class="line"><span class="comment">/* prescaler for Timer 4 is 16 */</span></span><br><span class="line">timers-&gt;TCFG0 = <span class="number">0x0f00</span>;</span><br><span class="line"><span class="keyword">if</span> (timer_load_val == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * for 10 ms clock period @ PCLK with 4 bit divider = 1/2</span></span><br><span class="line"><span class="comment"> * (default) and prescaler = 16. Should be 10390</span></span><br><span class="line"><span class="comment"> * @33.25MHz and 15625 @ 50 MHz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">timer_load_val = get_PCLK() / (<span class="number">2</span> * <span class="number">16</span> * <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* load value for 10 ms timeout */</span></span><br><span class="line">lastdec = timers-&gt;TCNTB4 = timer_load_val;</span><br><span class="line"><span class="comment">/* auto load, manual update of Timer 4 */</span></span><br><span class="line">timers-&gt;TCON = (timers-&gt;TCON &amp; ~<span class="number">0x00700000</span>) | TCON_4_AUTO | TCON_4_UPDATE;</span><br><span class="line"><span class="comment">/* auto load, start Timer 4 */</span></span><br><span class="line">timers-&gt;TCON = (timers-&gt;TCON &amp; ~<span class="number">0x00700000</span>) | TCON_4_AUTO | COUNT_4_ON;</span><br><span class="line">timestamp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* nand_init(): board/samsung/smdk6410/smdk6410.c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">nand_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//do nothing, cause has init in lowlevel_init.S</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* nand_deselect(): board/samsung/smdk6410/smdk6410.c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">nand_deselect</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">board_init_f</span><span class="params">(ulong dummy)</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>nand_spl_load_image()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//board/samsung/smdk6410/bl1_nand_copy.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;common.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nand.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/arch/hardware.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/arch/nand-regs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/arch/bootnand.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * address format</span></span><br><span class="line"><span class="comment"> * 1 0 7       0|7 6          0|    3   0|7    0</span></span><br><span class="line"><span class="comment"> * --------------------------------------------</span></span><br><span class="line"><span class="comment"> * | block(11bit) | page(7bit) | offset(12bit) |</span></span><br><span class="line"><span class="comment"> * --------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">nandll_read_page</span><span class="params">(uchar *buf, ulong addr, <span class="type">int</span> large_block)</span></span><br><span class="line">&#123;</span><br><span class="line">uchar *pdest_sdram_addr = (uchar *)buf;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> page_size = <span class="number">512</span>;</span><br><span class="line">uchar temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (large_block == <span class="number">1</span>)</span><br><span class="line">page_size = <span class="number">2048</span>;</span><br><span class="line"><span class="keyword">if</span> (large_block == <span class="number">2</span>)</span><br><span class="line">page_size = <span class="number">4096</span>;</span><br><span class="line"><span class="keyword">if</span> (large_block == <span class="number">3</span>)</span><br><span class="line">page_size = <span class="number">8192</span>;</span><br><span class="line"></span><br><span class="line">NAND_ENABLE_CE();</span><br><span class="line"></span><br><span class="line">NFCMD_REG = NAND_CMD_READ0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Write Address */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*页内地址11bit: 0，读一整页所以从0开始*/</span></span><br><span class="line">NFADDR_REG = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (large_block)</span><br><span class="line">NFADDR_REG = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*页地址0-bit6, 块地址0：bit7：*/</span></span><br><span class="line">NFADDR_REG = (addr)&amp;<span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*块地址1-8: */</span></span><br><span class="line">NFADDR_REG = (addr &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*块地址9-10*/</span></span><br><span class="line">NFADDR_REG = (addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (large_block)</span><br><span class="line">NFCMD_REG = NAND_CMD_READSTART;</span><br><span class="line"></span><br><span class="line">NF_TRANSRnB();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* for compatibility(2460). u32 cannot be used. by scsuh */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; page_size; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = NFDATA8_REG;</span><br><span class="line">*pdest_sdram_addr++ = temp;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(i&lt;32 &amp;&amp; addr == 4) &#123;</span></span><br><span class="line"><span class="comment">asm_print_hex(temp);</span></span><br><span class="line"><span class="comment">asm_puts(&quot; &quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">NAND_DISABLE_CE();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define NF8_ReadPage_Adv(a,b,c) (((int(*)(uint32, uint32, uint8*))(*((uint32 *)0x0C004004)))(a,b,c))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Read data from NAND.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">nandll_read_blocks</span><span class="params">(<span class="type">uint32_t</span> offs, <span class="type">unsigned</span> <span class="type">int</span> size, <span class="type">void</span> *buff, <span class="type">int</span> large_block)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">uchar *buf = (uchar *)buff;</span><br><span class="line">uint page_shift = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (large_block == <span class="number">1</span>)</span><br><span class="line">page_shift = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Read pages */</span></span><br><span class="line"><span class="keyword">if</span> (large_block == <span class="number">2</span>)</span><br><span class="line">page_shift = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (large_block == <span class="number">2</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">/* Read pages,仅读取BL2 */</span></span><br><span class="line"><span class="keyword">for</span> (i = (<span class="number">0</span> + offs); i &lt; (offs + (size &gt;&gt; page_shift)); i++, buf += (<span class="number">1</span> &lt;&lt; page_shift))</span><br><span class="line">&#123;</span><br><span class="line">nandll_read_page(buf, i, large_block);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//asm_puts(&quot;nandll_read_blocks Done\n&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = (<span class="number">0</span> + offs); i &lt; (offs + (size &gt;&gt; page_shift)); i++, buf += (<span class="number">1</span> &lt;&lt; page_shift))</span><br><span class="line">&#123;</span><br><span class="line">nandll_read_page(buf, i, large_block);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">nand_spl_load_image</span><span class="params">(<span class="type">uint32_t</span> offs, <span class="type">unsigned</span> <span class="type">int</span> size, <span class="type">void</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> large_block = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">vu_char id;</span><br><span class="line"></span><br><span class="line">NAND_ENABLE_CE();</span><br><span class="line">NFCMD_REG = NAND_CMD_RESET;</span><br><span class="line">NF_TRANSRnB();</span><br><span class="line"></span><br><span class="line">NFCMD_REG = NAND_CMD_READID;</span><br><span class="line">NFADDR_REG = <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line">NF_TRANSRnB();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* wait for a while */</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> factory = NFDATA8_REG;</span><br><span class="line">id = NFDATA8_REG;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cellinfo = NFDATA8_REG;</span><br><span class="line"><span class="type">int</span> tmp = NFDATA8_REG;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int childType=tmp &amp; 0x03; //Page size</span></span><br><span class="line"><span class="type">int</span> childType = cellinfo; <span class="comment">//Page size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id &gt; <span class="number">0x80</span>)</span><br><span class="line">&#123;</span><br><span class="line">large_block = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">0xd5</span> &amp;&amp; childType == <span class="number">0x94</span>) <span class="comment">//K9GAG08U0D</span></span><br><span class="line">&#123;</span><br><span class="line">large_block = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">0xd5</span> &amp;&amp; childType == <span class="number">0x14</span>) <span class="comment">//K9GAG08U0M</span></span><br><span class="line">&#123;</span><br><span class="line">large_block = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">0xd5</span> &amp;&amp; childType == <span class="number">0x84</span>) <span class="comment">//K9GAG08U0E</span></span><br><span class="line">&#123;</span><br><span class="line">large_block = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="number">0xd7</span>) <span class="comment">//K9LBG08U0D</span></span><br><span class="line">&#123;</span><br><span class="line">large_block = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (factory == <span class="number">0x2c</span> &amp;&amp; id == <span class="number">0x48</span>) <span class="comment">//MT29F16G08ABACAWP</span></span><br><span class="line">&#123;</span><br><span class="line">large_block = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (factory == <span class="number">0x2c</span> &amp;&amp; id == <span class="number">0x38</span>) <span class="comment">//MT29F8G08ABABAWP</span></span><br><span class="line">&#123;</span><br><span class="line">large_block = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//asm_puts(&quot;large_block=2\n&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nandll_read_blocks(offs, size, buf, large_block);</span><br><span class="line"></span><br><span class="line">NAND_DISABLE_CE();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有关于nand flash的地址问题，这里使用的是<strong>MT29F8G08ABABAWP</strong>，datasheet关于地址的描述如下：</p><p><strong>LUN or Die结构图：</strong></p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/2700_3653-ZXNBtkVYb5WmwKLG.png" alt="LUN or Die结构图" style="zoom:200%;" /><p><strong>列地址(column addr)</strong> –页内地址CA0-CA11 12bit</p><p><strong>行地址(row addr)</strong>– 页地址PA0-PA6 7bit, 块地址BA7-BA17 11bit</p><p><strong>时序图：</strong></p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/2700_3445-iwcPDKGRYf9r3TbP.png" alt="Page Read时序图" style="zoom:200%;" /><h2 id="如何跳转到BL2的"><a href="#如何跳转到BL2的" class="headerlink" title="如何跳转到BL2的"></a>如何跳转到BL2的</h2><p>通过<code>jump_to_image_no_args()</code>函数，通过函数指针，转换城汇编就是通过<code>ldr pc, =entry_point</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">__weak <span class="type">void</span> __noreturn <span class="title function_">jump_to_image_no_args</span><span class="params">(<span class="keyword">struct</span> spl_image_info *spl_image)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> __noreturn (*<span class="type">image_entry_noargs_t</span>)(<span class="type">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">image_entry_noargs_t</span> image_entry =</span><br><span class="line">(<span class="type">image_entry_noargs_t</span>)spl_image-&gt;entry_point;</span><br><span class="line"></span><br><span class="line">debug(<span class="string">&quot;image entry point: 0x%lX\n&quot;</span>, spl_image-&gt;entry_point);</span><br><span class="line"><span class="comment">//asm_puts(&quot;will jump to u-boot...\n&quot;);</span></span><br><span class="line">image_entry();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SPL-amp-u-boot合并成一个文件"><a href="#SPL-amp-u-boot合并成一个文件" class="headerlink" title="SPL &amp; u-boot合并成一个文件"></a>SPL &amp; u-boot合并成一个文件</h1><p>因为u-boot烧写到nand flash中，是通过飞凌提供的uboot1.1.6源码编译的sd卡启动版本u-boot；</p><p>所以按照sd卡中的u-boot烧写流程，需要将<code>SPL(BL1)</code>和<code>u-boot(BL2)</code>合并成一个文件。</p><p><strong>根据三星固化的BL0程序，上电时只读取每个page的前2K，一共读取4page合并成8K，所以BL2的偏移地址为8192 。</strong></p><p>合并shell脚本run_combine.sh, 位于u-boot源码的根目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SPL=./build/spl/u-boot-spl.bin</span><br><span class="line">UBOOT=./build/u-boot.bin</span><br><span class="line">TMP_FILL=./build/tmp_ff.bin</span><br><span class="line">COMBINE=./u-boot.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">caculate spl file size</span></span><br><span class="line">SPL_SIZE=`ls -l $SPL | awk &#x27;&#123;print $5&#125;&#x27; | tr -d &#x27;\n&#x27;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BL1_SIZE=8192 #20K</span><br><span class="line">BL1_FILL_SIZE=`expr $BL1_SIZE - $SPL_SIZE`</span><br><span class="line"></span><br><span class="line">echo &quot;----spl size=$SPL_SIZE byte, need fill $BL1_FILL_SIZE byte.&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;----create $TMP_FILL....&quot;</span><br><span class="line">rm -rf $TMP_FILL</span><br><span class="line">tr &#x27;\000&#x27; &#x27;\377&#x27; &lt; /dev/zero | dd of=$TMP_FILL bs=1 count=$BL1_FILL_SIZE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;----combine spl &amp; u-boot....&quot;</span><br><span class="line">rm -rf $COMBINE</span><br><span class="line">cat $SPL $TMP_FILL $UBOOT &gt; $COMBINE</span><br><span class="line"></span><br><span class="line">echo &quot;----Done.&quot;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/Sloane0/article/details/73065027">关于Nand Flash行地址和列地址的计算</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;为什么要使能SPL功能呢？&lt;/p&gt;
&lt;p&gt;因为根据&lt;code&gt;S3C6410_Internal_ROM_Booting.pdf&lt;/code&gt;文档中的启动流程描述，从Nand启动时，系统上电三星固化好的BL0会自动加载Nand中前8K到iROM；&lt;br&gt;因为u-boot的大小大于8K，BL0无法将所有的u-boot加载到iROM，u-boot为了解决此类设备的问题，引入了SPL。&lt;br&gt;由SPL (BL1)负责将u-boot (BL2)拷贝到SDRAM，DDR等，然后跳转到BL2中执行。&lt;/p&gt;</summary>
    
    
    
    <category term="U-Boot" scheme="https://blog.littlekang.xyz/categories/U-Boot/"/>
    
    
    <category term="u-boot" scheme="https://blog.littlekang.xyz/tags/u-boot/"/>
    
    <category term="ok6410" scheme="https://blog.littlekang.xyz/tags/ok6410/"/>
    
  </entry>
  
  <entry>
    <title>OK6410 u-boot_1.1.6分析</title>
    <link href="https://blog.littlekang.xyz/article/32844/"/>
    <id>https://blog.littlekang.xyz/article/32844/</id>
    <published>2022-03-21T16:34:33.000Z</published>
    <updated>2022-03-21T16:50:31.175Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间因为疫情在家，失业了也没有什么其他的事情，想着好好学习一下u-boot相关内容。</p><p>正好手头上有之前买了然后吃灰的OK6410，根据网上的相关资料着手移植到u-boot 2018版本，折腾了快半个月的时间还是没有成功，每次<code>bl _main</code>后就会挂掉，不知道具体原因很是困惑，也找了一些调试方法，比如通过Jlink直接调试，通过Jlink-gdb-server，最后没怎么搞明白如何调试，但是发现运行后进入了<code>data_abort</code>异常位置。分析应该是relocate出现问题，也找了很久无果，然后想着好好分析一些飞凌提供的旧版本的u-boot。</p><span id="more"></span><h1 id="开发板硬件资源"><a href="#开发板硬件资源" class="headerlink" title="开发板硬件资源"></a>开发板硬件资源</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">飞凌OK6410开发板</span><br><span class="line">    DDR:    256MB 型号：K4X1G163PC (64Mx16bit=128MB) * 2</span><br><span class="line">    NAND:    1GB    型号：MT29F16G08ABACAWP, SLC, PageSize=4K</span><br><span class="line">    SD:        SD/MMC Host Controller 使用channel 0</span><br><span class="line"> </span><br><span class="line">    LCD:     WXCAT43-TG3#001, 4.3寸 屏</span><br><span class="line">    Ethernet: DM9000A</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="如何编译"><a href="#如何编译" class="headerlink" title="如何编译"></a>如何编译</h1><p>根据根目录下的Makefile文件</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1918_1929-gLh9WEIIE1HN5smc.png" alt="image-20220319181929608" style="zoom:200%;" /><p>编译方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用的工具链是飞凌提供的，gcc version 4.3.2</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定交叉工具链</span></span><br><span class="line">export CROSS_COMPILE=arm-linux-</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置u-boot</span></span><br><span class="line">    #从sd卡启动</span><br><span class="line">    make forlinx_sd_ram256_config</span><br><span class="line"> </span><br><span class="line">    #从nand启动</span><br><span class="line">    make forlinx_nand_ram256_config</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译</span></span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure><p><code>mkconfig</code> shell脚本主要的配置：</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1918_2906-cYQtGlxCqxMKTmct.png" alt="image-20220319182906640" style="zoom:200%;" /> <h1 id="从SD卡启动"><a href="#从SD卡启动" class="headerlink" title="从SD卡启动"></a>从SD卡启动</h1><h2 id="u-boot怎么放入SD卡"><a href="#u-boot怎么放入SD卡" class="headerlink" title="u-boot怎么放入SD卡"></a>u-boot怎么放入SD卡</h2><p>根据<code>S3C6410_Internal_ROM_Booting.pdf</code>的启动流程说明：</p><p>s3c6410启动时，iROM中的<strong>BL0</strong>会加载sd卡中的u-boot前8K到iRAM</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1917_5546-FYMiuXTxrq73GAgh.png" alt="image-20220319175545735" style="zoom:200%;" /> <h2 id="怎么将u-boot分成两部分-BL1-BL2"><a href="#怎么将u-boot分成两部分-BL1-BL2" class="headerlink" title="怎么将u-boot分成两部分(BL1,BL2)"></a>怎么将u-boot分成两部分(BL1,BL2)</h2><p>sd卡的分区方式(u-boot，kernel，rootfs等如何存放)：<br>本人使用的时SHDC sd卡，所以分区格式为</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1918_0259-VkgsbFnLVTlgnd35.png" alt="image-20220319180259352" style="zoom:200%;" /> <p><strong>有点疑惑的是这个<code>Signature</code>分区，作用是什么??</strong></p><p>所以想看看sd卡的u-boot如何烧写Nand Flash中的 u-boot</p><p>如何烧写：</p><ul><li><p>方法1：使用飞凌提供的<code>SD_Write.exe</code>工具，工具将会按照sd卡的类型写入数据<br>注意u-boot源码中相关参数的定义，比如u-boot的大小，ENV的大小需要和SD_Write.exe定义的一致，因为BL1在拷贝BL2的时候需要知道BL2的存放地址，<br>根据源码中<code>movi.c</code> 和要求的分区格式计算：参考[BL1如何搬迁BL2到SDRAM](# BL1如何搬迁BL2到SDRAM)<br><strong>因不知道飞凌提供工具对应的参数，所以不建议使用此方法</strong>。</p></li><li><p>方法2：Linux下使用<code>dd</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一部分:</span></span><br><span class="line">dd if=u-boot.bin of=./bl1.bin bs=512 count=16</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第二部分:</span></span><br><span class="line">cp u-boot.bin ./bl2.bin</span><br></pre></td></tr></table></figure><p>烧写shell脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">SDCARD=/dev/sdb</span><br><span class="line">SPL_BOOT=bl1.bin</span><br><span class="line">UBOOT=u-boot.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">保留大小, SDHC=1025, SD=1</span></span><br><span class="line">RES_SZ=1025</span><br><span class="line"></span><br><span class="line">SECTOR_SIZE=512        #Block大小</span><br><span class="line">SIG_SZ=1            #signature block-size, 512byte</span><br><span class="line">BL1_SZ=16            #BL1 block-size, 8K</span><br><span class="line">BL2_SZ=512             #BL2 block-size, 256K</span><br><span class="line">ENV_SZ=32           #ENV block-size, 16K</span><br><span class="line"></span><br><span class="line">BL1_SIZE=`expr $BL1_SZ \* $SECTOR_SIZE / 1024`</span><br><span class="line">BL2_SIZE=`expr $BL2_SZ \* $SECTOR_SIZE / 1024`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sd卡容量</span></span><br><span class="line">SDCARD_SECTORS=`cat /sys/block/$&#123;SDCARD##*/&#125;/size`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">BL1 BL2写入位置</span></span><br><span class="line">START_BL1_POS=$(($SDCARD_SECTORS-$RES_SZ-$SIG_SZ-$BL1_SZ))</span><br><span class="line">START_BL2_POS=$(($START_BL1_POS-$ENV_SZ-$BL2_SZ))</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印结果</span></span><br><span class="line">print_result()</span><br><span class="line">&#123;</span><br><span class="line">    if [ &quot;$1&quot; == 0 ]; then</span><br><span class="line">        echo &quot;success&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;failed&quot;</span><br><span class="line">        exit -1</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要root权限，如果没有提示信息</span></span><br><span class="line">if [ `whoami` != &quot;root&quot; ];then</span><br><span class="line">    echo &quot;Need root permision to execute the script!&quot;</span><br><span class="line">    exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">BL1创建</span></span><br><span class="line">echo &quot;Create bl1.bin....&quot;</span><br><span class="line">rm -rf bl1.bin</span><br><span class="line">dd if=u-boot.bin of=bl1.bin bs=512 count=16</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断sd卡是否存在</span></span><br><span class="line">echo &quot;sd/mmc: $SDCARD&quot;</span><br><span class="line">if [ ! -b &quot;$SDCARD&quot; ]; then</span><br><span class="line">cat &lt;&lt; EOF</span><br><span class="line">no device found</span><br><span class="line">Usage: $0 &lt;sd-dev&gt; [sd-type]</span><br><span class="line">     defalutly, &lt;sd-dev&gt; is /dev/sdb, sd-type is &quot;sdhc&quot; in (&quot;sdhc&quot;,&quot;sd&quot;)</span><br><span class="line">EOF</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入数据</span></span><br><span class="line">echo -n &quot;write bl1 to sd/mmc at offset: $START_BL1_POS block-size: $BL1_SZ size: $BL1_SIZE K...  &quot;</span><br><span class="line">dd bs=$SECTOR_SIZE seek=$START_BL1_POS if=/dev/zero of=$SDCARD count=$BL1_SZ  &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">dd bs=$SECTOR_SIZE seek=$START_BL1_POS if=$SPL_BOOT of=$SDCARD count=$BL1_SZ  &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">print_result &quot;$?&quot;</span><br><span class="line"></span><br><span class="line">echo -n &quot;write bl2 to sd/mmc at offset: $START_BL2_POS block-size: $BL2_SZ size: $BL2_SIZE K...  &quot;</span><br><span class="line">dd bs=$SECTOR_SIZE seek=$START_BL2_POS if=/dev/zero of=$SDCARD count=$BL2_SZ &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">dd bs=$SECTOR_SIZE seek=$START_BL2_POS if=$UBOOT of=$SDCARD count=$BL2_SZ  &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">print_result &quot;$?&quot;</span><br><span class="line"></span><br><span class="line">sync</span><br><span class="line">exit  0</span><br></pre></td></tr></table></figure><p>参考:</p><blockquote><p>代码烧写部分：<a href="https://blog.csdn.net/Golden_Chen/article/details/86644879">https://blog.csdn.net/Golden_Chen/article/details/86644879</a></p></blockquote></li></ul><h2 id="BL1流程"><a href="#BL1流程" class="headerlink" title="BL1流程"></a>BL1流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">reset                        #cpu/s3c64xx/start.S</span><br><span class="line">    cpu_init_crit</span><br><span class="line">    bl lowlevel_init        #board/samsung/smdk6410/lowlevel_init.S</span><br><span class="line"></span><br><span class="line">    #判断运行的代码是否已经relocate;  start.S</span><br><span class="line">    #BL1运行在iRAM,所以没有relocate,执行movi_bl2_copy</span><br><span class="line"></span><br><span class="line">    #搬迁BL2到SDRAM</span><br><span class="line">    bl movi_bl2_copy        #cpu/s3c64xx/movi.c</span><br><span class="line"></span><br><span class="line">    b after_copy            #cpu/s3c64xx/start.S</span><br><span class="line"></span><br><span class="line">    skip_hw_init</span><br><span class="line">    stack_setup  </span><br><span class="line">    clear_bss</span><br><span class="line"></span><br><span class="line">    #跳转到BL2</span><br><span class="line">    ldr    pc, _start_armboot    #cpu/s3c64xx/start.S</span><br></pre></td></tr></table></figure><h2 id="BL1如何搬迁BL2到SDRAM"><a href="#BL1如何搬迁BL2到SDRAM" class="headerlink" title="BL1如何搬迁BL2到SDRAM"></a>BL1如何搬迁BL2到SDRAM</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#SD卡中的代码 如何搬运 确定了 第二部分在哪里</span><br><span class="line"> </span><br><span class="line">#如何搬运的代码</span><br><span class="line"> </span><br><span class="line">#ifdef CONFIG_BOOT_MOVINAND  // u-boot-1.1.6/cpu/s3c64xx/start.S</span><br><span class="line">    ldr sp, _TEXT_PHY_BASE                                                        </span><br><span class="line">    bl  movi_bl2_copy                                                             </span><br><span class="line">    b   after_copy                                                                </span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">#搬运代码核心</span><br><span class="line">CopyMovitoMem(HSMMC_CHANNEL, MOVI_BL2_POS, MOVI_BL2_BLKCNT, (uint *)BL2_BASE, MOVI_INIT_REQUIRED);</span><br><span class="line">#define CopyMovitoMem(a,b,c,d,e)    (((int(*)(int, uint, ushort, uint *, int))(*((uint *)(TCM_BASE + 0x8))))(a,b,c,d,e)) // 这个代码是 定义在 iTCM 中的</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    HSMMC_CHANNEL       </span><br><span class="line">        0</span><br><span class="line">        用的哪一个channel : 0</span><br><span class="line">    MOVI_BL2_POS       </span><br><span class="line">        #define MOVI_BL2_POS        (MOVI_LAST_BLKPOS - MOVI_BL1_BLKCNT - MOVI_BL2_BLKCNT - MOVI_ENV_BLKCNT)</span><br><span class="line">        从哪个位置搬移 : 全部的块大小(由iROM中的代码算出来,位于signature处) - BL大小(16个sector,由手册决定) - BL2大小(512个,由u-boot决定,所以第二部分最大为256KB) - 环境所占大小(32个,由u-boot决定)</span><br><span class="line">    MOVI_BL2_BLKCNT</span><br><span class="line">        #define MOVI_BL2_BLKCNT     (PART_SIZE_BL / MOVI_BLKSIZE)</span><br><span class="line">        搬移多少个块 : 512个块,256KB</span><br><span class="line">    BL2_BASE           </span><br><span class="line">        #define BL2_BASE        (CFG_PHY_UBOOT_BASE)</span><br><span class="line">        搬到哪里: 0x5FE00000,位于sdram</span><br><span class="line">    MOVI_INIT_REQUIRED   </span><br><span class="line">        0</span><br><span class="line">        是否重新初始化:否</span><br></pre></td></tr></table></figure><p>By:  <a href="https://blog.csdn.net/u011011827">_<em>pop</em></a>， <a href="https://blog.csdn.net/u011011827/article/details/114266423">OK6410A 开发板 (三) u-boot-1.1.6 boot 解析</a></p><p>BL0中厂商固化的拷贝函数(<code>S3C6410_Internal_ROM_Booting.pdf</code>)：</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1918_5609-Zwg0k0TTma2Lzk5I.png" alt="image-20220319185609073" style="zoom:200%;" /> <h2 id="BL2流程"><a href="#BL2流程" class="headerlink" title="BL2流程"></a>BL2流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#BL2 是 从_start_armboot开始的: ldr    pc, _start_armboot         #cpu/s3c64xx/start.S</span><br><span class="line"> </span><br><span class="line">_start_armboot:</span><br><span class="line">    .word start_armboot        #cpu/s3c64xx/start.S</span><br><span class="line"> </span><br><span class="line">start_armboot()                #lib_arm/board.c</span><br><span class="line">    #gd_t 结构初始化</span><br><span class="line"> </span><br><span class="line">    #初始化: 函数首地址存放在 init_sequence[] 指针数组</span><br><span class="line">        cpu_init()            #cpu/s3c64xx/cpu.c</span><br><span class="line">        board_init()        #board/samsung/smdk6410.c</span><br><span class="line">        interrupt_init()    #cpu/s3c64xx/interrupts.c</span><br><span class="line"> </span><br><span class="line">        env_init()            #common/env_movi.c  (函数所在文件和启动方式相关)</span><br><span class="line"> </span><br><span class="line">        init_baudrate()        #lib_arm/board.c</span><br><span class="line">        serial_init()        #cpu/s3c64xx/serial.c</span><br><span class="line">        console_init_f()    #common/console.c</span><br><span class="line">        display_banner()    #lib_arm/board.c</span><br><span class="line">        print_cpuinfo()        #cpu/s3c64xx/speed.c</span><br><span class="line">        checkboard()        #board/samsung/smdk6410.c</span><br><span class="line">        dram_init()            #board/samsung/smdk6410.c</span><br><span class="line">        display_dram_config()#lib_arm/board.c</span><br><span class="line"> </span><br><span class="line">    flash_init()            #board/samsung/flash.c</span><br><span class="line">    lcd_setmem()            #common/lcd.c</span><br><span class="line">    mem_malloc_init()        #lib_arm/board.c</span><br><span class="line">    nand_init()                #board/samsung/smdk6410.c</span><br><span class="line"> </span><br><span class="line">    #sd/mmc控制器初始化  (和启动方式相关)</span><br><span class="line">    movi_set_capacity()</span><br><span class="line">    movi_set_ofs()</span><br><span class="line">    movi_init()                #cpu/s3c64xx/movi.c</span><br><span class="line"> </span><br><span class="line">    env_relocate()            #common/env_common.c</span><br><span class="line"> </span><br><span class="line">    #设备相关驱动初始化</span><br><span class="line">    devices_init()            #common/devices.c</span><br><span class="line"> </span><br><span class="line">    jumptable_init()        #common/exports.c</span><br><span class="line">    console_init_r()        #common/console.c</span><br><span class="line">    enable_interrupts()        #cpu/s3c64xx/interrupts.c  </span><br><span class="line">    board_late_init()        #board/samsung/smdk6410.c</span><br><span class="line">    eth_initialize()        #net/eth.c</span><br><span class="line"> </span><br><span class="line">    #main循环</span><br><span class="line">    main_loop()                #common/main.c</span><br><span class="line">        #还没有超时或被中断</span><br><span class="line">        if (bootdelay &gt;= 0 &amp;&amp; s &amp;&amp; !abortboot (bootdelay)) &#123;</span><br><span class="line">            #解析bootcmd命令</span><br><span class="line">            parse_string_outer()    #common/hush.c</span><br><span class="line">                run_list                 #common/hush.c</span><br><span class="line">                    run_list_real         #common/hush.c</span><br><span class="line">                        run_pipe_real     #common/hush.c</span><br><span class="line">                            #查找&amp;执行命令</span><br><span class="line">                            cmdtp = find_cmd(child-&gt;argv[i]); #common/command.c</span><br><span class="line">                                #cmd_tbl_t *cmdtp_temp = &amp;__u_boot_cmd_start;</span><br><span class="line">                                #命令列表首地址为__u_boot_cmd_start ，链接器脚本board/samsung/smdk6410/u-boot.lds中定义</span><br><span class="line">                                __u_boot_cmd_start = .;</span><br><span class="line">                                .u_boot_cmd : &#123; *(.u_boot_cmd) &#125;</span><br><span class="line">                                __u_boot_cmd_end = .;</span><br><span class="line"> </span><br><span class="line">                            if (cmdtp == NULL) &#123;</span><br><span class="line">                                #没有找到命令</span><br><span class="line">                            &#125;</span><br><span class="line">                            else &#123;</span><br><span class="line">                                #执行命令</span><br><span class="line">                                rcode = (cmdtp-&gt;cmd)(cmdtp, flag,child-&gt;argc-i,&amp;child-&gt;argv[i]);</span><br><span class="line">                            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        #被中断</span><br><span class="line">        ARMMenu()            #common/main.c</span><br><span class="line">            #相关菜单选择……</span><br></pre></td></tr></table></figure><p>**<code>.u_boot_cmd</code>**定义的位置为：<code>include/command.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//告诉编译器将xxx放在 .u_boot_cmd段</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Struct_Section  __attribute__ ((unused,section (<span class="string">&quot;.u_boot_cmd&quot;</span>)))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//用于定义命令tab的宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> U_BOOT_CMD(name,maxargs,rep,cmd,usage,help) \</span></span><br><span class="line"><span class="meta">    cmd_tbl_t __u_boot_cmd_##name Struct_Section = &#123;#name, maxargs, rep, cmd, usage, help&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">各个命令通过U_BOOT_CMD宏来定义，链接器将各个不同功能cmd_tab,</span></span><br><span class="line"><span class="comment">从__u_boot_cmd_start起始地址按顺序的存放；</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">通过find_cmd()函数查找命令：</span></span><br><span class="line"><span class="comment">cmd_tbl_t *cmdtp_temp = &amp;__u_boot_cmd_start;</span></span><br><span class="line"><span class="comment">for (cmdtp = &amp;__u_boot_cmd_start; cmdtp != &amp;__u_boot_cmd_end; cmdtp++) &#123;</span></span><br><span class="line"><span class="comment">    if (strncmp (cmd, cmdtp-&gt;name, len) == 0) &#123;</span></span><br><span class="line"><span class="comment">        if (len == strlen (cmdtp-&gt;name))</span></span><br><span class="line"><span class="comment">            return cmdtp;    //完全匹配</span></span><br><span class="line"><span class="comment">        cmdtp_temp = cmdtp;    //简短的命令?</span></span><br><span class="line"><span class="comment">        n_found++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//U_BOOT_CMD定义命令的格式，如nand相关命令， common/cmd_nand.c</span></span><br><span class="line"> </span><br><span class="line">U_BOOT_CMD(nand, <span class="number">5</span>, <span class="number">1</span>, do_nand,</span><br><span class="line">           <span class="string">&quot;nand    - NAND sub-system\n&quot;</span>,</span><br><span class="line">           <span class="string">&quot;info             - show available NAND devices\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand device [dev]     - show or set current device\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand read[.jffs2]     - addr off|partition size\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand write[.jffs2]    - addr off|partiton size - read/write `size&#x27; bytes starting\n&quot;</span></span><br><span class="line">           <span class="string">&quot;    at offset `off&#x27; to/from memory address `addr&#x27;\n&quot;</span></span><br><span class="line">           <span class="meta">#<span class="keyword">ifdef</span> CFG_NAND_YAFFS_WRITE</span></span><br><span class="line">           <span class="string">&quot;nand write[.yaffs[1]] - addr off|partition size - write `size&#x27; byte yaffs image\n&quot;</span></span><br><span class="line">           <span class="string">&quot;    starting at offset `off&#x27; from memory address `addr&#x27; (.yaffs1 for 512+16 NAND)\n&quot;</span></span><br><span class="line">           <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">           <span class="string">&quot;nand write[.uboot] - addr off|partition size\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand write[.ok] - sound beep ok\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand erase [clean] [off size] - erase `size&#x27; bytes from\n&quot;</span></span><br><span class="line">           <span class="string">&quot;    offset `off&#x27; (entire device if not specified)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand bad - show bad blocks\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand dump[.oob] off - dump page\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand scrub - really clean NAND erasing bad blocks (UNSAFE)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand markbad off - mark bad block at offset (UNSAFE)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand biterr off - make a bit error at offset (UNSAFE)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand lock [tight] [status] - bring nand to lock state or display locked pages\n&quot;</span></span><br><span class="line">           <span class="string">&quot;nand unlock [offset] [size] - unlock section\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>对于飞凌提供的从sd卡启动的固件，上电默认自动烧写所有固件，那么<code>bootcmd</code>是什么呢？</p><p>从<code>common/env_movi.c</code>中定义的<code>env_init()</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">env_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//没有定义 ENV_IS_EMBEDDED</span></span><br><span class="line">    gd-&gt;env_addr  = (ulong)&amp;default_environment[<span class="number">0</span>];</span><br><span class="line">    gd-&gt;env_valid = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//common/env_common.c</span></span><br><span class="line">uchar default_environment[] = &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>    CONFIG_BOOTARGS</span></span><br><span class="line">    <span class="string">&quot;bootargs=&quot;</span>    CONFIG_BOOTARGS            <span class="string">&quot;\0&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>    CONFIG_BOOTCOMMAND</span></span><br><span class="line">    <span class="string">&quot;bootcmd=&quot;</span>    CONFIG_BOOTCOMMAND        <span class="string">&quot;\0&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//include/configs/smdk6410.h</span></span><br><span class="line"><span class="comment">//从sd卡启动</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_BOOTCOMMAND  <span class="string">&quot;nand led-start;nand erase;fatload mmc 0:1 0x50008000 u-boot.bin;nand write.uboot 0x50008000 0 0x200000;fatload mmc 0:1 0x50008000 zImage;nand write.e 0x50008000 0x500000 0x500000; fatload mmc 0:1 0x50008000 rootfs.yaffs2; nand write.yaffs2 0x50008000 0x01e00000 $filesize;  nand beep; nand led-end&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//nand led-start;    开始提示：led</span></span><br><span class="line"><span class="comment">//nand erase;    擦除nand flash</span></span><br><span class="line"><span class="comment">//fatload mmc 0:1 0x50008000 u-boot.bin;nand write.uboot 0x50008000 0 0x200000;  烧写u-boot</span></span><br><span class="line"><span class="comment">//fatload mmc 0:1 0x50008000 zImage;nand write.e  0x50008000 0x500000 0x500000;     烧写kernel</span></span><br><span class="line"><span class="comment">//fatload mmc 0:1 0x50008000 rootfs.yaffs2; nand write.yaffs2 0x50008000 0x01e00000 $filesize;  烧写rootfs</span></span><br><span class="line"><span class="comment">//nand beep; nand led-end 结束提示led, beep  </span></span><br></pre></td></tr></table></figure><p>启动信息：</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1923_2123-o8mzeEfLJMDa40mR.png" alt="image-20220319232123289" style="zoom:200%;" /> <h2 id="BL2如何将sd卡中u-boot烧写到nand"><a href="#BL2如何将sd卡中u-boot烧写到nand" class="headerlink" title="BL2如何将sd卡中u-boot烧写到nand"></a>BL2如何将sd卡中u-boot烧写到nand</h2><p>从<code>bootcmd</code>启动命令，知道执行的是<code>nand write.uboot 0x50008000 0 0x200000</code>命令。</p><p>从前面<code>.u_boot_cmd</code>的分析，知道<code>nand write.uboot</code>是在common&#x2F;cmd_nand.c中定义， 命令函数是<code>do_nand()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//--------------do_nand()分析</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_info</span> <span class="title">nand_info_t</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="type">nand_info_t</span> *nand;</span><br><span class="line">nand = &amp;nand_info[nand_curr_device]; <span class="comment">//nand_curr_device=0</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strncmp</span>(cmd, <span class="string">&quot;read&quot;</span>, <span class="number">4</span>) == <span class="number">0</span> || <span class="built_in">strncmp</span>(cmd, <span class="string">&quot;write&quot;</span>, <span class="number">5</span>) == <span class="number">0</span>)</span><br><span class="line">    <span class="comment">/* write */</span></span><br><span class="line">    nand_write_opts(nand, &amp;opts);    <span class="comment">//drivers/nand/nand_util.c  </span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//板子的nand, page-size=4K, 最小write单位为page</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!read &amp;&amp; s != <span class="literal">NULL</span> &amp;&amp; (!<span class="built_in">strcmp</span>(s, <span class="string">&quot;.uboot&quot;</span>)) &amp;&amp; nand-&gt;writesize == <span class="number">4096</span>) &#123;</span><br><span class="line">        <span class="comment">//困惑：这里addr每次的偏移为啥是2K??</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        通过后面看从nand启动时nand_cp.c中的困惑，从网上找到了答案：</span></span><br><span class="line"><span class="comment">        BL0是将nandflash的块0的前4页中，每页头2K组合成8K，拷贝到steppingstone中的。</span></span><br><span class="line"><span class="comment">        所以每个page只写SDRAM中的2K内容，下面代码相当于后2K和下一个page前2K是重复的。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">            size=<span class="number">4096</span>;</span><br><span class="line">            nand_write(nand, off, &amp;size, (u_char *)addr);  <span class="comment">//page0-2K</span></span><br><span class="line">        </span><br><span class="line">            off+=<span class="number">4096</span>;</span><br><span class="line">            addr+=<span class="number">2048</span>;</span><br><span class="line">            nand_write(nand, off, &amp;size, (u_char *)addr);  <span class="comment">//page1-2k       </span></span><br><span class="line"> </span><br><span class="line">            off+=<span class="number">4096</span>;</span><br><span class="line">            addr+=<span class="number">2048</span>;</span><br><span class="line">            nand_write(nand, off, &amp;size, (u_char *)addr);  <span class="comment">//page2-2k      </span></span><br><span class="line"> </span><br><span class="line">            off+=<span class="number">4096</span>;</span><br><span class="line">            addr+=<span class="number">2048</span>;</span><br><span class="line">            nand_write(nand, off, &amp;size, (u_char *)addr);  <span class="comment">//page3-2k, BL1=8K, write done.       </span></span><br><span class="line"> </span><br><span class="line">            off+=<span class="number">4096</span>;</span><br><span class="line">            addr+=<span class="number">2048</span>;</span><br><span class="line">            size=<span class="number">1024</span>*<span class="number">1024</span><span class="number">-4</span>*<span class="number">4096</span>;<span class="comment">//虽然传入参数u-boot的大小是2M,没有使用参数，这里写死了是1M, 1M-已写入的16K</span></span><br><span class="line">            ret = nand_write(nand, off, &amp;size, (u_char *)addr); <span class="comment">//写BL2+空白未使用</span></span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//--------------------nand_write函数</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">nand_write</span><span class="params">(<span class="type">nand_info_t</span> *info, ulong ofs, ulong *len, u_char *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这里调用的是 mtd-&gt;write接口，它和nand如何关联的？？</span></span><br><span class="line">    <span class="keyword">return</span> info-&gt;write(info, ofs, *len, (<span class="type">size_t</span> *)len, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//info-&gt;write 实际调用得是drivers/nand/nand_base.c中的nand_write</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nand_write - [MTD Interface] NAND write with ECC</span></span><br><span class="line"><span class="comment"> * @mtd:MTD device structure</span></span><br><span class="line"><span class="comment"> * @to:offset to write to</span></span><br><span class="line"><span class="comment"> * @len:number of bytes to write</span></span><br><span class="line"><span class="comment"> * @retlen:pointer to variable to store the number of written bytes</span></span><br><span class="line"><span class="comment"> * @buf:the data to write</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * NAND write with ECC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">nand_write</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="type">loff_t</span> to, <span class="type">size_t</span> len,</span></span><br><span class="line"><span class="params">                      <span class="type">size_t</span> *retlen, <span class="type">const</span> <span class="type">uint8_t</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nand_chip</span> *<span class="title">chip</span> =</span> mtd-&gt;priv;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Do not allow reads past end of device */</span></span><br><span class="line">    <span class="keyword">if</span> ((to + len) &gt; mtd-&gt;size)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    <span class="keyword">if</span> (!len)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    nand_get_device(chip, mtd, FL_WRITING);</span><br><span class="line"></span><br><span class="line">    chip-&gt;ops.len = len;</span><br><span class="line">    chip-&gt;ops.datbuf = (<span class="type">uint8_t</span> *)buf;</span><br><span class="line">    chip-&gt;ops.oobbuf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    ret = nand_do_write_ops(mtd, to, &amp;chip-&gt;ops);</span><br><span class="line"></span><br><span class="line">    *retlen = chip-&gt;ops.retlen;</span><br><span class="line"></span><br><span class="line">    nand_release_device(mtd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------nand_info_t *nand 如何获得得</span></span><br><span class="line"><span class="type">int</span> nand_curr_device = <span class="number">-1</span>;</span><br><span class="line"><span class="type">nand_info_t</span> nand_info[CFG_MAX_NAND_DEVICE];    <span class="comment">//CFG_MAX_NAND_DEVICE=1</span></span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">nand_chip</span> <span class="title">nand_chip</span>[<span class="title">CFG_MAX_NAND_DEVICE</span>];</span></span><br><span class="line"><span class="type">static</span> ulong base_address[CFG_MAX_NAND_DEVICE] = CFG_NAND_BASE_LIST;    <span class="comment">//CFG_NAND_BASE_LIST=0x70200010 nand控制器首地址</span></span><br><span class="line"> </span><br><span class="line">nand_init()                        <span class="comment">//driver/nand/nand.c</span></span><br><span class="line">    nand_init_chip()          </span><br><span class="line">        board_nand_init()        <span class="comment">//cpu/s3c64xx/nand.c</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (nand_scan(mtd, <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mtd-&gt;name)</span><br><span class="line">            mtd-&gt;name = (<span class="type">char</span> *)default_nand_name;    <span class="comment">//default_nand_name=&quot;nand&quot;</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//问题：nand 和mtd是如何关联的？？？</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>所以可以看出手上的这份文档<code>S3C6410_Internal_ROM_Booting.pdf</code>中关于nand的分区是<strong>有问题的</strong>，</p><p>有可能后续修改了而我们没有最新文档。</p><p>按照代码，及上面所述BL0的拷贝方式，这里<strong>BL1应该占4Page</strong>， 关于<code>Signature</code>这个段，有些不理解，看了SPV210的 手册<code>S5PV210_iROM_ApplicationNote_Preliminary_20091126.pdf</code>相关的描述，是在<strong>secure boot</strong>的时候才需要的，按照个人理解这里也是一样，所以不需要。</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/2001_0838-AtMpJDHev4odcigs.png" alt="image-20220320010838834" style="zoom:200%;" /> <h1 id="从Nand-Flash启动"><a href="#从Nand-Flash启动" class="headerlink" title="从Nand Flash启动"></a>从Nand Flash启动</h1><h2 id="BL1流程-1"><a href="#BL1流程-1" class="headerlink" title="BL1流程"></a>BL1流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#和从sd卡启动的流程大体相同，只是搬迁BL2不一样</span><br><span class="line"></span><br><span class="line">reset                        #cpu/s3c64xx/start.S</span><br><span class="line">    cpu_init_crit</span><br><span class="line">    bl lowlevel_init        #board/samsung/smdk6410/lowlevel_init.S</span><br><span class="line"></span><br><span class="line">    #判断运行的代码是否已经relocate;  start.S</span><br><span class="line">    #BL1运行在iRAM,所以没有relocate,执行copy_from_nand</span><br><span class="line"></span><br><span class="line">    #搬迁BL2到SDRAM</span><br><span class="line">    bl copy_from_nand        #cpu/s3c64xx/start.S</span><br><span class="line">    copy_uboot_to_ram  #cpu/s3c64xx/nand_cp.c</span><br><span class="line"> </span><br><span class="line">    skip_hw_init</span><br><span class="line">    stack_setup  </span><br><span class="line">    clear_bss</span><br><span class="line"></span><br><span class="line">    #跳转到BL2</span><br><span class="line">    ldr    pc, _start_armboot    #cpu/s3c64xx/start.S</span><br></pre></td></tr></table></figure><h2 id="BL1如何搬迁BL2到SDRAM-1"><a href="#BL1如何搬迁BL2到SDRAM-1" class="headerlink" title="BL1如何搬迁BL2到SDRAM"></a>BL1如何搬迁BL2到SDRAM</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#cpu/s3c64xx/start.S</span><br><span class="line"></span><br><span class="line">movr0, #0x1000</span><br><span class="line">blcopy_from_nand</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * copy U-Boot to SDRAM and jump to ram (from NAND or OneNAND)</span><br><span class="line"> * r0: size to be compared</span><br><span class="line"> * Load 1&#x27;st 2blocks to RAM because U-boot&#x27;s size is larger than 1block(128k) size</span><br><span class="line"> */</span><br><span class="line">.globl copy_from_nand</span><br><span class="line">copy_from_nand:</span><br><span class="line">movr10, lr/* save return address */</span><br><span class="line"></span><br><span class="line">movr9, r0</span><br><span class="line">/* get ready to call C functions */</span><br><span class="line">ldrsp, _TEXT_PHY_BASE/* setup temp stack pointer */</span><br><span class="line">subsp, sp, #12</span><br><span class="line">movfp, #0/* no previous frame, so fp=0 */</span><br><span class="line">movr9, #0x1000</span><br><span class="line">blcopy_uboot_to_ram</span><br><span class="line"></span><br><span class="line">3:tst r0, #0x0</span><br><span class="line">bnecopy_failed</span><br><span class="line"></span><br><span class="line">ldrr0, =0x0c000000</span><br><span class="line">ldrr1, _TEXT_PHY_BASE</span><br><span class="line">1:ldrr3, [r0], #4</span><br><span class="line">ldrr4, [r1], #4</span><br><span class="line">teqr3, r4</span><br><span class="line">bnecompare_failed/* not matched */</span><br><span class="line">subsr9, r9, #4</span><br><span class="line">bne1b</span><br><span class="line"></span><br><span class="line">4:movlr, r10/* all is OK */</span><br><span class="line">movpc, lr</span><br><span class="line"></span><br><span class="line">copy_failed:</span><br><span class="line">nop/* copy from nand failed */</span><br><span class="line">bcopy_failed</span><br><span class="line"></span><br><span class="line">compare_failed:</span><br><span class="line">nop/* compare failed */</span><br><span class="line">bcompare_failed</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cpu/s3c64xx/nand_cp.c</span></span><br><span class="line"></span><br><span class="line">copy_uboot_to_ram()</span><br><span class="line">    <span class="comment">//MT29F8G08ABABAWP</span></span><br><span class="line">large_block = <span class="number">2</span>;</span><br><span class="line">nandll_read_blocks(CFG_PHY_UBOOT_BASE, <span class="number">0x3c000</span>, large_block);<span class="comment">//读240KB</span></span><br><span class="line">        <span class="keyword">if</span>(large_block == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* Read pages */</span></span><br><span class="line">            <span class="comment">//这里为什么是page_shift-1,这样不是覆盖了2K数据？？</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++, buf+=(<span class="number">1</span>&lt;&lt;(page_shift<span class="number">-1</span>))) &#123;</span><br><span class="line">                nandll_read_page(buf, i, large_block);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* Read pages */</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">4</span>; i &lt; (<span class="number">0x3c000</span>&gt;&gt;page_shift); i++, buf+=(<span class="number">1</span>&lt;&lt;page_shift)) &#123;</span><br><span class="line">                nandll_read_page(buf, i, large_block);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看代码的时候一直很困惑，不知道为啥第一次读4page的数据，偏移量是<code>page_shift-1</code>, 这样每次会覆盖2K数据。</p><p>然后在网上看到了资料：</p><blockquote><p>从nandflash启动时，<strong>BL0是将nandflash的块0的前4页中，每页头2K组合成8K，拷贝到steppingstone中的</strong>。</p><p><strong>BL0是厂家固化好的代码，我们改不了</strong>。如果我们要自己一些启动代码就需要这点。<strong>无论是写入，还是读取这8K的启动代码，也要遵循这样的约定</strong>。</p></blockquote><p>所以也解决了前面[BL2如何将sd卡中u-boot烧写到nand](# BL2如何将sd卡中u-boot烧写到nand)  “sd卡中的u-boot程序，烧录u-boot到nand时，addr的偏移为啥是2048”的困惑。</p><p>这里要感谢<a href="https://blog.csdn.net/drsonxu">drsonxu</a>的这篇博客：<a href="https://blog.csdn.net/drsonxu/article/details/104251279?spm=1001.2014.3001.5501">关于OK6410的NandFlash启动的一些事实</a> .</p><h2 id="BL2流程-1"><a href="#BL2流程-1" class="headerlink" title="BL2流程"></a>BL2流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#和从sd卡启动大致相同，只有</span><br><span class="line">#BL2 是 从_start_armboot开始的: ldr    pc, _start_armboot         #cpu/s3c64xx/start.S</span><br><span class="line"> </span><br><span class="line">_start_armboot:</span><br><span class="line">    .word start_armboot        #cpu/s3c64xx/start.S</span><br><span class="line"> </span><br><span class="line">start_armboot()                #lib_arm/board.c</span><br><span class="line">#初始化: 函数首地址存放在 init_sequence[] 指针数组</span><br><span class="line"></span><br><span class="line">#....参考从sd卡启动</span><br><span class="line"></span><br><span class="line">#nand控制器初始化</span><br><span class="line">nand_init();</span><br><span class="line"></span><br><span class="line">#....参考从sd卡启动</span><br></pre></td></tr></table></figure><h1 id="TODO-待解决问题"><a href="#TODO-待解决问题" class="headerlink" title="TODO:待解决问题"></a>TODO:待解决问题</h1><p><code>nand_write()</code>实际调用的是<code>mtd-&gt;write()</code>, 那么nand驱动是如何和mtd驱动关联的，暂时还没看懂???</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/u011011827/article/details/114266423">OK6410A 开发板 (三) u-boot-1.1.6 boot 解析</a></p><p><a href="https://blog.csdn.net/drsonxu/article/details/104251279?spm=1001.2014.3001.5501">关于OK6410的NandFlash启动的一些事实</a></p><p><a href="https://blog.csdn.net/lock1501/article/details/40590883">s3c6410初始化2G nand flash的一些注意点</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;这段时间因为疫情在家，失业了也没有什么其他的事情，想着好好学习一下u-boot相关内容。&lt;/p&gt;
&lt;p&gt;正好手头上有之前买了然后吃灰的OK6410，根据网上的相关资料着手移植到u-boot 2018版本，折腾了快半个月的时间还是没有成功，每次&lt;code&gt;bl _main&lt;/code&gt;后就会挂掉，不知道具体原因很是困惑，也找了一些调试方法，比如通过Jlink直接调试，通过Jlink-gdb-server，最后没怎么搞明白如何调试，但是发现运行后进入了&lt;code&gt;data_abort&lt;/code&gt;异常位置。分析应该是relocate出现问题，也找了很久无果，然后想着好好分析一些飞凌提供的旧版本的u-boot。&lt;/p&gt;</summary>
    
    
    
    <category term="U-Boot" scheme="https://blog.littlekang.xyz/categories/U-Boot/"/>
    
    
    <category term="u-boot" scheme="https://blog.littlekang.xyz/tags/u-boot/"/>
    
    <category term="ok6410" scheme="https://blog.littlekang.xyz/tags/ok6410/"/>
    
  </entry>
  
  <entry>
    <title>u-boot学习笔记-SPL</title>
    <link href="https://blog.littlekang.xyz/article/9443/"/>
    <id>https://blog.littlekang.xyz/article/9443/</id>
    <published>2022-03-18T05:07:12.000Z</published>
    <updated>2022-03-28T15:33:10.244Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SPL</strong>是<strong>Secondary Program Loader</strong>的简称，第二阶段程序加载器，这里所谓的第二阶段是相对于SOC中的BROM来说的(BL0);</p><span id="more"></span><h1 id="为什么需要SPL"><a href="#为什么需要SPL" class="headerlink" title="为什么需要SPL"></a>为什么需要SPL</h1><p>主要原因是对于一些SOC来说，它的内部SRAM可能会比较小，小到无法装载下一个完整的u-boot镜像，那么就需要SPL，它主要负责初始化外部RAM和环境，并加载真正的u-boot镜像到外部RAM中来执行</p><blockquote><p>REF：<a href="https://blog.csdn.net/rikeyone/article/details/51646200">https://blog.csdn.net/rikeyone/article/details/51646200</a></p></blockquote><h1 id="SPL官方说明文档"><a href="#SPL官方说明文档" class="headerlink" title="SPL官方说明文档"></a>SPL官方说明文档</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">Generic SPL framework</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">Overview</span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line">To unify all existing implementations for a secondary program loader (SPL)</span><br><span class="line">and to allow simply adding of new implementations this generic SPL framework</span><br><span class="line">has been created. With this framework almost all source files for a board</span><br><span class="line">can be reused. No code duplication or symlinking is necessary anymore.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">How it works</span><br><span class="line">------------</span><br><span class="line"></span><br><span class="line">The object files for SPL are built separately and placed in the &quot;spl&quot; directory.</span><br><span class="line">SPL项目相关的文件，单独存放在 spl目录</span><br><span class="line"></span><br><span class="line">The final binaries which are generated are u-boot-spl, u-boot-spl.bin and</span><br><span class="line">u-boot-spl.map.</span><br><span class="line">最终编译生成的二进制文件为u-boot-spl, u-boot-spl.bin, u-boot-spl.map</span><br><span class="line"></span><br><span class="line">A config option named CONFIG_SPL_BUILD is enabled by Kconfig for SPL.</span><br><span class="line">Source files can therefore be compiled for SPL with different settings.</span><br><span class="line">CONFIG_SPL_BUILD宏用来配置SPL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line"></span><br><span class="line">ifeq ($(CONFIG_SPL_BUILD),y)</span><br><span class="line">obj-y += board_spl.o</span><br><span class="line">else</span><br><span class="line">obj-y += board.o</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">obj-$(CONFIG_SPL_BUILD) += foo.o</span><br><span class="line"></span><br><span class="line">#ifdef CONFIG_SPL_BUILD</span><br><span class="line">    foo();</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The building of SPL images can be enabled by CONFIG_SPL option in Kconfig.</span><br><span class="line">通过Kconfig中使能CONFIG_SPL来编译SPL固件</span><br><span class="line"></span><br><span class="line">Because SPL images normally have a different text base, one has to be</span><br><span class="line">configured by defining CONFIG_SPL_TEXT_BASE. The linker script has to be</span><br><span class="line">defined with CONFIG_SPL_LDSCRIPT.</span><br><span class="line">通常SPL固件有不同的入口地址，通过CONFIG_SPL_TEXT_BASE指定</span><br><span class="line">链接地址使用CONFIG_SPL_LDSCRIPT指定</span><br><span class="line"></span><br><span class="line">To support generic U-Boot libraries and drivers in the SPL binary one can</span><br><span class="line">optionally define CONFIG_SPL_XXX_SUPPORT. Currently following options</span><br><span class="line">are supported:</span><br><span class="line">通过定义 CONFIG_SPL_XXX_SUPPORT来使能支持的功能&amp;驱动</span><br><span class="line"></span><br><span class="line">目前支持的有：</span><br><span class="line">CONFIG_SPL_LIBCOMMON_SUPPORT (common/libcommon.o)</span><br><span class="line">CONFIG_SPL_LIBDISK_SUPPORT (disk/libdisk.o)</span><br><span class="line">CONFIG_SPL_I2C_SUPPORT (drivers/i2c/libi2c.o)</span><br><span class="line">CONFIG_SPL_GPIO_SUPPORT (drivers/gpio/libgpio.o)</span><br><span class="line">CONFIG_SPL_MMC_SUPPORT (drivers/mmc/libmmc.o)</span><br><span class="line">CONFIG_SPL_SERIAL_SUPPORT (drivers/serial/libserial.o)</span><br><span class="line">CONFIG_SPL_SPI_FLASH_SUPPORT (drivers/mtd/spi/libspi_flash.o)</span><br><span class="line">CONFIG_SPL_SPI_SUPPORT (drivers/spi/libspi.o)</span><br><span class="line">CONFIG_SPL_FAT_SUPPORT (fs/fat/libfat.o)</span><br><span class="line">CONFIG_SPL_EXT_SUPPORT</span><br><span class="line">CONFIG_SPL_LIBGENERIC_SUPPORT (lib/libgeneric.o)</span><br><span class="line">CONFIG_SPL_POWER_SUPPORT (drivers/power/libpower.o)</span><br><span class="line">CONFIG_SPL_NAND_SUPPORT (drivers/mtd/nand/libnand.o)</span><br><span class="line">CONFIG_SPL_DRIVERS_MISC_SUPPORT (drivers/misc)</span><br><span class="line">CONFIG_SPL_DMA_SUPPORT (drivers/dma/libdma.o)</span><br><span class="line">CONFIG_SPL_POST_MEM_SUPPORT (post/drivers/memory.o)</span><br><span class="line">CONFIG_SPL_NAND_LOAD (drivers/mtd/nand/nand_spl_load.o)</span><br><span class="line">CONFIG_SPL_SPI_LOAD (drivers/mtd/spi/spi_spl_load.o)</span><br><span class="line">CONFIG_SPL_RAM_DEVICE (common/spl/spl.c)</span><br><span class="line">CONFIG_SPL_WATCHDOG_SUPPORT (drivers/watchdog/libwatchdog.o)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Debugging</span><br><span class="line">---------</span><br><span class="line"></span><br><span class="line">When building SPL with DEBUG set you may also need to set CONFIG_PANIC_HANG</span><br><span class="line">as in most cases do_reset is not defined within SPL.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Estimating stack usage</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">With gcc 4.6 (and later) and the use of GNU cflow it is possible to estimate</span><br><span class="line">stack usage at various points in run sequence of SPL.  The -fstack-usage option</span><br><span class="line">to gcc will produce &#x27;.su&#x27; files (such as arch/arm/cpu/armv7/syslib.su) that</span><br><span class="line">will give stack usage information and cflow can construct program flow.</span><br><span class="line"></span><br><span class="line">Must have gcc 4.6 or later, which supports -fstack-usage</span><br><span class="line"></span><br><span class="line">1) Build normally</span><br><span class="line">2) Perform the following shell command to generate a list of C files used in</span><br><span class="line">SPL:</span><br><span class="line">$ find spl -name &#x27;*.su&#x27; | sed -e &#x27;s:^spl/::&#x27; -e &#x27;s:[.]su$:.c:&#x27; &gt; used-spl.list</span><br><span class="line">3) Execute cflow:</span><br><span class="line">$ cflow --main=board_init_r `cat used-spl.list` 2&gt;&amp;1 | $PAGER</span><br><span class="line"></span><br><span class="line">cflow will spit out a number of warnings as it does not parse</span><br><span class="line">the config files and picks functions based on #ifdef.  Parsing the &#x27;.i&#x27;</span><br><span class="line">files instead introduces another set of headaches.  These warnings are</span><br><span class="line">not usually important to understanding the flow, however.</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>REF: <a href="https://github.com/ARM-software/u-boot/blob/master/doc/README.SPL">https://github.com/ARM-software/u-boot/blob/master/doc/README.SPL</a></p></blockquote><h1 id="CONFIG-SUPPORT-SPL-CONFIG-SPL-CONFIG-SPL-BUILD的作用"><a href="#CONFIG-SUPPORT-SPL-CONFIG-SPL-CONFIG-SPL-BUILD的作用" class="headerlink" title="CONFIG_SUPPORT_SPL, CONFIG_SPL,CONFIG_SPL_BUILD的作用"></a><code>CONFIG_SUPPORT_SPL</code>, <code>CONFIG_SPL</code>,<code>CONFIG_SPL_BUILD</code>的作用</h1><ul><li>CONFIG_SUPPORT_SPL: 表示是否<strong>支持</strong>SPL功能</li><li>CONFIG_SPL: 表示是否<strong>使能</strong>SPL</li><li>CONFIG_SPL_BUILD: 因为SPL和u-boot共用一个源码体系，他们之间通过这个宏来在源码中分开；</li></ul><p>CONFIG_SUPPORT_SPL，CONFIG_SPL在<code>common/spl/kconifg</code>中定义<br><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1812_5907-KEdLVtZJ4NsI7XVR.png" alt="image-20220318125907718" style="zoom:200%;" /></p><h2 id="CONFIG-SUPPORT-SPL配置"><a href="#CONFIG-SUPPORT-SPL配置" class="headerlink" title="CONFIG_SUPPORT_SPL配置"></a>CONFIG_SUPPORT_SPL配置</h2><p>CONFIG_SUPPORT_SPL一般在具体的arch的Kconfig中配置，如：<br><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1812_5927-MLUiachZWMVB70My.png" alt="image-20220318125927819" style="zoom:200%;" /></p><h2 id="CONFIG-SPL配置"><a href="#CONFIG-SPL配置" class="headerlink" title="CONFIG_SPL配置"></a>CONFIG_SPL配置</h2><p>CONFIG_SPL依赖CONFIG_SUPPORT_SPL，只有使能CONFIG_SUPPORT_SPL，配置才有效，可以直接在arch的Kconfig中select SPL, 也可以写到xxx_defconfig文件中，如：<br><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1812_5946-umdhmJAgiDNMgjWj.png" alt="image-20220318125945991" style="zoom:200%;" /></p><h2 id="CONFIG-SPL-BUILD在何处定义的？"><a href="#CONFIG-SPL-BUILD在何处定义的？" class="headerlink" title="CONFIG_SPL_BUILD在何处定义的？"></a>CONFIG_SPL_BUILD在何处定义的？</h2><p>找了很久的资料，看到wowotech的这篇，才明白是在<code>script/Makefile.spl</code><br><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1813_0005-R4s56zmBo9iFsmXU.png" alt="image-20220318130005505" style="zoom:200%;" /></p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1813_0023-l976WHn5e40plKLm.png" alt="image-20220318130023173" style="zoom:200%;" /><blockquote><p>REF:<a href="http://www.wowotech.net/forum/viewtopic.php?id=29">http://www.wowotech.net/forum/viewtopic.php?id=29</a></p></blockquote><h1 id="SPL-Framework"><a href="#SPL-Framework" class="headerlink" title="SPL Framework"></a>SPL Framework</h1><p><strong>CONFIG_SPL</strong><br>    Enable building of SPL globally.<br>    全局使能SPL编译，定义后才会编译SPL，生成最终目标位于<code>spl/u-boot-spl.bin</code></p><p><strong>CONFIG_SPL_LDSCRIPT</strong><br>    LDSCRIPT for linking the SPL binary.<br>    配置spl链接脚本路径</p><p><strong>CONFIG_SPL_MAX_FOOTPRINT</strong><br>    Maximum size in memory allocated to the SPL, BSS included.<br>    When defined, the linker checks that the actual memory<br>    used by SPL from <code>_start</code> to <code>__bss_end</code> does not exceed it.<br>    <code>CONFIG_SPL_MAX_FOOTPRINT</code> and <code>CONFIG_SPL_BSS_MAX_SIZE</code><br>    must <strong>not</strong> be both defined at the same time.<br>    分配给SPL的最大堆内存空间，包括BSS段；定义后，链接器检查<code>(__bss_end - _start)</code>的大小，确保不超过CONFIG_SPL_MAX_FOOTPRINT; 不能和CONFIG_SPL_BSS_MAX_SIZE同时定义<br>    <img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1900_0241-JCUKYJTk4Zedp1OP.png" alt="image-20220319000241421" style="zoom:200%;" /></p><p><strong>CONFIG_SPL_MAX_SIZE</strong><br>    Maximum size of the SPL image (text, data, rodata, and<br>    linker lists sections), BSS excluded.<br>      When defined, the linker checks that the actual size does<br>    not exceed it.<br>    SPL固件的最大大小，不包括BSS，定义后，链接器检查<code>(__image_copy_end - __image_copy_start)</code>的大小，确保不超过CONFIG_SPL_MAX_SIZE<br>    <img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1900_0935-28ARiHZFK1Jf71Tb.png" alt="image-20220319000934883" style="zoom:200%;" /></p><p><strong>CONFIG_SPL_BSS_MAX_SIZE</strong><br>    Maximum size in memory allocated to the SPL BSS.<br>    When defined, the linker checks that the actual memory used<br>    by SPL from <code>__bss_start</code> to <code>__bss_end</code> does not exceed it.<br>    <code>CONFIG_SPL_MAX_FOOTPRINT</code> and <code>CONFIG_SPL_BSS_MAX_SIZE</code><br>    must <strong>not</strong> be both defined at the same time.<br>    SPL BSS段的最大大小,定义时，链接器将检查<code>(__bss_end - __bss_start)</code>的大小，确保不超过CONFIG_SPL_BSS_MAX_SIZE<br>    <img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1900_2447-Wb9FprP8axa2j7sI.png" alt="image-20220319002447105" style="zoom:200%;" /></p><p><strong>CONFIG_SPL_TEXT_BASE</strong><br>    TEXT_BASE for linking the SPL binary.<br>    链接地址，SPL在内存中的运行入口地址</p><p><strong>CONFIG_SPL_RELOC_TEXT_BASE</strong><br>    Address to relocate to.  If unspecified, this is equal to<br>    <code>CONFIG_SPL_TEXT_BASE</code> (i.e. no relocation is done).<br>    <code>CONFIG_SPL_BSS_START_ADDR</code><br>    Link address for the BSS within the SPL binary.<br>    SPL自己搬迁(relocate)的目的地址，如果不定义则和<code>CONFIG_SPL_TEXT_BASE</code>一样(这样将不会relocate)</p><p><strong>CONFIG_SPL_STACK</strong><br>    Adress of the start of the stack SPL will use<br>    SPL使用的栈的起始地址</p><p><strong>CONFIG_SPL_PANIC_ON_RAW_IMAGE</strong><br>    When defined, SPL will <code>panic()</code> if the image it has<br>    loaded does not have a signature.<br>    Defining this is useful when code which loads images<br>    in SPL cannot guarantee that absolutely all read errors<br>    will be caught.<br>    An example is the LPC32XX MLC NAND driver, which will<br>    consider that a completely unreadable NAND block is bad,<br>    and thus should be skipped silently.<br>    定义时，SPL将执行<code>panic()</code>如果image没有签名。当不能完全保证所有的读取错误被捕获时，这个操作是很有用的。</p><p><strong>CONFIG_SPL_RELOC_STACK</strong><br>    Adress of the start of the stack SPL will use after<br>    relocation.  If unspecified, this is equal to<br>    CONFIG_SPL_STACK.<br>    SPL迁移(relocate),&lt;假如迁移的话&gt;，迁移后的栈首地址，如果没有定义等于<code>CONFIG_SPL_STACK</code></p><p><strong>CONFIG_SYS_SPL_MALLOC_START</strong><br>    Starting address of the malloc pool used in SPL.<br>    When this option is set the full malloc is used in SPL and<br>    it is set up by <code>spl_init()</code> and before that, the simple malloc()<br>    can be used if <code>CONFIG_SYS_MALLOC_F</code> is defined.<br>    SPL使用的malloc内存池的起始地址。<br>    当定义，SPL将使用在<code>spl_init()</code>中设置的full malloc()，在此之前，可以使用simple malloc(), 如果<code>CONFIG_SYS_MALLOC_F</code>被定义。</p><p><strong>CONFIG_SYS_SPL_MALLOC_SIZE</strong><br>    The size of the malloc pool used in SPL.<br>    SPL使用的malloc内存池大小。</p><p><strong>CONFIG_SPL_OS_BOOT</strong><br>    Enable booting directly to an OS from SPL.<br>    See also: doc&#x2F;README.falcon<br>    定义后，可以直接从SPL中启动系统</p><p><strong>CONFIG_SPL_DISPLAY_PRINT</strong><br>    For ARM, enable an optional function to print more information<br>    about the running system.<br>    对于ARM架构，定义后，将使能打印更多系统信息</p><p><strong>CONFIG_SPL_INIT_MINIMAL</strong><br>    Arch init code should be built for a very small image</p><p><strong>CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_PARTITION</strong><br>    Partition on the MMC to load U-Boot from when the MMC is being<br>    used in raw mode<br>    在raw模式下，使用MMC启动时，加载u-boot时的分区</p><p><strong>CONFIG_SYS_MMCSD_RAW_MODE_KERNEL_SECTOR</strong><br>    Sector to load kernel uImage from when MMC is being<br>    used in raw mode (for Falcon mode)<br>    <code>CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTOR</code>,<br>    <code>CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTORS</code><br>    Sector and number of sectors to load kernel argument<br>    parameters from when MMC is being used in raw mode<br>    (for falcon mode)</p><p><strong>CONFIG_SYS_MMCSD_FS_BOOT_PARTITION</strong><br>    Partition on the MMC to load U-Boot from when the MMC is being<br>    used in fs mode<br>    在fs模式下，使用MMC启动时，加载u-boot时的分区</p><p><strong>CONFIG_SPL_FS_LOAD_PAYLOAD_NAME</strong><br>    Filename to read to load U-Boot when reading from filesystem<br>    在fs模式下，加载u-boot时，从文件系统中读取的文件名</p><p><strong>CONFIG_SPL_FS_LOAD_KERNEL_NAME</strong><br>    Filename to read to load kernel uImage when reading<br>    from filesystem (for Falcon mode)</p><p><strong>CONFIG_SPL_FS_LOAD_ARGS_NAME</strong><br>    Filename to read to load kernel argument parameters<br>    when reading from filesystem (for Falcon mode)</p><p><strong>CONFIG_SPL_MPC83XX_WAIT_FOR_NAND</strong><br>    Set this for NAND SPL on PPC mpc83xx targets, so that<br>    start.S waits for the rest of the SPL to load before<br>    continuing (the hardware starts execution after just<br>    loading the first page rather than the full 4K).</p><p><strong>CONFIG_SPL_SKIP_RELOCATE</strong><br>    Avoid SPL relocation<br>    定义后，SPL将不会被relocate</p><p><strong>CONFIG_SPL_NAND_BASE</strong><br>    Include nand_base.c in the SPL.  Requires<br>    <code>CONFIG_SPL_NAND_DRIVERS</code>.<br>    定义后，将包含nand_base.c，需要定义<code>CONFIG_SPL_NAND_DRIVERS</code></p><p><strong>CONFIG_SPL_NAND_DRIVERS</strong><br>    SPL uses normal NAND drivers, not minimal drivers.<br>    定义后，SPL使用normal Nand驱动，而不是minimal驱动</p><p><strong>CONFIG_SPL_NAND_IDENT</strong><br>    SPL uses the chip ID list to identify the NAND flash.<br>    Requires CONFIG_SPL_NAND_BASE.<br>    SPL使用芯片Id来识别nand flash型号，需要定义<code>CONFIG_SPL_NAND_BASE</code></p><p><strong>CONFIG_SPL_NAND_ECC</strong><br>    Include standard software ECC in the SPL<br>    定义后，将包含标准的软件ECC实现</p><p><strong>CONFIG_SPL_NAND_SIMPLE</strong><br>    Support for NAND boot using simple NAND drivers that<br>    expose the cmd_ctrl() interface.<br>    定义后，使用简单的nand驱动，暴露cmd_ctrl()接口</p><p><strong>CONFIG_SPL_UBI</strong><br>    Support for a lightweight UBI (fastmap) scanner and    loader<br>    支持轻量级的UBI scanner 和loader.<br>    (UBI相关介绍: <a href="http://velep.com/archives/909.html">http://velep.com/archives/909.html</a>)</p><p><strong>CONFIG_SPL_NAND_RAW_ONLY</strong><br>    Support to boot only raw u-boot.bin images. Use this only<br>    if you need to save space.</p><p><strong>CONFIG_SPL_COMMON_INIT_DDR</strong><br>    Set for common ddr init with serial presence detect in<br>    SPL binary.<br>    定义后，将使用通用的ddr初始化程序</p><p><strong>CONFIG_SYS_NAND_5_ADDR_CYCLE, CONFIG_SYS_NAND_PAGE_COUNT,<br>CONFIG_SYS_NAND_PAGE_SIZE, CONFIG_SYS_NAND_OOBSIZE,<br>CONFIG_SYS_NAND_BLOCK_SIZE, CONFIG_SYS_NAND_BAD_BLOCK_POS,<br>CONFIG_SYS_NAND_ECCPOS, CONFIG_SYS_NAND_ECCSIZE,<br>CONFIG_SYS_NAND_ECCBYTES</strong><br>    Defines the size and behavior of the NAND that SPL uses<br>    to read U-Boot<br>    定义nand相关信息</p><p><strong>CONFIG_SPL_NAND_BOOT</strong><br>    Add support NAND boot<br>    支持从nand启动</p><p><strong>CONFIG_SYS_NAND_U_BOOT_OFFS</strong><br>    Location in NAND to read U-Boot from<br>    从Nand中读取u-boot的偏移地址</p><p><strong>CONFIG_SYS_NAND_U_BOOT_DST</strong><br>    Location in memory to load U-Boot to<br>    将u-boot加载到内存中的地址</p><p><strong>CONFIG_SYS_NAND_U_BOOT_SIZE</strong><br>    Size of image to load<br>    需要加载的u-boot的大小</p><p><strong>CONFIG_SYS_NAND_U_BOOT_START</strong><br>    Entry point in loaded image to jump to<br>    加载u-boot后，跳转到u-boot运行时，跳转的入口地址</p><p><strong>CONFIG_SYS_NAND_HW_ECC_OOBFIRST</strong><br>    Define this if you need to first read the OOB and then the<br>    data. This is used, for example, on davinci platforms.<br>    定义后，将先读OOB，然后读data</p><p><strong>CONFIG_SPL_RAM_DEVICE</strong><br>    Support for running image already present in ram, in SPL binary</p><p><strong>CONFIG_SPL_PAD_TO</strong><br>    Image offset to which the SPL should be padded before appending<br>    the SPL payload. By default, this is defined as<br>    CONFIG_SPL_MAX_SIZE, or 0 if CONFIG_SPL_MAX_SIZE is undefined.<br>    CONFIG_SPL_PAD_TO must be either 0, meaning to append the SPL<br>    payload without any padding, or &gt;&#x3D; CONFIG_SPL_MAX_SIZE.</p><p><strong>CONFIG_SPL_TARGET</strong><br>    Final target image containing SPL and payload.  Some SPLs<br>    use an arch-specific makefile fragment instead, for<br>    example if more than one image needs to be produced.</p><p><strong>CONFIG_SPL_FIT_PRINT</strong><br>    Printing information about a FIT image adds quite a bit of<br>    code to SPL. So this is normally disabled in SPL. Use this<br>    option to re-enable it. This will affect the output of the<br>    bootm command when booting a FIT image.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;SPL&lt;/strong&gt;是&lt;strong&gt;Secondary Program Loader&lt;/strong&gt;的简称，第二阶段程序加载器，这里所谓的第二阶段是相对于SOC中的BROM来说的(BL0);&lt;/p&gt;</summary>
    
    
    
    <category term="U-Boot" scheme="https://blog.littlekang.xyz/categories/U-Boot/"/>
    
    
    <category term="u-boot" scheme="https://blog.littlekang.xyz/tags/u-boot/"/>
    
    <category term="spl" scheme="https://blog.littlekang.xyz/tags/spl/"/>
    
  </entry>
  
  <entry>
    <title>hexo-maupassant--搭建笔记</title>
    <link href="https://blog.littlekang.xyz/article/12186/"/>
    <id>https://blog.littlekang.xyz/article/12186/</id>
    <published>2022-03-16T17:06:36.000Z</published>
    <updated>2022-03-17T12:31:33.805Z</updated>
    
    <content type="html"><![CDATA[<p>Maupassant最初是由<a href="https://github.com/pagecho/">Cho</a>大神为<a href="http://typecho.org/">Typecho</a>平台设计开发的一套响应式模板，体积只有20KB，在各种尺寸的设备上表现出色。由于其简洁大气的风格受到许多用户喜爱，目前也已经被移植到了多个平台上，例如：</p><ul><li>Typecho：<a href="https://github.com/pagecho/maupassant/">https://github.com/pagecho/maupassant/</a></li><li>Octopress：<a href="https://github.com/pagecho/mewpassant/">https://github.com/pagecho/mewpassant/</a></li><li>Farbox：<a href="https://github.com/pagecho/Maupassant-farbox/">https://github.com/pagecho/Maupassant-farbox/</a></li><li>Hugo: <a href="https://github.com/rujews/maupassant-hugo/">https://github.com/rujews/maupassant-hugo/</a></li><li>hexo: <a href="https://github.com/tufu9441/maupassant-hexo">https://github.com/tufu9441/maupassant-hexo</a></li></ul><p>这次使用的就是<strong>tufu9441</strong>移植的版本。</p><h1 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h1><p>官方地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p>​                   <a href="https://nodejs.org/dist/">https://nodejs.org/dist/</a></p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1617_2207-IKnnviNKKagL0GmQ.png" alt="image-20220316172207648" style="zoom: 200%;" /><p>添加国内镜像源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1617_2417-1J3aYgxVHPhlJMua.png" alt="image-20220316172417040" style="zoom:200%;" /><h1 id="安装gitbash"><a href="#安装gitbash" class="headerlink" title="安装gitbash"></a>安装gitbash</h1><p>略</p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>使用npm全局安装hexo-cli ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>在gitbash中验证是否成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1622_5709-GnFVxtPT6OufMQ65.png" alt="image-20220316225709308" style="zoom:200%;" /><p>创建一个博客目录文件夹：这里新建文件夹<code>maupassant-hexo</code>，初始化一个hexo博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1623_0136-43qZAAuUJaMPFxiT.png" alt="image-20220316230136708" style="zoom:200%;" /><h1 id="下载主题源码"><a href="#下载主题源码" class="headerlink" title="下载主题源码"></a>下载主题源码</h1><p>github仓库地址：<a href="https://github.com/tufu9441/maupassant-hexo/tree/master">https://github.com/tufu9441/maupassant-hexo/tree/master</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1623_0811-Npl7IaRMqUQpEUG6.png" alt="image-20220316230811408" style="zoom:200%;" /><h1 id="安装渲染器"><a href="#安装渲染器" class="headerlink" title="安装渲染器"></a>安装渲染器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug --save</span><br><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><h1 id="相关基础"><a href="#相关基础" class="headerlink" title="相关基础"></a>相关基础</h1><h2 id="免费的评论系统"><a href="#免费的评论系统" class="headerlink" title="免费的评论系统"></a>免费的评论系统</h2><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1617_3326-Rrm3sOcdVefup3zT.png" alt="image-20220316173326153" style="zoom:200%;" /><blockquote><p><a href="https://www.yzncms.com/shows/20/110.html">https://www.yzncms.com/shows/20/110.html</a></p></blockquote><p>对比之后，选择<strong>Utterances</strong>.</p><h2 id="安装Utterances"><a href="#安装Utterances" class="headerlink" title="安装Utterances"></a>安装Utterances</h2><p>安装地址：<a href="https://github.com/apps/utterances">https://github.com/apps/utterances</a></p><p>访问安装地址，进入安装页面，单击 <code>Install</code> 按钮；</p><p>参考&gt;<a href="https://blog.lanweihong.com/posts/24011/">https://blog.lanweihong.com/posts/24011/</a></p><h1 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h1><ul><li><p>选择使用<strong>maupassant</strong></p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1623_1918-hDc0EWtRkGY6GWIl.png" alt="image-20220316231918711" style="zoom:200%;" /></li><li><p>其他个人相关信息配置<br>略</p></li><li><p>链接优化：使用<code>hexo-abbrlink</code>，处理中文文章名字问题<br>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>在站点配置文件<code>_config.yml</code>中修改<code>permalink</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">permalink: :abbrlink/</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></li><li><p>添加部署地址：</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1623_3814-t5BPta8MnK4NfiJY.png" alt="image-20220316233814865" style="zoom:200%;" /></li><li><p>新建一个“关于”页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure></li></ul><h1 id="maupassant主题配置"><a href="#maupassant主题配置" class="headerlink" title="maupassant主题配置"></a>maupassant主题配置</h1><p>配置文件位于<code>themes/maupassant/_config.yml</code></p><h2 id="配置评论系统使用utterances"><a href="#配置评论系统使用utterances" class="headerlink" title="配置评论系统使用utterances"></a>配置评论系统使用<strong>utterances</strong></h2>  <img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1623_5536-hTxL71TBIKlEnHPj.png" alt="image-20220316235535874" style="zoom:200%;" /><h2 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h2><p>若要设置网站Favicon，可以将favicon.ico放在Hexo根目录的 <code>source</code> 文件夹下，建议的大小：32px * 32px。<br>若要为网站添加苹果设备图标，请将命名为apple-touch-icon.png的图片放在同样的位置，建议的大小：114px * 114px。</p><h2 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h2><p>首页默认显示文章摘要而非全文，可以在文章的 <code>front-matter</code> 中填写一项 <code>description:</code> 来设置你想显示的摘要，或者直接在文章内容中插入 <code>&lt;!--more--&gt;</code>以隐藏后面的内容。<br>若两者都未设置，则自动截取文章第一段作为摘要。</p><h2 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h2><p>在 source 目录下建立相应名称的文件夹，然后在文件夹中建立 index.md 文件，并在 index.md 的 front-matter 中设置layout为 <code>layout:page</code> 。现已支持添加标签页面，将页面的layout设置为 <code>layout: tagcloud</code> 即可。若需要单栏页面，就将layout设置为 <code>layout: single-column </code>。</p><h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><p>在文章的 front-matter 中添加 <code>toc: true</code> 即可让该篇文章显示目录。</p><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>要启用数学公式支持，请在Hexo目录的<code>_config.yml</code>中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax: true  </span><br></pre></td></tr></table></figure><p>并在相应文章的<code>front-matter</code>中添加<code>mathjax: true</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Test Math  </span><br><span class="line">date: 2016-04-05 14:16:00  </span><br><span class="line">categories: math  </span><br><span class="line">mathjax: true  </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>数学公式的默认定界符是<code>$$...$$</code>和<code>\\[...\\]</code>（对于块级公式），以及<code>$...$</code>和<code>\\(...\\)</code>（对于行内公式）。</p><p>但是，如果你的文章内容中经常出现美元符号“<code>$</code>”, 或者说你想将“<code>$</code>”用作美元符号而非行内公式的定界符，请在Hexo目录的<code>_config.yml</code>中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mathjax2: true  </span><br></pre></td></tr></table></figure><p>而不是<code>mathjax: true</code>。 相应地，在需要使用数学公式的文章的<code>front-matter</code>中也添加<code>mathjax2: true</code>。</p><h2 id="修改目录格式"><a href="#修改目录格式" class="headerlink" title="修改目录格式"></a>修改目录格式</h2><p>详细请查看：</p><blockquote><p><a href="https://wiki.hushhw.cn/posts/5dd904ed.html">Hexo主题maupassant目录优化解决方案</a></p></blockquote><p>注意事项：</p><ul><li>先备份base.pug，然后新建一个base.pug，按照文章的方法修改</li><li>在post.pug中，注释原来的目录相关代码<img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1719_0147-YnP3Npm488s5kSGF.png" alt="image-20220317190147363" style="zoom:200%;" /></li></ul><h1 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"></a>效果测试</h1><p>创建一篇测试文章：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 测试</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1700_0842-PVuBhFFCbwVubWqW.png" alt="image-20220317000842531" style="zoom:200%;" /><p>生成静态页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>本地查看效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#启动本地服务</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">#在浏览器打开http://localhost:4000/ 查看效果</span><br></pre></td></tr></table></figure><h1 id="部署到github-io"><a href="#部署到github-io" class="headerlink" title="部署到github.io"></a>部署到github.io</h1><p>安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改网站配置文件_config.yml,添加deploy信息:</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1719_5524-w7ANptC8Ihe2sWjV.png" alt="image-20220317195524348" style="zoom:200%;" /><p>其他参考：</p><blockquote><p><a href="https://segmentfault.com/a/1190000018250408">https://segmentfault.com/a/1190000018250408</a></p></blockquote><p><strong>主要事项：</strong></p><p>如果需要使用自己的域名，则需要添加<code>CNAME</code>文件，需要将CNAME放在hexo的source文件夹下:</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1720_3011-PaoKMEmKCgGa5Iaw.png" alt="image-20220317203011710" style="zoom:200%;" /><p>CNAME文件中填写自己的域名，让后在自己域名的DNS解析中，添加一条CNAME规则，指到xxxx.github.io .</p><p>最后流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.haomwei.com/technology/maupassant-hexo.html">https://www.haomwei.com/technology/maupassant-hexo.html</a></p><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Maupassant最初是由&lt;a href=&quot;https://github.com/pagecho/&quot;&gt;Cho&lt;/a&gt;大神为&lt;a href=&quot;http://typecho.org/&quot;&gt;Typecho&lt;/a&gt;平台设计开发的一套响应式模板，体积只有20KB，在各种尺寸的设备上表</summary>
      
    
    
    
    <category term="软件工具" scheme="https://blog.littlekang.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="hexo" scheme="https://blog.littlekang.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>maupassant主题测试</title>
    <link href="https://blog.littlekang.xyz/article/34203/"/>
    <id>https://blog.littlekang.xyz/article/34203/</id>
    <published>2022-03-16T16:06:36.000Z</published>
    <updated>2022-03-17T11:49:22.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装gitbash"><a href="#安装gitbash" class="headerlink" title="安装gitbash"></a>安装gitbash</h1><p>略</p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>使用npm全局安装hexo-cli ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>在gitbash中验证是否成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1700_0938-s9je1FnmxqJgxBTR.png" alt="image-20220316225709308" style="zoom:200%;" /><p>创建一个博客目录文件夹：这里新建文件夹<code>maupassant-hexo</code>，初始化一个hexo博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1700_0938-c62XJeTS6GaWMSiE.png" alt="image-20220316230136708" style="zoom:200%;" /><h1 id="下载主题源码"><a href="#下载主题源码" class="headerlink" title="下载主题源码"></a>下载主题源码</h1><p>github仓库地址：<a href="https://github.com/tufu9441/maupassant-hexo/tree/master">https://github.com/tufu9441/maupassant-hexo/tree/master</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1700_0938-QEibEsjP1MpEXyKG.png" alt="image-20220316230811408" style="zoom:200%;" /><h1 id="安装渲染器"><a href="#安装渲染器" class="headerlink" title="安装渲染器"></a>安装渲染器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug --save</span><br><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是一个测试</summary>
    
    
    
    <category term="软件工具" scheme="https://blog.littlekang.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="hexo" scheme="https://blog.littlekang.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 局域网ntp服务搭建</title>
    <link href="https://blog.littlekang.xyz/article/45834/"/>
    <id>https://blog.littlekang.xyz/article/45834/</id>
    <published>2021-05-11T14:14:32.000Z</published>
    <updated>2022-03-17T09:19:47.292Z</updated>
    
    <content type="html"><![CDATA[<p>配置文件：</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1715_5922-N4QnOp9iSuystxc8.jpg" style="zoom:200%;" /> <h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看是否安装</span></span><br><span class="line">rpm -qa | grep ntp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用yum安装</span></span><br><span class="line">yum install ntp</span><br></pre></td></tr></table></figure><p>默认安装了ntpdate, 需要安装ntp<br><img src="https://nas.littlekang.xyz:9000/markdown/2021-05/1121_2611-t0VuH73CnizXzAxX.jpg" style="zoom:200%;" /> </p><h1 id="ntp服务器配置-服务器能访问因特网"><a href="#ntp服务器配置-服务器能访问因特网" class="headerlink" title="ntp服务器配置(服务器能访问因特网)"></a>ntp服务器配置(服务器能访问因特网)</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ntp.conf</span><br><span class="line"></span><br><span class="line">把配置文件下面四行注释掉：</span><br><span class="line">server 0.centos.pool.ntp.org iburst</span><br><span class="line">server 1.centos.pool.ntp.org iburst</span><br><span class="line">server 2.centos.pool.ntp.org iburst</span><br><span class="line">server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">然后在下面添加这几行：</span><br><span class="line">server 0.cn.pool.ntp.org iburst</span><br><span class="line">server 1.cn.pool.ntp.org iburst</span><br><span class="line">server 2.cn.pool.ntp.org iburst</span><br><span class="line">server 3.cn.pool.ntp.org iburst</span><br></pre></td></tr></table></figure><h1 id="ntp服务器配置-服务器只能访问局域网"><a href="#ntp服务器配置-服务器只能访问局域网" class="headerlink" title="ntp服务器配置(服务器只能访问局域网)"></a>ntp服务器配置(服务器只能访问局域网)</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ntp.conf</span><br><span class="line"></span><br><span class="line">把配置文件下面四行注释掉：</span><br><span class="line">server 0.centos.pool.ntp.org iburst</span><br><span class="line">server 1.centos.pool.ntp.org iburst</span><br><span class="line">server 2.centos.pool.ntp.org iburst</span><br><span class="line">server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">然后在下面添加这几行：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">把本地主机的时钟也看作外部时钟源来处理，分配的地址是127.127.1.0</span></span><br><span class="line">server 127.127.1.0  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置本地时钟源的层次为10</span></span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="重启服务-amp-配置开机自启动"><a href="#重启服务-amp-配置开机自启动" class="headerlink" title="重启服务&amp;配置开机自启动"></a>重启服务&amp;配置开机自启动</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置开机启动</span></span><br><span class="line">systemctl enable ntpd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启服务</span></span><br><span class="line">systemctl restart ntpd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看服务状态</span></span><br><span class="line">systemctl status ntpd</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2021-05/1121_3606-OmNJegO3G7D8fQOA.jpg" style="zoom:150%;" /> <h1 id="抓包信息"><a href="#抓包信息" class="headerlink" title="抓包信息"></a>抓包信息</h1><img src="https://nas.littlekang.xyz:9000/markdown/2021-05/1121_4339-NxTEWQl7bjoj62zR.jpg" style="zoom:150%;" /> <img src="https://nas.littlekang.xyz:9000/markdown/2021-05/1121_4751-CcFVPPovtOTD2cyA.jpg" style="zoom:150%;" /> <h1 id="ntp授时原理"><a href="#ntp授时原理" class="headerlink" title="ntp授时原理"></a>ntp授时原理</h1><img src="https://nas.littlekang.xyz:9000/markdown/2021-05/1121_5737-nHbl18LkYeso3Dho.jpg" style="zoom: 200%;" /> <img src="https://nas.littlekang.xyz:9000/markdown/2021-05/1122_0026-QGHAOvCSQ4BqK8PQ.jpg" style="zoom:200%;" /> <h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://www.cnblogs.com/Sungeek/p/10197345.html">Centos7安装搭建NTP服务器和NTP客户端同步时间</a><br><a href="http://aixperts.blogspot.com/2012/11/configuring-ntp-server-without-internet.html">Configuring an NTP server without internet access (locally)</a><br><a href="https://blog.csdn.net/hhcjb/article/details/84940823">NTP时钟同步原理及误差简析</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;配置文件：&lt;/p&gt;
&lt;img src=&quot;https://nas.littlekang.xyz:9000/markdown/2022-03/1715_5922-N4QnOp9iSuystxc8.jpg&quot; style=&quot;zoom:200%;&quot; /&gt; 




&lt;h1 id=&quot;安</summary>
      
    
    
    
    <category term="Linux相关" scheme="https://blog.littlekang.xyz/categories/Linux%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="linux" scheme="https://blog.littlekang.xyz/tags/linux/"/>
    
    <category term="ntp" scheme="https://blog.littlekang.xyz/tags/ntp/"/>
    
  </entry>
  
  <entry>
    <title>UDP组播_多播学习笔记</title>
    <link href="https://blog.littlekang.xyz/article/40025/"/>
    <id>https://blog.littlekang.xyz/article/40025/</id>
    <published>2021-02-27T07:10:50.000Z</published>
    <updated>2022-03-17T11:36:00.395Z</updated>
    
    <content type="html"><![CDATA[<p>什么是组播，组播与单播，组播与广播有什么差别？是初学者首先要搞清楚的问题。<br>我们知道单播、组播和广播都是IP报文网络传输的三种模式，它们的定义如下：</p><ul><li><p><strong>单播</strong>是主机间一对一的通讯模式，网络中的设备根据网络报文中包含的目的地址选择传输路径，将单播报文传送到指定的目的地，<strong>只对接收到的数据进行转发，不会进行复制</strong>。它能够针对每台主机及时的响应，现在的网页浏览全部都是采用单播模式。</p></li><li><p><strong>广播</strong>是主机间一对所有的通讯模式，设备会将报文发送到网络中的所有可能接收者。<strong>设备简单地将它收到的任何广播报文都复制并转发到除该报文到达的接口外的每个接</strong>口。广播处理流程简单，不用选择路径。</p></li><li><p><strong>组播</strong>是主机间一对多的通讯模式， 组播是一种允许一个或多个组播源发送同一报文到多个接收者的技术。<strong>组播源将一份报文发送到特定的组播地址，组播地址不同于单播地址，它并不属于特定某个主机，而是属于一组主机</strong>。一个组播地址表示一个群组，需要接收组播报文的接收者都加入这个群组。</p></li></ul><h1 id="点到多点场景传输方式选择"><a href="#点到多点场景传输方式选择" class="headerlink" title="点到多点场景传输方式选择"></a>点到多点场景传输方式选择</h1><h2 id="假定场景"><a href="#假定场景" class="headerlink" title="假定场景"></a>假定场景</h2><ul><li>网络中有用户A，用户B，用户C，用户D和用户E</li><li>只有用户A，用户B和用户C有流量需求，想接收数据源发送的报文</li></ul><p>现分别采用<strong>单播</strong>、<strong>组播</strong>、<strong>广播</strong>方式进行报文的传输：</p><h2 id="单播流量发送"><a href="#单播流量发送" class="headerlink" title="单播流量发送"></a>单播流量发送</h2><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2709_5327-aFOtpXPN9nWNiTbP.jpg" style="zoom:200%;" />采用单播传输方式后，要确保有流量需求的用户都能收到流量，**数据源需要发送三份流量，相应的网络中设备B也需要承载三份流量**。<h2 id="广播流量发送"><a href="#广播流量发送" class="headerlink" title="广播流量发送"></a>广播流量发送</h2><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2709_5410-fQYXv89kahWmYLjD.jpg" style="zoom:200%;" /> 采用广播传输方式后，**数据源仅发送一份流量**，有流量需求的用户可以收到流量，但是从图中可以看出，**因为广播的传输机制，无流量需求的用户D和用户E也收到了流量，存在流量的冗余**。<h2 id="组播流量发送"><a href="#组播流量发送" class="headerlink" title="组播流量发送"></a>组播流量发送</h2><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2709_5552-4B9P8qP1WPsnObw8.jpg" style="zoom:200%;" /> 采用组播传输方式后，**数据源仅发送一份流量**，有流量需求的用户就可以收到流量，而且**无流量需求的用户D和用户E也不会收到冗余的流量**。<h2 id="三种方式比较"><a href="#三种方式比较" class="headerlink" title="三种方式比较"></a>三种方式比较</h2><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2709_5947-mQTQG0QOWPwduGla.jpg" style="zoom:200%;" /> <h1 id="组播实现机制"><a href="#组播实现机制" class="headerlink" title="组播实现机制"></a>组播实现机制</h1><p>组播组网实现用户A，用户B和用户C能接收到数据源的流量，需要做如下部署：</p><ul><li><p>全网设备相连的接口都需要配置单播IP地址</p></li><li><p>全网要部署单播路由协议，确保数据源和用户A、用户B和用户C之间路由互通</p></li><li><p>全网部署组播PIM协议（PIM-SM或者PIM-DM），并配置相应的BSR和RP，图中配置设备B为RP和BSR。</p></li><li><p>用户A，用户B，用户C必须发送IGMP组加入报文，组加入报文中包含其需要加入的组IP地址225.1.1.1。</p></li></ul><p>数据源发送数据流，该数据流二层目的MAC地址是组播的MAC地址，IP报文的目的地址为225.1.1.1。</p><p><strong>组播实现机制总体来说就是接收者告诉一个中心节点</strong>（在组播协议里面称为RP），<strong>它需要哪些组地址的流量</strong>；<strong>RP需要被告之数据源</strong>（在组播场景中我们称之为组播源，它的特点是流量二层头中目的MAC地址是组播MAC地址，IP报层IP报文头目的地址是组播IP地址）在哪，数据源往哪些组地址发流。<strong>RP知道了接收方和发送方的所有信息后，就会根据需要把流量发送到特定位置</strong>（它发送的过程中建立了组播分发树）。</p><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2710_0445-6YUD9CfBOy72v0Qc.jpg" style="zoom:200%;" /> <h1 id="组播地址"><a href="#组播地址" class="headerlink" title="组播地址"></a>组播地址</h1><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2710_1952-Zvq5hI3EBwb8aZG2.jpg" style="zoom:200%;" /> <h1 id="使用iperf测试UDP组播"><a href="#使用iperf测试UDP组播" class="headerlink" title="使用iperf测试UDP组播"></a>使用iperf测试UDP组播</h1><ul><li><p>client</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -c 225.0.0.20 -u --ttl 5 -t 10</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2715_0530-PLMF5Z7XSzfmrhOc.jpg" style="zoom:200%;" /> </li><li><p>server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iperf -s -u -B 225.0.0.20 -i 1</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2715_0647-0QMUHA9DmxNAYqe3.jpg" style="zoom:200%;" /></li></ul><h1 id="Linux-UDP-组播编程"><a href="#Linux-UDP-组播编程" class="headerlink" title="Linux UDP 组播编程"></a>Linux UDP 组播编程</h1><h2 id="组播相关sockopt选项"><a href="#组播相关sockopt选项" class="headerlink" title="组播相关sockopt选项"></a>组播相关sockopt选项</h2><table><thead><tr><th>Flag</th><th>说明</th></tr></thead><tbody><tr><td><strong>IP_ADD_MEMBERSHIP</strong></td><td>加入到指定的多播组</td></tr><tr><td><strong>IP_DROP_MEMBERSHIP</strong></td><td>退出指定的多播组</td></tr><tr><td><strong>IP_MULTICAST_IF</strong></td><td>指定多播数据流从那个网络接口(interface)发出</td></tr><tr><td><strong>IP_MULTICAST_TTL</strong></td><td>设置发送多播数据的<strong>TTL</strong>值。默认为1，如果TTL等于0，将不会在其他任何子网(sub-network)传输，TTL大于1, 可分发到多个子网，每次经过一个路由，TTL减1</td></tr><tr><td><strong>IP_MULTICAST_LOOP</strong></td><td>设置是否将多播数据副本传送到发送主机</td></tr></tbody></table><h2 id="发送组播数据包"><a href="#发送组播数据包" class="headerlink" title="发送组播数据包"></a>发送组播数据包</h2><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2710_5128-G4BNR9xF4ePxwLhb.jpg"> </p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Send Multicast Datagram code example. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">localInterface</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">groupSock</span>;</span></span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="type">char</span> databuf[<span class="number">1024</span>] = <span class="string">&quot;Multicast test message lol!&quot;</span>;</span><br><span class="line"><span class="type">int</span> datalen = <span class="keyword">sizeof</span>(databuf);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UDP_MULTICAST_ADDR      <span class="string">&quot;226.1.1.1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UDP_LOCAL_ADDR          <span class="string">&quot;192.168.167.11&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UDP_MULTICAST_PORT      4321</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_MULTICAST_LOOP_EN    0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Create a datagram socket on which to send. */</span></span><br><span class="line">    sd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      perror(<span class="string">&quot;Opening datagram socket error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Opening the datagram socket...OK.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize the group sockaddr structure with a group address and port. */</span></span><br><span class="line">    <span class="built_in">memset</span>((<span class="type">char</span> *) &amp;groupSock, <span class="number">0</span>, <span class="keyword">sizeof</span>(groupSock));</span><br><span class="line">    groupSock.sin_family = AF_INET;</span><br><span class="line">    groupSock.sin_addr.s_addr = inet_addr(UDP_MULTICAST_ADDR);</span><br><span class="line">    groupSock.sin_port = htons(UDP_MULTICAST_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* setting loopback, to control wether you do not receive your own datagrams or not.*/</span></span><br><span class="line">    <span class="type">char</span> loopch = CONFIG_MULTICAST_LOOP_EN;</span><br><span class="line">    <span class="keyword">if</span>(setsockopt(sd, IPPROTO_IP, IP_MULTICAST_LOOP, (<span class="type">char</span> *)&amp;loopch, <span class="keyword">sizeof</span>(loopch)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Setting IP_MULTICAST_LOOP error&quot;</span>);</span><br><span class="line">        close(sd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Disabling the loopback...OK.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set local interface for outbound multicast datagrams. */</span></span><br><span class="line">    <span class="comment">/* The IP address specified must be associated with a local, */</span></span><br><span class="line">    <span class="comment">/* multicast capable interface. */</span></span><br><span class="line">    localInterface.s_addr = inet_addr(UDP_LOCAL_ADDR);</span><br><span class="line">    <span class="keyword">if</span>(setsockopt(sd, IPPROTO_IP, IP_MULTICAST_IF, (<span class="type">char</span> *)&amp;localInterface, <span class="keyword">sizeof</span>(localInterface)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Setting local interface error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Setting the local interface...OK\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Send a message to the multicast group specified by the groupSock sockaddr structure. */</span></span><br><span class="line">    <span class="keyword">if</span>(sendto(sd, databuf, datalen, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr*)&amp;groupSock, <span class="keyword">sizeof</span>(groupSock)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Sending datagram message error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sending datagram message...OK\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Try the re-read from the socket if the loopback is not disable*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_MULTICAST_LOOP_EN</span></span><br><span class="line">    <span class="built_in">memset</span>(databuf, <span class="number">0</span>, <span class="keyword">sizeof</span>(databuf));</span><br><span class="line">    <span class="keyword">if</span>(read(sd, databuf, datalen) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Reading datagram message error\n&quot;</span>);</span><br><span class="line">        close(sd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Reading datagram message from client...OK\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The message is: %s\n&quot;</span>, databuf);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接收组播数据包"><a href="#接收组播数据包" class="headerlink" title="接收组播数据包"></a>接收组播数据包</h2><h2 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h2><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2711_5542-J6ewn43aC6nDCw7g.jpg" style="zoom:200%;" /> <h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Receiver/client multicast Datagram example. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">localSock</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_mreq</span> <span class="title">group</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sd;</span><br><span class="line"><span class="type">int</span> datalen;</span><br><span class="line"><span class="type">char</span> databuf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG_ADDRESS_REUSER_EN    1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UDP_MULTICAST_ADDR      <span class="string">&quot;226.1.1.1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UDP_LOCAL_ADDR          <span class="string">&quot;192.168.166.51&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UDP_MULTICAST_PORT      4321</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Create a datagram socket on which to receive. */</span></span><br><span class="line">    sd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Opening datagram socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Opening datagram socket....OK.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Enable SO_REUSEADDR to allow multiple instances of this</span></span><br><span class="line"><span class="comment">     application to receive copies of the multicast datagrams. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_ADDRESS_REUSER_EN</span></span><br><span class="line">    <span class="type">int</span> reuse = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, (<span class="type">char</span> *)&amp;reuse, <span class="keyword">sizeof</span>(reuse)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Setting SO_REUSEADDR error&quot;</span>);</span><br><span class="line">        close(sd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Setting SO_REUSEADDR...OK.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Bind to the proper port number with the IP address */</span></span><br><span class="line">    <span class="comment">/* specified as INADDR_ANY. */</span></span><br><span class="line">    <span class="built_in">memset</span>((<span class="type">char</span> *) &amp;localSock, <span class="number">0</span>, <span class="keyword">sizeof</span>(localSock));</span><br><span class="line">    localSock.sin_family = AF_INET;</span><br><span class="line">    localSock.sin_port = htons(UDP_MULTICAST_PORT);</span><br><span class="line">    localSock.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bind(sd, (<span class="keyword">struct</span> sockaddr*)&amp;localSock, <span class="keyword">sizeof</span>(localSock))) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Binding datagram socket error&quot;</span>);</span><br><span class="line">        close(sd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Binding datagram socket...OK.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Join the multicast group 226.1.1.1 on the local 203.106.93.94 */</span></span><br><span class="line">    <span class="comment">/* interface. Note that this IP_ADD_MEMBERSHIP option must be */</span></span><br><span class="line">    <span class="comment">/* called for each local interface over which the multicast */</span></span><br><span class="line">    <span class="comment">/* datagrams are to be received. */</span></span><br><span class="line">    group.imr_multiaddr.s_addr = inet_addr(UDP_MULTICAST_ADDR);</span><br><span class="line">    group.imr_interface.s_addr = inet_addr(UDP_LOCAL_ADDR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(setsockopt(sd, IPPROTO_IP, IP_ADD_MEMBERSHIP, (<span class="type">char</span> *)&amp;group, <span class="keyword">sizeof</span>(group)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;Adding multicast group error&quot;</span>);</span><br><span class="line">        close(sd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Adding multicast group...OK.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Read from the socket. */</span></span><br><span class="line">    datalen = <span class="keyword">sizeof</span>(databuf);</span><br><span class="line">    <span class="keyword">if</span>(read(sd, databuf, datalen) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;Reading datagram message error&quot;</span>);</span><br><span class="line">        close(sd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Reading datagram message...OK.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The message from multicast server is: \&quot;%s\&quot;\n&quot;</span>, databuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组播应用"><a href="#组播应用" class="headerlink" title="组播应用"></a>组播应用</h1><h2 id="IPTV"><a href="#IPTV" class="headerlink" title="IPTV"></a>IPTV</h2><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/2710_1724-fLIYCScNopQWQDeV.jpg" style="zoom:200%;" /> <h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100105907">什么是组播</a><br><a href="https://www.zhihu.com/question/27233903">组播IP地址到底是谁的IP？？</a><br><a href="https://blog.csdn.net/qq_35883464/article/details/103741461?utm_medium=distribute.wap_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.wap_blog_relevant_pic&dist_request_id=d8fa1358-bb3f-42ee-a6aa-2dae844083cd&depth_1-utm_source=distribute.wap_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.wap_blog_relevant_pic">c&#x2F;c++：UDP（udp通信、广播、组播），本地套接字</a><br><a href="https://www.jianshu.com/p/8ccd0b99766f">局域网UDP组播与设备自动发现测试</a><br><a href="https://www.tenouk.com/Module41c.html">NETWORK PROGRAMMING LINUX SOCKET PART 13: MULTICAST</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是组播，组播与单播，组播与广播有什么差别？是初学者首先要搞清楚的问题。&lt;br&gt;我们知道单播、组播和广播都是IP报文网络传输的三种模式，它们的定义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;单播&lt;/strong&gt;是主机间一对一的通讯模式，网络中的设备根据网络报</summary>
      
    
    
    
    <category term="通信协议" scheme="https://blog.littlekang.xyz/categories/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="linux" scheme="https://blog.littlekang.xyz/tags/linux/"/>
    
    <category term="udp" scheme="https://blog.littlekang.xyz/tags/udp/"/>
    
  </entry>
  
  <entry>
    <title>CMake学习笔记</title>
    <link href="https://blog.littlekang.xyz/article/43493/"/>
    <id>https://blog.littlekang.xyz/article/43493/</id>
    <published>2021-02-17T03:02:08.000Z</published>
    <updated>2022-03-17T11:46:54.592Z</updated>
    
    <content type="html"><![CDATA[<p>什么是CMake?<br>你或许听过好几种 Make 工具，例如 <a href="https://www.hahack.com/wiki/tools-makefile.html">GNU Make</a> ，QT 的 <a href="http://qt-project.org/doc/qt-4.8/qmake-manual.html">qmake</a> ，微软的 <a href="http://msdn.microsoft.com/en-us/library/ms930369.aspx">MS nmake</a>，BSD Make（<a href="http://www.freebsd.org/doc/en/books/pmake/">pmake</a>），<a href="http://makepp.sourceforge.net/">Makepp</a>，等等。这些 Make 工具遵循着不同的规范和标准，所执行的 Makefile 格式也千差万别。这样就带来了一个严峻的问题：如果软件想跨平台，必须要保证能够在不同平台编译。而如果使用上面的 Make 工具，就得为每一种标准写一次 Makefile ，这将是一件让人抓狂的工作。<strong>CMake 就是针对上面问题所设计的工具：它首先允许开发者编写一种平台无关的 CMakeList.txt 文件来定制整个编译流程，然后再根据目标用户的平台进一步生成所需的本地化 Makefile 和工程文件</strong>，如 Unix 的 Makefile 或 Windows 的 Visual Studio 工程。从而做到“Write once, run everywhere”。显然，CMake 是一个比上述几种 make 更高级的编译配置工具。一些使用 CMake 作为项目架构系统的知名开源项目有 <a href="http://www.vtk.org/">VTK</a>、<a href="http://www.itk.org/">ITK</a>、<a href="http://kde.org/">KDE</a>、<a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/modules/core/doc/intro.html">OpenCV</a>、<a href="http://www.openscenegraph.org/">OSG</a> 等 <sup class="footnote-ref" style="box-sizing: border-box; font-size: 12.6px; line-height: 0; position: relative; vertical-align: baseline; top: -0.5em;"><a href="https://www.hahack.com/codes/cmake/#fn1">[1]</a></sup>。</p><p>在 linux 平台下使用 CMake 生成 Makefile 并编译的流程如下：</p><ol><li>编写 CMake 配置文件 CMakeLists.txt 。</li><li>执行命令 <code>cmake PATH</code> 或者 <code>ccmake PATH</code> 生成 Makefile（<code>ccmake</code> 和 <code>cmake</code> 的区别在于前者提供了一个交互式的界面）。其中， <code>PATH</code> 是 CMakeLists.txt 所在的目录。</li><li>使用 <code>make</code> 命令进行编译。</li></ol><p>本文将从实例入手，一步步讲解 CMake 的常见用法，文中所有的实例代码可以在<a href="https://github.com/wzpan/cmake-demo">这里</a>找到。如果你读完仍觉得意犹未尽，可以继续学习我在文章末尾提供的其他资源。</p><h1 id="简单实例-helloworld"><a href="#简单实例-helloworld" class="headerlink" title="简单实例-helloworld"></a>简单实例-helloworld</h1><ul><li>工程文件结构：</li></ul><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/1319_0944-SWdRVTzlfwfZGN4V.jpg" style="zoom: 200%;" /> <ul><li>src源码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CMakeLists</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake 最低版本号要求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(demo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_executable</span>(main main.c)</span><br></pre></td></tr></table></figure><ul><li>编译<br>创建build目录，以便将cmake生成文件与源代码分开；<br>在build目录下执行<code>cmake ../</code></li></ul><h1 id="CMake交叉编译"><a href="#CMake交叉编译" class="headerlink" title="CMake交叉编译"></a>CMake交叉编译</h1><p><strong>对于交叉编译，CMake并不知道目标系统是什么，所以需要设置一些CMake变量来告知CMak</strong>e</p><ul><li>CMAKE_SYSTEM_NAME：即目标系统名，这里是Linux</li><li>CMAKE_SYSTEM_PROCESSOR ：目标系统的处理器名</li></ul><p>对于工具链，则是通过下面2个变量来定位，</p><ul><li>CMAKE_C_COMPILER：C编译器的可执行文件名称</li><li>CMAKE_CXX_COMPILER：C++编译器的可执行文件名称</li></ul><p>这些变量可以在调用CMake时通过命令行传递，但是这种做法容易出错，而且用起来不方便，所以CMake提供了工具链文件的方式来传递这些变量信息</p><p>这里编译为openwrt mips架构：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#openwrt_linux_setup.cmake</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_SYSTEM_NAME Linux)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_SYSTEM_PROCESSOR mips)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(tools /opt/openwrt_mt7688_gcc-<span class="number">4.8</span>/gcc-<span class="number">4.8</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_COMPILER <span class="variable">$&#123;tools&#125;</span>/bin/mipsel-openwrt-linux-gcc)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_COMPILER <span class="variable">$&#123;tools&#125;</span>/bin/mipsel-openwrt-linux-g++)</span><br></pre></td></tr></table></figure><h1 id="交叉编译配置"><a href="#交叉编译配置" class="headerlink" title="交叉编译配置"></a>交叉编译配置</h1><p>CMake给交叉编译预留了一个很好的变量即<strong>CMAKE_TOOLCHAIN_FILE</strong>,它定义了一个文件的路径，这个文件即toolChain,里面set了一系列你需要改变的变量和属性，包括C_COMPILER,CXX_COMPILER,如果用Qt的话需要更改QT_QMAKE_EXECUTABLE以及如果用BOOST的话需要更改的BOOST_ROOT(具体查看相关Findxxx.cmake里面指定的路径)。CMake为了不让用户每次交叉编译都要重新输入这些命令，因此它带来toolChain机制，简而言之就是一个cmake脚本，内嵌了你需要改变以及需要set的所有交叉环境的设置。</p><p>这里面也牵扯了一些相关的变量设置,在这里简单介绍下几个比较重要的</p><p>1. <strong>CMAKE_SYSTEM_NAME</strong>: 即你目标机target所在的操作系统名称，比如ARM或者Linux你就需要写”Linux”, 如果Windows平台你就写”Windows”,如果你的嵌入式平台没有相关OS你即需要写成”Generic”, <strong>只有当CMAKE_SYSTEM_NAME这个变量被设置了，CMake才认为此时正在交叉编译</strong>，它会额外设置一个变量CMAKE_CROSSCOMPILING为TRUE.</p><p>2. <strong>CMAKE_C_COMPILER</strong>: 顾名思义，即C语言编译器，<strong>这里可以将变量设置成完整路径或者文件名</strong>，设置成完整路径有一个好处就是CMake会去这个路径下去寻找编译相关的其他工具比如linker,binutils等，如果你写的文件名带有arm-elf等等前缀，CMake会识别到并且去寻找相关的交叉编译器。</p><p>3. <strong>CMAKE_CXX_COMPILER</strong>: 同上，此时代表的是C++编译器。</p><p>4. <strong>CMAKE_FIND_ROOT_PATH</strong>: <strong>代表了一系列的相关文件夹路径的根路径的变更</strong>，比如你设置了&#x2F;opt&#x2F;arm&#x2F;,所有的Find_xxx.cmake都会优先根据这个路径下的&#x2F;usr&#x2F;lib,&#x2F;lib等进行查找，然后才会去你自己的&#x2F;usr&#x2F;lib和&#x2F;lib进行查找，如果你有一些库是不被包含在&#x2F;opt&#x2F;arm里面的，你也可以显示指定多个值给CMAKE_FIND_ROOT_PATH,比如<code>set(CMAKE_FIND_ROOT_PATH /opt/arm /opt/inst)</code></p><p>5.  <strong>CMAKE_FIND_ROOT_PATH_MODE_PROGRAM</strong>: 对FIND_PROGRAM()起作用，有三种取值，<strong>NEVER,ONLY,BOTH</strong>,第一个表示不在你CMAKE_FIND_ROOT_PATH下进行查找，第二个表示只在这个路径下查找，第三个表示先查找这个路径，再查找全局路径，对于这个变量来说，<strong>一般都是调用宿主机的程序，所以一般都设置成NEVER</strong></p><p>6. <strong>CMAKE_FIND_ROOT_PATH_MODE_LIBRARY</strong>: 对FIND_LIBRARY()起作用，表示在链接的时候的库的相关选项，<strong>因此这里需要设置成ONLY来保证我们的库是在交叉环境中找的</strong>.</p><p>7. <strong>CMAKE_FIND_ROOT_PATH_MODE_INCLUDE</strong>: 对FIND_PATH()和FIND_FILE()起作用，<strong>一般来说也是ONLY</strong>,如果你想改变，一般也是在相关的FIND命令中增加option来改变局部设置，有NO_CMAKE_FIND_ROOT_PATH,ONLY_CMAKE_FIND_ROOT_PATH,BOTH_CMAKE_FIND_ROOT_PATH</p><p>8. <strong>BOOST_ROOT</strong>： 对于需要boost库的用户来说，相关的boost库路径配置也需要设置，因此这里的路径即ARM下的boost路径，里面有include和lib。</p><p>9. <strong>QT_QMAKE_EXECUTABLE</strong>: 对于Qt用户来说，需要更改相关的qmake命令切换成嵌入式版本，因此这里需要指定成相应的qmake路径（指定到qmake本身）</p><h1 id="同一目录，多个源文件"><a href="#同一目录，多个源文件" class="headerlink" title="同一目录，多个源文件"></a>同一目录，多个源文件</h1><p><code>aux_source_directory</code> 命令，该命令会查找指定目录下的所有源文件，然后将结果存进指定变量名。其语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</span><br></pre></td></tr></table></figure><p>示例：<br><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/1322_3836-mzgMadNOWZqvuOiY.jpg" style="zoom:200%;" /> </p><h1 id="多个目录，多个源文件"><a href="#多个目录，多个源文件" class="headerlink" title="多个目录，多个源文件"></a>多个目录，多个源文件</h1><p>对于这种情况，需要分别在项目<strong>根目录和子目录目录里各编写一个 CMakeLists.txt</strong> 文件。为了方便，我们可以先将子目录里的文件编译成静态库再由 main 函数调用；</p><p>示例：<br><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/1322_4206-UAFiDDl6tzpNYGRq.jpg" style="zoom:200%;" /> </p><img src="https://nas.littlekang.xyz:9000/markdown/2021-02/1322_4336-xXV3JFlLStYyNXVy.jpg" style="zoom:200%;" /> <h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://www.hahack.com/codes/cmake/">CMake 入门实战</a><br><a href="https://blog.csdn.net/weicao1990/article/details/51149381">CMake交叉编译配置</a><br><a href="https://blog.csdn.net/whahu1989/article/details/104114515">使用CMake交叉编译Arm Linux程序</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是CMake?&lt;br&gt;你或许听过好几种 Make 工具，例如 &lt;a href=&quot;https://www.hahack.com/wiki/tools-makefile.html&quot;&gt;GNU Make&lt;/a&gt; ，QT 的 &lt;a href=&quot;http://qt-project.</summary>
      
    
    
    
    <category term="开发环境" scheme="https://blog.littlekang.xyz/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="cmake" scheme="https://blog.littlekang.xyz/tags/cmake/"/>
    
    <category term="makefile" scheme="https://blog.littlekang.xyz/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>C++如何导出dll</title>
    <link href="https://blog.littlekang.xyz/article/32140/"/>
    <id>https://blog.littlekang.xyz/article/32140/</id>
    <published>2020-09-28T12:42:39.000Z</published>
    <updated>2022-03-17T07:36:11.843Z</updated>
    
    <content type="html"><![CDATA[<p><strong>DLL 是一个包含可由多个程序同时使用的代码和数据的库</strong>。 例如，在 Windows 操作系统中，Comdlg32 DLL 执行与对话框有关的常见函数。 因此，每个程序都可以使用该 DLL 中包含的功能来实现“打开”对话框。 这有助于促进代码重用和内存的有效使用。</p><p>通过使用 DLL，程序可以实现模块化，由相对独立的组件组成。 例如，一个计帐程序可以按模块来销售。 可以在运行时将各个模块加载到主程序中（如果安装了相应模块）。 因为模块是彼此独立的，所以程序的加载速度更快，而且模块只在相应的功能被请求时才加载。<br><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2820_5117-ePfNriN6LshYu1SX.png" alt="" style="zoom:200%;" /></p><blockquote><p><a href="http://www.jyguagua.com/?p=3341">http://www.jyguagua.com/?p=3341</a></p></blockquote><h1 id="c-调用-lib的方法"><a href="#c-调用-lib的方法" class="headerlink" title="c++调用.lib的方法"></a>c++调用.lib的方法</h1><blockquote><p><a href="https://developer.aliyun.com/article/247052">https://developer.aliyun.com/article/247052</a></p></blockquote><h2 id="隐式加载"><a href="#隐式加载" class="headerlink" title="隐式加载"></a>隐式加载</h2><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2820_5318-2yZQmLjFLGJdgskw.png" alt="" style="zoom:200%;" /><h2 id="显式加载"><a href="#显式加载" class="headerlink" title="显式加载"></a>显式加载</h2><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2820_5259-fB9XN8S3AYpdOzbU.png" alt="" style="zoom:200%;" /><h1 id="函数的导出方式"><a href="#函数的导出方式" class="headerlink" title="函数的导出方式"></a>函数的导出方式</h1><h2 id="使用exten-“C”-C语言方式导出"><a href="#使用exten-“C”-C语言方式导出" class="headerlink" title="使用exten “C” C语言方式导出"></a>使用exten “C” C语言方式导出</h2><p><code>extern &quot;C&quot;</code>的作用是声明以c语言的格式编译当前代码：</p><ul><li><p>c语言没有函数重载</p></li><li><p>编译后的函数名若有参数以”xxx@数字”结尾，“数字”为所有参数占用的内存大小（4位对齐）；若无参数则结尾不含”@数字”</p></li><li><p>编译后的开头字符与调用约定__cdecl(无开头字符)、__**stdcall(以‘_’开头)<strong>、</strong>__fastcall(以‘@’开头)**有关</p></li></ul><p>网络上大部分资料都是使用这种方式。</p><h2 id="使用C-方式导出"><a href="#使用C-方式导出" class="headerlink" title="使用C++方式导出"></a>使用C++方式导出</h2><p>默认情况下，不加<code>extern &quot;C&quot;</code>,将使用C++方式导出；</p><h1 id="Demo示例"><a href="#Demo示例" class="headerlink" title="Demo示例"></a>Demo示例</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calc.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;calc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> CalcDemo;</span><br><span class="line"></span><br><span class="line">Calc::<span class="built_in">Calc</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Calc::~<span class="built_in">Calc</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Calc::add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a - b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//calc.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DLLEXPORTDEMO_EXPORTS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLLEXPORTDEMO_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLLEXPORTDEMO_API</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DLLEXPORTDEMO_API <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> CalcDemo &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DLLEXPORTDEMO_API</span> Calc &#123;</span><br><span class="line"><span class="built_in">Calc</span>();</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Calc</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="查看dll–使用Dependencies"><a href="#查看dll–使用Dependencies" class="headerlink" title="查看dll–使用Dependencies"></a>查看dll–使用Dependencies</h2><ul><li><p>Dependencies github地址：</p><blockquote><p><a href="https://github.com/lucasg/Dependencies">https://github.com/lucasg/Dependencies</a></p></blockquote></li><li><p>查看dll</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2822_0852-Qb9XbCctUoaIBYO6.png" alt="" style="zoom:200%;" /></li></ul><h1 id="C-显示调用dll"><a href="#C-显示调用dll" class="headerlink" title="C++ 显示调用dll"></a>C++ 显示调用dll</h1><ul><li>demo:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="type">run_sub_t</span>)</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="type">run_add_t</span>)</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    HINSTANCE hdll;</span><br><span class="line">    <span class="type">run_sub_t</span> runsub = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">run_add_t</span> runadd = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    hdll = <span class="built_in">LoadLibrary</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;dll_export_demo.dll&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == hdll) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;LoadLibrary fail.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">goto</span> exit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runsub = (<span class="type">run_sub_t</span>)<span class="built_in">GetProcAddress</span>(hdll, <span class="string">&quot;sub&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == runsub) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;get run sub process address fail.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">goto</span> exit;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sub(1, 2) = 1-3 = &quot;</span> &lt;&lt; <span class="built_in">runsub</span>(<span class="number">1</span>, <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    runadd = (<span class="type">run_add_t</span>)<span class="built_in">GetProcAddress</span>(hdll, <span class="string">&quot;add&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == runadd) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;get run add process address fail.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">goto</span> exit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(5, 6) = &quot;</span> &lt;&lt; <span class="built_in">runadd</span>(<span class="number">5</span>, <span class="number">6</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != hdll) &#123;</span><br><span class="line">        <span class="built_in">FreeLibrary</span>(hdll);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != hdll) &#123;</span><br><span class="line">        <span class="built_in">FreeLibrary</span>(hdll);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编译运行报错</li></ul><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2822_3340-so8G8jBur7XNQcZq.png" alt="" style="zoom:200%;" /><p>因为c++函数名导出方式，add()函数的函数名不是叫add，所有无法找到这个函数。</p><p>使用<strong>Dependencies</strong>打开dll文件，查看add()函数的c++导出函数名，修改重新编译运行：</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2822_3723-0TFMMmbItJoFJ8wI.png" alt="" style="zoom:200%;" /><p>修改之后，函数add()可以找到了，但是运行抛异常了；分析之后发现，是因为<strong>C++所有的成员函数中都有一个隐含的this指针</strong>，所以此处add应该有三个参数，直接传递两个参数，是非法传参。</p><p>解决方法：将add()函数定义为static函数：</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2822_5254-yxcY5SXhsROBjlkq.png" alt="" style="zoom:200%;" /><p>编译运行，再次报错：找不到add()函数：</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2822_5349-YpPgpH4GFLN6xDVY.png" alt="" style="zoom:200%;" /><p>因为修改了函数为static，所有c++导出的add()函数名发生了变化，修改后重新编译正常：</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2822_5542-O3RYIeZe8h7t3HhW.png" alt="" style="zoom:200%;" /><p>这样的函数名使用起来总是有些不方便，要使用和代码相同的常规的函数名，一般有两种方法：</p><ul><li>声明为<code>exten &quot;C&quot;</code>，表示使用C语言方式编译，但是对于一些函数需要c++特性，比如C++的变量类型，C++的重载等，这样就没法实现；</li><li>链接时使用def文件，指定函数的名字；</li></ul><h1 id="使用def文件生成常规名字的dll"><a href="#使用def文件生成常规名字的dll" class="headerlink" title="使用def文件生成常规名字的dll"></a>使用def文件生成常规名字的dll</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY  dll_export_demo</span><br><span class="line">EXPORTS</span><br><span class="line">add</span><br></pre></td></tr></table></figure><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2823_0551-UK20Igu9aDoXxzYD.png" alt="" style="zoom:200%;" /><p>vs链接器配置：</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2823_0720-DMKR98LNw5BPt0FK.png" alt="" style="zoom:200%;" /><p>重新编译，查看dll:</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2823_1015-TiJLbbzfSnV6ivqv.png" alt="" style="zoom:200%;" /><p>直接使用add函数名重新编译运行，工作正常：</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/2823_1203-clG8cGP0TpGatNpX.png" alt="" style="zoom:200%;" /><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://www.cnblogs.com/houkai/archive/2013/06/05/3119513.html">https://www.cnblogs.com/houkai/archive/2013/06/05/3119513.html</a></p><p><a href="https://blog.csdn.net/lwwl12/article/details/86655488">https://blog.csdn.net/lwwl12/article/details/86655488</a></p><p><a href="https://www.codeproject.com/Articles/28969/HowTo-Export-C-classes-from-a-DLL">https://www.codeproject.com/Articles/28969/HowTo-Export-C-classes-from-a-DLL</a></p><p><a href="https://docs.microsoft.com/en-us/cpp/error-messages/compiler-errors-1/fatal-error-c1010?view=vs-2019">https://docs.microsoft.com/en-us/cpp/error-messages/compiler-errors-1/fatal-error-c1010?view=vs-2019</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;DLL 是一个包含可由多个程序同时使用的代码和数据的库&lt;/strong&gt;。 例如，在 Windows 操作系统中，Comdlg32 DLL 执行与对话框有关的常见函数。 因此，每个程序都可以使用该 DLL 中包含的功能来实现“打开”对话框。 这有助于促进代码</summary>
      
    
    
    
    <category term="编程语言" scheme="https://blog.littlekang.xyz/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="c++" scheme="https://blog.littlekang.xyz/tags/c/"/>
    
    <category term="dll" scheme="https://blog.littlekang.xyz/tags/dll/"/>
    
  </entry>
  
  <entry>
    <title>omv新建用户ssh登录问题</title>
    <link href="https://blog.littlekang.xyz/article/35660/"/>
    <id>https://blog.littlekang.xyz/article/35660/</id>
    <published>2020-09-12T15:49:55.000Z</published>
    <updated>2022-03-17T11:35:32.634Z</updated>
    
    <content type="html"><![CDATA[<p>OMV新建用户遇到的一些问题，有关OMV的相关介绍，请查看:</p><p><a href="https://draapho.github.io/2021/03/31/2109-nuc-omv/">https://draapho.github.io/2021/03/31/2109-nuc-omv/</a></p><h1 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h1><ul><li><p>方法一：使用dash控制面板</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/1223_2907-zFEHAkhF4zrW3km2.jpg" style="zoom:200%;" /> </li><li><p>方法二；使用useradd命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /bin/bash pub</span><br></pre></td></tr></table></figure></li></ul><h1 id="bash和profile相关知识"><a href="#bash和profile相关知识" class="headerlink" title="bash和profile相关知识"></a>bash和profile相关知识</h1><ul><li><p>引用地址：</p><blockquote><p><a href="https://wido.me/sunteya/understand-bashrc-and-profile">https://wido.me/sunteya/understand-bashrc-and-profile</a></p><p><a href="https://www.jianshu.com/p/c4946024b946">https://www.jianshu.com/p/c4946024b946</a></p></blockquote></li><li><p>login shell 和 no login shell</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/1223_3347-kkjuPPBJEw17jWnL.jpg" style="zoom:200%;" /> </li><li><p>bash和profile的区别<br><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/1223_3549-iAkr3fiYRh8gCKbJ.jpg"></p></li></ul><h1 id="拷贝root用户配置文件"><a href="#拷贝root用户配置文件" class="headerlink" title="拷贝root用户配置文件"></a>拷贝root用户配置文件</h1><ul><li><p>root ssh登录拷贝</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp /root/.bashrc /home/xxx/</span><br><span class="line">cp /root/.profile /home/xxx/</span><br><span class="line">chown xxx .bashrc .profile</span><br><span class="line">chgrp xxx .bashrc .profile</span><br></pre></td></tr></table></figure></li><li><p>注意：<code>.profile</code>文件中配置如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~/.profile: executed by Bourne-compatible login shells.</span></span><br><span class="line">if [ &quot;$BASH&quot; ]; then</span><br><span class="line">  if [ -f ~/.bashrc ]; then</span><br><span class="line">    . ~/.bashrc</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line">mesg n || true</span><br></pre></td></tr></table></figure><p>这个脚本中的 <code>$BASH</code>判断用户使用的shell是否是bash shell,所以如果创建时没有选对，可以通过<code>/etc/passwd</code>修改</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/1223_4100-DJwRk8Jhq8dmBY3M.jpg" style="zoom:200%;" /></li></ul><h1 id="关于新建用户不能shell登录问题"><a href="#关于新建用户不能shell登录问题" class="headerlink" title="关于新建用户不能shell登录问题"></a>关于新建用户不能shell登录问题</h1><ul><li><p>原因：sshd配置文件中对可登录的user group做了限定<br>&#x2F;etc&#x2F;ssh&#x2F;sshd_config中：</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/1223_4624-iVQ2NTr0Thy8LQWv.jpg" style="zoom:200%;" /> </li><li><p>解决方法：修改用户所在组，将用户添加到ssh组； 或修改sshd_config，允许新user group;</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-09/1223_4403-3TF0NCMtNCuecyNE.jpg" style="zoom:200%;" /></li></ul><p>2020-09-12 23:46:35 星期六</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OMV新建用户遇到的一些问题，有关OMV的相关介绍，请查看:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://draapho.github.io/2021/03/31/2109-nuc-omv/&quot;&gt;https://draapho.github.io/2021/03/31/2</summary>
      
    
    
    
    <category term="软件工具" scheme="https://blog.littlekang.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="nas" scheme="https://blog.littlekang.xyz/tags/nas/"/>
    
    <category term="omv" scheme="https://blog.littlekang.xyz/tags/omv/"/>
    
    <category term="ssh" scheme="https://blog.littlekang.xyz/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>omv+minio+picuploader图床搭建</title>
    <link href="https://blog.littlekang.xyz/article/60761/"/>
    <id>https://blog.littlekang.xyz/article/60761/</id>
    <published>2020-08-28T14:57:34.000Z</published>
    <updated>2022-03-17T12:13:22.407Z</updated>
    
    <content type="html"><![CDATA[<p>一直想自己搭建一个图床，数据放在自己这里才是最安全的；<br>自从咸鱼淘了一个矿难留下来的板子，根据网上的教程搭建了nas，<br>然后在网上找到了这个方案，有一些些繁琐，搭建好后使用Markdown还是很方便。</p><span id="more"></span><h1 id="OMV-中配置MinIO服务端"><a href="#OMV-中配置MinIO服务端" class="headerlink" title="OMV 中配置MinIO服务端"></a>OMV 中配置MinIO服务端</h1><h2 id="MinIO简介"><a href="#MinIO简介" class="headerlink" title="MinIO简介"></a>MinIO简介</h2><p><strong>MinIO</strong> 是一个基于Apache License v2.0<strong>开源协议的对象存储服务</strong>。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p><p>MinIO是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p><blockquote><p><a href="https://docs.min.io/cn/minio-quickstart-guide.html">https://docs.min.io/cn/minio-quickstart-guide.html</a></p></blockquote><h2 id="本文使用环境"><a href="#本文使用环境" class="headerlink" title="本文使用环境"></a>本文使用环境</h2><ul><li>联想粒子云</li><li>Armbian Stretch with Linux 5.4.2-rockchip64</li><li>OMV</li><li>Docker</li></ul><h2 id="Docker中安装部署MinIO-Server"><a href="#Docker中安装部署MinIO-Server" class="headerlink" title="Docker中安装部署MinIO Server"></a>Docker中安装部署MinIO Server</h2><h3 id="minio安装"><a href="#minio安装" class="headerlink" title="minio安装"></a>minio安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio:RELEASE.2020-08-16T18-39-38Z-arm64</span><br></pre></td></tr></table></figure><h3 id="Docker中部署minio"><a href="#Docker中部署minio" class="headerlink" title="Docker中部署minio"></a>Docker中部署minio</h3><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2900_2751-KB65bR90UA52zeDu.png"   style="zoom:150%;" /><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2020-08-29-00-22-50-M3bEQvHUS6bSgVOX.png" style="zoom: 200%;" /><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2901_2436-l8cEhuSGB6zB5zI6.png"   style="zoom: 200%;" /><h3 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h3><blockquote><p><a href="https://www.hfge.net/privatecloud/typora-minio.html">https://www.hfge.net/privatecloud/typora-minio.html</a><br><a href="https://docs.min.io/docs/minio-docker-quickstart-guide">https://docs.min.io/docs/minio-docker-quickstart-guide</a></p></blockquote><h2 id="MinIO-Server配置"><a href="#MinIO-Server配置" class="headerlink" title="MinIO Server配置"></a>MinIO Server配置</h2><p>你可以通过 <code>http://NAS的IP:9000</code> 访问到minIO的登录页面，默认账号 <code>minioadmin</code> ， <code>minioadmin</code> </p><ul><li>新建仓库， 修改权限为public可读可写：</li></ul><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2902_1221-3yEXiciEibldUkhM.png" style="zoom:150%;" /><ul><li><p>检查修改access key</p><p>在映射文件夹下：<code>xxx/data/.minio.sys/config/config.json</code></p><p>检查修改：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;access_key&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adminabcdefg&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;secret_key&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ABCDEFG&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="PicUploader环境配置"><a href="#PicUploader环境配置" class="headerlink" title="PicUploader环境配置"></a>PicUploader环境配置</h1><h2 id="PicUploader简介"><a href="#PicUploader简介" class="headerlink" title="PicUploader简介"></a>PicUploader简介</h2><blockquote><p><a href="https://github.com/xiebruce/PicUploader">https://github.com/xiebruce/PicUploader</a></p></blockquote><p><strong>PicUploader</strong> 是一个用php编写的图床工具，它能帮助你快速上传你的图片到云图床，并自动返回Markdown格式链接到剪贴板。配置完成后，要获取一个可用于markdown的图片外链只需要：</p><ul><li><strong>方式一：</strong> 右击电脑本地任意格式文件→点击<code>你的自定义上传菜单</code>→系统通知文件上传成功→到Markdown编辑器中粘贴！</li><li><strong>方式二：</strong> 截图并点击复制到剪贴板→按快捷键→系统通知图片上传成功→到Markdown编辑器中粘贴！</li><li><strong>方式三：</strong> 右击网页中的图片→点击<code>复制图片</code>→按上传快捷键→系统弹出上传成功通知→到Markdown编辑器中粘贴！</li><li><strong>方式四：</strong> 使用网页版上传，包括拖放上传(支持多文件)、复制本地图片文件后粘贴上传、截图后粘贴上传、复制网页上的图片后粘贴上传、点击上传按钮选择图片后上传(支持多文件)。</li></ul><h2 id="PhpStudy环境安装"><a href="#PhpStudy环境安装" class="headerlink" title="PhpStudy环境安装"></a>PhpStudy环境安装</h2><blockquote><p><a href="https://www.xp.cn/">https://www.xp.cn/</a></p></blockquote><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2901_5800-DlaMd4axuawtdsTB.png" style="zoom:150%;" /><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2901_5906-bgCE0sNtn9EyWwUs.png" style="zoom:150%;" /><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2901_5947-0KzwZN7RPAsApuhb.png" style="zoom:150%;" /><p>修改网站首页为：</p><p><code>index dashboard.php; try_files $uri $uri/ index.php$is_args$args</code></p><p>完整vhost配置文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">        listen        <span class="number">80</span>;</span><br><span class="line">        server_name  dash.picuploader.com;</span><br><span class="line">        root   <span class="string">&quot;D:/phpstudy_pro/WWW/PicUploader&quot;</span>;</span><br><span class="line">        location / <span class="punctuation">&#123;</span></span><br><span class="line">            index index dashboard.php; try_files $uri $uri/ index.php$is_args$args;</span><br><span class="line">            error_page <span class="number">400</span> /error/<span class="number">400.</span>html;</span><br><span class="line">            error_page <span class="number">403</span> /error/<span class="number">403.</span>html;</span><br><span class="line">            error_page <span class="number">404</span> /error/<span class="number">404.</span>html;</span><br><span class="line">            error_page <span class="number">500</span> /error/<span class="number">500.</span>html;</span><br><span class="line">            error_page <span class="number">501</span> /error/<span class="number">501.</span>html;</span><br><span class="line">            error_page <span class="number">502</span> /error/<span class="number">502.</span>html;</span><br><span class="line">            error_page <span class="number">503</span> /error/<span class="number">503.</span>html;</span><br><span class="line">            error_page <span class="number">504</span> /error/<span class="number">504.</span>html;</span><br><span class="line">            error_page <span class="number">505</span> /error/<span class="number">505.</span>html;</span><br><span class="line">            error_page <span class="number">506</span> /error/<span class="number">506.</span>html;</span><br><span class="line">            error_page <span class="number">507</span> /error/<span class="number">507.</span>html;</span><br><span class="line">            error_page <span class="number">509</span> /error/<span class="number">509.</span>html;</span><br><span class="line">            error_page <span class="number">510</span> /error/<span class="number">510.</span>html;</span><br><span class="line">            include D<span class="punctuation">:</span>/phpstudy_pro/WWW/PicUploader/nginx.htaccess;</span><br><span class="line">            autoindex  off;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        location ~ \.php(.*)$ <span class="punctuation">&#123;</span></span><br><span class="line">            fastcgi_pass   <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="punctuation">:</span><span class="number">9000</span>;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            fastcgi_param  PATH_INFO  $fastcgi_path_info;</span><br><span class="line">            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="PicUploader本地部署"><a href="#PicUploader本地部署" class="headerlink" title="PicUploader本地部署"></a>PicUploader本地部署</h2><ul><li><p>拉取源码至<code>x:\phpstudy_pro\WWW</code>目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/xiebruce/PicUploader.git</span><br></pre></td></tr></table></figure></li><li><p>修改host文件：</p><p><code>127.0.0.1       dash.picuploader.com</code></p></li><li><p>通过<code>ash.picuploader.com</code>访问控制台：</p><p>通用配置：</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2902_0729-OMtJQZre40HNF4Ww.png" style="zoom:150%;" /><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2902_5009-oT0fWVTOe7cgRnkb.png" style="zoom:150%;" /><p>MinIO配置：</p><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2902_1132-11WZhj0OTJi22M0p.png" style="zoom:150%;" /></li></ul><h2 id="windows右键菜单上传配置"><a href="#windows右键菜单上传配置" class="headerlink" title="windows右键菜单上传配置"></a>windows右键菜单上传配置</h2><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2903_2001-G0qnuO1vFBI8kl2S.png" style="zoom: 200%;" /><h2 id="windows快捷键上传"><a href="#windows快捷键上传" class="headerlink" title="windows快捷键上传"></a>windows快捷键上传</h2><p>使用winhostkey:</p><p><a href="https://directedge.us/content/winhotkey">https://directedge.us/content/winhotkey</a></p><ul><li>When I press these keys: 勾选<code>Alt</code>和<code>Ctrl</code></li><li>Along with the key: <code>U</code>,这一步跟前一步加起来表示把快捷键设置为<code>Ctrl+Alt+U</code></li><li>点击右下角的<code>Advanced...</code></li><li>Launch which application: <code>D:\phpstudy_pro\Extensions\php\php7.3.4nts\php.exe</code></li><li>Provide application parameters here: 固定填<code>index.php --type=alfred</code></li><li>Start the application at this folder: <code>D:\phpstudy_pro\WWW\PicUploader</code></li><li>Display the window: <code>Minimized</code></li></ul><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2902_2454-YCT95YOgG8PRBS87.png" style="zoom:150%;" /><h1 id="Typora协同工作"><a href="#Typora协同工作" class="headerlink" title="Typora协同工作"></a>Typora协同工作</h1><img src="https://nas.littlekang.xyz:9000/markdown/2020-08/2902_2635-l9CExv5vtBHP3W9z.png" style="zoom:150%;" /><p>自定义命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\phpstudy_pro\Extensions\php\php7.3.4nts\php.exe D:\phpstudy_pro\WWW\PicUploader\index.php --type=typora</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直想自己搭建一个图床，数据放在自己这里才是最安全的；&lt;br&gt;自从咸鱼淘了一个矿难留下来的板子，根据网上的教程搭建了nas，&lt;br&gt;然后在网上找到了这个方案，有一些些繁琐，搭建好后使用Markdown还是很方便。&lt;/p&gt;</summary>
    
    
    
    <category term="软件工具" scheme="https://blog.littlekang.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="minio" scheme="https://blog.littlekang.xyz/tags/minio/"/>
    
    <category term="nas" scheme="https://blog.littlekang.xyz/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>SQLite学习笔记</title>
    <link href="https://blog.littlekang.xyz/article/4223/"/>
    <id>https://blog.littlekang.xyz/article/4223/</id>
    <published>2020-04-10T01:56:52.000Z</published>
    <updated>2022-03-17T11:43:33.378Z</updated>
    
    <content type="html"><![CDATA[<p>SQLite学习笔记，主要是语法相关，主要来源于菜鸟教程：</p><p><a href="https://www.runoob.com/sqlite/sqlite-tutorial.html">https://www.runoob.com/sqlite/sqlite-tutorial.html</a></p><span id="more"></span><h1 id="数据库基础概念"><a href="#数据库基础概念" class="headerlink" title="数据库基础概念"></a>数据库基础概念</h1><h2 id="数据库的模型"><a href="#数据库的模型" class="headerlink" title="数据库的模型"></a>数据库的模型</h2><ul><li>层次模型</li><li>网状模型</li><li>关系模型</li><li>面向对象模型</li><li>半结构化模型</li></ul><p>由于关系模型在很长一段时间内成为主流的数据模型，所以我们也习惯性将数据库类型分为两类，<strong>关系型数据库和非关系型数据库</strong>。</p><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>这是我们目前至今主流的数据库类型，其对应的数据存储模型就是关系型模型，数据以表格形式存储，字段关联数据。</p><p><strong>二维表结构是非常贴近逻辑世界的一个概念，它更容易理解，这是关系型数据库能够成为主流的其中一个重要原因。</strong>通过 SQL 进行表与表之间的联接查询非常的方便自然。</p><p>缺点也是很显而易见的，海量数据下，对一张表的查询会显得很力不从心，就是因为数据的存储不具备特殊的数据结构，例如有些非关系型数据库的数据存储结构是类似树的结构，就使得查询上具有天然的优势。</p><p>所以个人认为，虽然现在是关系型数据库的天下，但相信以后会出现一些优秀的非关系型数据库取代传统的关系型数据库。因为以后必然是大数据的时代，那么海量数据下，传统的关系型数据的效率问题就会被逐渐放大。</p><h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><p><strong>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。</strong></p><p>索引分为：聚集索引、非聚集索引、唯一索引等。<br>一张表可以有多个唯一索引和非聚集索引，但最多只能有一个聚集索引。 - 索引可以包含多列。<br>合理的创建索引能够提升查询语句的执行效率，但降低了新增、删除操作的速度，同时也会消耗一定的数据库物理空间。</p><h2 id="如何描述多对多的关系"><a href="#如何描述多对多的关系" class="headerlink" title="如何描述多对多的关系"></a>如何描述多对多的关系</h2><p><strong>系型数据库中描述多对多的关系,需要建立第三张数据表。</strong><br>比如学生选课,需要在学生信息表和课程信息表的基础上,再建立选课信息表,该表中存放学生Id和课程Id。</p><h2 id="内联接、左外联接、右外联接"><a href="#内联接、左外联接、右外联接" class="headerlink" title="内联接、左外联接、右外联接"></a>内联接、左外联接、右外联接</h2><ul><li><strong>(Inner Join）</strong>：匹配2张表中相关联的记录。</li><li><strong>(Left Outer Join）</strong>：除了匹配2张表中相关联的记录外，还会匹配左表中剩余的记录，右表中未匹配到的字段用NULL表示。</li><li><strong>(Right Outer Join）</strong>：除了匹配2张表中相关联的记录外，还会匹配右表中剩余的记录，左表中未匹配到的字段用NULL表示。在判定左表和右表时，要根据表名出现在Outer Join的左右位置关系。</li></ul><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401230828.png" style="zoom: 200%;" /><ul><li><p><strong>约定</strong></p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401230852.png" style="zoom: 200%;" /></li><li><p><strong>INNER JOIN 内联查询</strong></p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401230916.png" style="zoom: 200%;" />示例：<img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401230934.png" style="zoom: 200%;" /></li><li><p><strong>LIFT JOIN 左连接查询</strong></p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401230957.png" style="zoom: 200%;" />示例：<img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231014.png" style="zoom:200%;" /></li><li><p><strong>RIGHT JOIN 右连接查询</strong></p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231041.png" style="zoom: 200%;" />示例：(sqlite 不支持right join & full join)<img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231105.png" style="zoom:200%;" /></li><li><p>**CROSS JOIN **</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231129.png" style="zoom: 200%;" />示例：<img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231153.png" style="zoom:200%;" /></li></ul><blockquote><p><a href="https://zhuanlan.zhihu.com/p/29234064">https://zhuanlan.zhihu.com/p/29234064</a></p></blockquote><h2 id="sql语句中join-on和where"><a href="#sql语句中join-on和where" class="headerlink" title="sql语句中join on和where"></a>sql语句中join on和where</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231215.png" style="zoom:200%;" />![](https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231243.png)<blockquote><p><a href="https://my.oschina.net/jun24bryant/blog/787375">https://my.oschina.net/jun24bryant/blog/787375</a></p></blockquote><h1 id="SQLite简介"><a href="#SQLite简介" class="headerlink" title="SQLite简介"></a>SQLite简介</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323094302.png" style="zoom:200%;" /><h1 id="为什么要用SQLite"><a href="#为什么要用SQLite" class="headerlink" title="为什么要用SQLite"></a>为什么要用SQLite</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323094401.png" style="zoom:200%;" /><h1 id="SQLite架构"><a href="#SQLite架构" class="headerlink" title="SQLite架构"></a>SQLite架构</h1><p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200409000554.png"></p><h1 id="SQLite安装"><a href="#SQLite安装" class="headerlink" title="SQLite安装"></a>SQLite安装</h1><p>目前，几乎所有版本的 Linux 操作系统都附带 SQLite。所以，只要使用下面的命令来检查您的机器上是否已经安装了 SQLite。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlite3</span><br><span class="line">SQLite version 3.7.15.2  2013-01-09  11:53:05  Enter  &quot;.help&quot;  for instructions Enter SQL statements terminated with a &quot;;&quot;</span><br><span class="line">sqlite</span><br></pre></td></tr></table></figure><p>如果没有看到上面的结果，那么就意味着没有在 Linux 机器上安装 SQLite。</p><h2 id="SQLite下载地址"><a href="#SQLite下载地址" class="headerlink" title="SQLite下载地址"></a>SQLite下载地址</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323094705.png" style="zoom:200%;" /><blockquote><p><a href="http://www.sqlite.org/download.html">http://www.sqlite.org/download.html</a></p></blockquote><h2 id="Linux下通过源码安装"><a href="#Linux下通过源码安装" class="headerlink" title="Linux下通过源码安装"></a>Linux下通过源码安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar xvzf sqlite-autoconf-3310100.tar.gz</span><br><span class="line">cd sqlite-autoconf-3310100</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h2><p>下载：<br><a href="https://www.sqlite.org/2020/sqlite-dll-win64-x64-3310100.zip">sqlite-dll-win64-x64-3310100.zip</a><br><a href="https://www.sqlite.org/2020/sqlite-tools-win32-x86-3310100.zip">sqlite-tools-win32-x86-3310100.zip</a></p><p>解压至同一目录下，并添加至环境变量<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323095137.png" style="zoom:200%;" /></p><h1 id="DB-Browser-for-SQLite"><a href="#DB-Browser-for-SQLite" class="headerlink" title="DB Browser for SQLite"></a>DB Browser for SQLite</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323095823.png" style="zoom: 200%;" /><p>（1）项目地址：<a href="http://sqlitebrowser.org/">http://sqlitebrowser.org/</a><br>（2）DB Browser for SQLite 是一个高品质，可视化，开放源码的工具。用于创建，设计和编辑 SQLite 兼容的数据库文件。<br>（3）它适用于希望创建数据库，检索和编辑数据的用户和开发人员。它采用了熟悉的电子表格一样的界面，你不需要学习复杂的 SQL 命令。<br>（4）支持各种操作系统：Windows、MacOS、Linux</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>（1）创建数据库文件<br>（2）创建、定义、修改和删除表<br>（3）创建、定义和删除索引<br>（4）浏览、编辑、添加和删除记录<br>（5）搜索记录<br>（6）导入和导出为文本记录<br>（7）将表导出成 CSV 文件，或从 CSV 文件导入表<br>（8）将表导出成数据库存储文件，或从数据库存储文件导入表<br>（9）SQL 查询以及错误检查<br>（10）检查 SQL 命令的错误日志</p><blockquote><p><a href="https://www.hangge.com/blog/cache/detail_1375.html">https://www.hangge.com/blog/cache/detail_1375.html</a></p></blockquote><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><blockquote><p><a href="https://sqlitebrowser.org/dl/">https://sqlitebrowser.org/dl/</a></p></blockquote><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323114320.png" style="zoom:200%;" /><h1 id="SQLite命令"><a href="#SQLite命令" class="headerlink" title="SQLite命令"></a>SQLite命令</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200407235117.png" style="zoom:200%;" /><h1 id="SQLite常用命令"><a href="#SQLite常用命令" class="headerlink" title="SQLite常用命令"></a>SQLite常用命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#查看命令清单</span><br><span class="line">.help</span><br><span class="line"></span><br><span class="line">#退出</span><br><span class="line">.quit</span><br><span class="line">.exit</span><br><span class="line"></span><br><span class="line">#开启/关闭头部信息</span><br><span class="line">.header ON | OFF</span><br><span class="line"></span><br><span class="line">#显示各种设置的当前值</span><br><span class="line">.show</span><br><span class="line"></span><br><span class="line">#设置输出模式</span><br><span class="line">.mode MODE</span><br><span class="line">#MODE可以是:</span><br><span class="line">   csv 逗号分隔符</span><br><span class="line">   column 左对齐的列</span><br><span class="line">   html，html的&lt;table&gt;代码</span><br><span class="line">   intert，TABLE表的SQL插入语句</span><br><span class="line">   line, 每行一个</span><br><span class="line">   list, 由 .separator 字符串分隔的值</span><br><span class="line">   table, 由 Tab 分隔的值</span><br><span class="line">   tcl, TCL列</span><br></pre></td></tr></table></figure><h1 id="SQLite语法"><a href="#SQLite语法" class="headerlink" title="SQLite语法"></a>SQLite语法</h1><h2 id="大小写敏感性"><a href="#大小写敏感性" class="headerlink" title="大小写敏感性"></a>大小写敏感性</h2><p>有个重要的点值得注意，SQLite 是<strong>不区分大小写</strong>的，但也有一些命令是大小写敏感的，比如 <strong>GLOB</strong> 和 <strong>glob</strong> 在 SQLite 的语句中有不同的含义。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>SQLite 注释是附加的注释，可以在 SQLite 代码中添加注释以增加其可读性，他们可以出现在任何空白处，包括在表达式内和其他 SQL 语句的中间，但它们不能嵌套。</p><p>SQL 注释以两个连续的 “-“ 字符（ASCII 0x2d）开始，并扩展至下一个换行符（ASCII 0x0a）或直到输入结束，以先到者为准</p><p>您也可以使用 C 风格的注释，以 “&#x2F;<em>“ 开始，并扩展至下一个 “</em>&#x2F;“ 字符对或直到输入结束，以先到者为准。SQLite的注释可以跨越多行。</p><p><code>sqlite&gt;.help --  这是一个简单的注释</code></p><h1 id="SQLite-存储类"><a href="#SQLite-存储类" class="headerlink" title="SQLite 存储类"></a>SQLite 存储类</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323163449.png" style="zoom:200%;" /><h1 id="SQLite常用命令行操作"><a href="#SQLite常用命令行操作" class="headerlink" title="SQLite常用命令行操作"></a>SQLite常用命令行操作</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建</span></span><br><span class="line">sqlite3 test.db</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看</span></span><br><span class="line"><span class="meta prompt_">sqlite&gt; </span><span class="language-bash">.databases</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导出数据库内容到文本文件</span></span><br><span class="line">sqlite3 test.db .dump &gt;testdb.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从文本文件恢复</span></span><br><span class="line">sqlite3 testdb.db &lt; testdb.sql</span><br></pre></td></tr></table></figure><h2 id="附加数据库"><a href="#附加数据库" class="headerlink" title="附加数据库"></a>附加数据库</h2><p>假设这样一种情况，当在同一时间有多个数据库可用，您想使用其中的任何一个。SQLite 的 <strong>ATTACH DATABASE</strong> 语句是用来选择一个特定的数据库，使用该命令后，所有的 SQLite 语句将在附加的数据库下执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ATTACH DATABASE &#x27;test.db&#x27; AS &#x27;test&#x27;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323170638.png" style="zoom:200%;" /><h2 id="分离数据库"><a href="#分离数据库" class="headerlink" title="分离数据库"></a>分离数据库</h2><p>SQLite的 <strong>DETACH DTABASE</strong> 语句是用来把命名数据库从一个数据库连接分离和游离出来，连接是之前使用 ATTACH 语句附加的。如果同一个数据库文件已经被附加上多个别名，DETACH 命令将只断开给定名称的连接，而其余的仍然有效。您无法分离 <strong>main</strong> 或 <strong>temp</strong> 数据库。</p><blockquote><p>如果数据库是在内存中或者是临时数据库，则该数据库将被摧毁，且内容将会丢失。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DETACH DATABASE &#x27;testtest&#x27;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323171123.png" style="zoom:200%;" /><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>SQLite 的 <strong>CREATE TABLE</strong> 语句用于在任何给定的数据库创建一个新表。创建基本表，涉及到命名表、定义列及每一列的数据类型。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">sqlite&gt; </span><span class="language-bash">CREATE TABLE COMPANY(</span></span><br><span class="line">   ID INT PRIMARY KEY     NOT NULL,</span><br><span class="line">   NAME           TEXT    NOT NULL,</span><br><span class="line">   AGE            INT     NOT NULL,</span><br><span class="line">   ADDRESS        CHAR(50),</span><br><span class="line">   SALARY         REAL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>SQLite 的 <strong>DROP TABLE</strong> 语句用来删除表定义及其所有相关数据、索引、触发器、约束和该表的权限规范。</p><blockquote><p>使用此命令时要特别注意，因为一旦一个表被删除，表中所有信息也将永远丢失。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">确认表已经存在</span></span><br><span class="line"><span class="meta prompt_">sqlite&gt;</span><span class="language-bash">.tables</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除company表</span></span><br><span class="line"><span class="meta prompt_">sqlite&gt;</span><span class="language-bash">DROP TABLE COMPANY</span></span><br></pre></td></tr></table></figure><h2 id="insert语句"><a href="#insert语句" class="headerlink" title="insert语句"></a>insert语句</h2><p>SQLite 的 <strong>INSERT INTO</strong> 语句用于向数据库的某个表中添加新的数据行。<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323180657.png" style="zoom: 200%;" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">向company表中添加内容</span></span><br><span class="line">INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)</span><br><span class="line">VALUES (1, &#x27;Paul&#x27;, 32, &#x27;California&#x27;, 20000.00 );</span><br><span class="line"></span><br><span class="line">INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)</span><br><span class="line">VALUES (2, &#x27;Allen&#x27;, 25, &#x27;Texas&#x27;, 15000.00 );</span><br></pre></td></tr></table></figure><h2 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h2><p>SQLite 的 <strong>SELECT</strong> 语句用于从 SQLite 数据库表中获取数据，以结果表的形式返回数据。这些结果表也被称为结果集。<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323180918.png" style="zoom:200%;" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取company <span class="built_in">id</span> 和 name字段</span></span><br><span class="line"><span class="meta prompt_">sqlite&gt; </span><span class="language-bash">SELECT <span class="built_in">id</span>, name FROM COMPANY;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取company表中所有字段</span></span><br><span class="line"><span class="meta prompt_">sqlite&gt; </span><span class="language-bash">SELECT * FROM COMPANY;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置输出列的宽度</span></span><br><span class="line"><span class="meta prompt_">sqlite&gt; </span><span class="language-bash">.width 10,20,20</span></span><br></pre></td></tr></table></figure><h1 id="SQLite运算符"><a href="#SQLite运算符" class="headerlink" title="SQLite运算符"></a>SQLite运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323191038.png" style="zoom: 200%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">sqlite&gt; </span><span class="language-bash">select 10 + 20;</span></span><br><span class="line">10 + 20</span><br><span class="line">----------</span><br><span class="line">30</span><br></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323191238.png" style="zoom: 200%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">sqlite&gt; </span><span class="language-bash">SELECT * FROM COMPANY WHERE SALARY &gt;= 10000;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323192410.png" style="zoom:200%;" /><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323192558.png" style="zoom: 200%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">sqlite&gt; </span><span class="language-bash">SELECT * FROM COMPANY WHERE AGE BETWEEN 25 AND 27;</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323192814.png" style="zoom:200%;" /><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200323192958.png" style="zoom: 200%;" /><h1 id="SQLite子句"><a href="#SQLite子句" class="headerlink" title="SQLite子句"></a>SQLite子句</h1><h2 id="SQLite-Where子句"><a href="#SQLite-Where子句" class="headerlink" title="SQLite Where子句"></a>SQLite Where子句</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200324105704.png" style="zoom:200%;" /><h2 id="SQLite-Update子句"><a href="#SQLite-Update子句" class="headerlink" title="SQLite Update子句"></a>SQLite Update子句</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200324105838.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200324110300.png" style="zoom: 200%;" /><h2 id="SQLite-Like子句"><a href="#SQLite-Like子句" class="headerlink" title="SQLite Like子句"></a>SQLite Like子句</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231408.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231423.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231439.png" style="zoom:200%;" /><p>不区分大小写:<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231459.png" style="zoom: 200%;" /></p><h2 id="SQLite-Glob子句"><a href="#SQLite-Glob子句" class="headerlink" title="SQLite Glob子句"></a>SQLite Glob子句</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231521.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231539.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231553.png" style="zoom:200%;" /><p>区分大小写：<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200401231614.png" style="zoom:200%;" /></p><h2 id="SQLite-Limit子句"><a href="#SQLite-Limit子句" class="headerlink" title="SQLite Limit子句"></a>SQLite Limit子句</h2><p>SQLite 的 <strong>LIMIT</strong> 子句用于限制由 SELECT 语句返回的数据数量。<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200407235214.png" style="zoom:200%;" /></p><p>offset 指定开头要跳过多少行，如offset为3，则跳过1~3行；<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200407235230.png" style="zoom: 200%;" /></p><h2 id="SQLite-Order-By子句"><a href="#SQLite-Order-By子句" class="headerlink" title="SQLite Order By子句"></a>SQLite Order By子句</h2><p>SQLite 的 <strong>ORDER BY</strong> 子句是用来基于一个或多个列按升序或降序顺序排列数据。<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200407235240.png" style="zoom:200%;" /><br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200407235251.png" style="zoom: 200%;" /></p><h2 id="SQLite-Having子句"><a href="#SQLite-Having子句" class="headerlink" title="SQLite Having子句"></a>SQLite Having子句</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200407235313.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200408002140.png" style="zoom: 200%;" /><h1 id="SQLite-Distinct关键字"><a href="#SQLite-Distinct关键字" class="headerlink" title="SQLite Distinct关键字"></a>SQLite Distinct关键字</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200408002201.png" style="zoom:200%;" /><h1 id="SQLite约束"><a href="#SQLite约束" class="headerlink" title="SQLite约束"></a>SQLite约束</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200408002535.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200408002557.png" style="zoom:200%;" /><h1 id="SQLite-NULL-值"><a href="#SQLite-NULL-值" class="headerlink" title="SQLite NULL 值"></a>SQLite NULL 值</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200408002619.png" style="zoom:200%;" /><h1 id="SQLite-Trigger-触发器"><a href="#SQLite-Trigger-触发器" class="headerlink" title="SQLite Trigger(触发器)"></a>SQLite Trigger(触发器)</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200408002711.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200408002959.png" style="zoom:200%;" /><p><strong>实例</strong><br>让我们假设一个情况，我们要为被插入到新创建的 COMPANY 表（如果已经存在，则删除重新创建）中的每一个记录保持审计试验；<br>为了保持审计试验，我们将创建一个名为 AUDIT 的新表。每当 COMPANY 表中有一个新的记录项时，日志消息将被插入其中；<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200409000937.png" style="zoom: 200%;" /><br>往company表中添加新记录：<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200409001004.png" style="zoom:200%;" /><br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200409001043.png" style="zoom:200%;" /></p><h1 id="SQLite-索引（Index）"><a href="#SQLite-索引（Index）" class="headerlink" title="SQLite 索引（Index）"></a>SQLite 索引（Index）</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200409001341.png" style="zoom:200%;" /><ul><li><p>创建索引</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410114318.png" style="zoom: 200%;" /></li><li><p>索引类型</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094111.png" style="zoom:200%;" /></li><li><p>删除索引</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094124.png" style="zoom:200%;" /></li><li><p>什么情况下要避免使用索引？</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094158.png" style="zoom:200%;" /></li><li><p>示例</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094210.png" style="zoom: 200%;" /></li></ul><h1 id="SQLite-Indexed-By"><a href="#SQLite-Indexed-By" class="headerlink" title="SQLite Indexed By"></a>SQLite Indexed By</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094224.png" style="zoom:200%;" /><ul><li>示例<img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094238.png" style="zoom: 200%;" /></li></ul><h1 id="SQLite-Alter-命令"><a href="#SQLite-Alter-命令" class="headerlink" title="SQLite Alter 命令"></a>SQLite Alter 命令</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094250.png" style="zoom:200%;" /><ul><li>实例：<img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094301.png" style="zoom: 200%;" /></li></ul><h1 id="SQLite-视图（View）"><a href="#SQLite-视图（View）" class="headerlink" title="SQLite 视图（View）"></a>SQLite 视图（View）</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094316.png" style="zoom:200%;" /><ul><li>实例：<img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094335.png" style="zoom: 200%;" /></li></ul><h1 id="SQLite-事务（Transaction）"><a href="#SQLite-事务（Transaction）" class="headerlink" title="SQLite 事务（Transaction）"></a>SQLite 事务（Transaction）</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094353.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094534.png" style="zoom: 200%;" /><h1 id="SQLite-子查询"><a href="#SQLite-子查询" class="headerlink" title="SQLite 子查询"></a>SQLite 子查询</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094559.png" style="zoom:200%;" /><ul><li>实例：<img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094610.png" style="zoom: 200%;" /></li></ul><h1 id="SQLite-Autoincrement"><a href="#SQLite-Autoincrement" class="headerlink" title="SQLite Autoincrement"></a>SQLite Autoincrement</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094620.png" style="zoom:200%;" /><h1 id="SQLite-日期-amp-时间"><a href="#SQLite-日期-amp-时间" class="headerlink" title="SQLite 日期 &amp; 时间"></a>SQLite 日期 &amp; 时间</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094641.png" style="zoom:200%;" /><ul><li><p>时间字符串(timestring)</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094654.png" style="zoom: 200%;" /></li><li><p>修饰符（Modifier）</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094706.png" style="zoom: 200%;" /></li><li><p>格式化</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094718.png" style="zoom: 200%;" /></li><li><p>实例</p><ul><li><p>当前时间（格林尼治时间GMT,约等于UTC）</p>  <img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094731.png" style="zoom: 200%;" />  <img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094834.png" style="zoom: 260%;" /></li><li><p>当前时间 (本地)</p>  <img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094851.png" style="zoom: 200%;" />  <img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410094911.png" style="zoom: 200%;" /></li><li><p>当前时间（unix时间戳）</p>  <img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095049.png" style="zoom: 200%;" /></li></ul></li></ul><h1 id="SQLite-常用函数"><a href="#SQLite-常用函数" class="headerlink" title="SQLite 常用函数"></a>SQLite 常用函数</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095113.png" style="zoom:200%;" /><h1 id="SQLite-API-C-x2F-C-接口"><a href="#SQLite-API-C-x2F-C-接口" class="headerlink" title="SQLite API C&#x2F;C++接口"></a>SQLite API C&#x2F;C++接口</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095218.png" style="zoom:200%;" /><h2 id="函数原型-sqlite3-open"><a href="#函数原型-sqlite3-open" class="headerlink" title="函数原型: sqlite3_open()"></a>函数原型: sqlite3_open()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sqlite3_open</span><span class="params">(</span></span><br><span class="line"><span class="params">  <span class="type">const</span> <span class="type">char</span> *filename,   <span class="comment">/* Database filename (UTF-8) */</span></span></span><br><span class="line"><span class="params">  sqlite3 **ppDb          <span class="comment">/* OUT: SQLite db handle */</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<br>    * 不管打开是否出错，都需要调用sqlite_close()关闭；<br>    * 如果 <em>filename</em> 参数是 NULL 或 ‘:memory:’，那么 sqlite3_open() 将会在 RAM 中创建一个内存数据库；<br>    * 如果该名称的文件不存在，sqlite3_open() 将创建一个新的命名为该名称的数据库文件并打开；</p><h2 id="函数原型：sqlite3-exec"><a href="#函数原型：sqlite3-exec" class="headerlink" title="函数原型：sqlite3_exec()"></a>函数原型：sqlite3_exec()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sqlite3_exec</span><span class="params">(</span></span><br><span class="line"><span class="params">  sqlite3*,                                  <span class="comment">/* An open database */</span></span></span><br><span class="line"><span class="params">  <span class="type">const</span> <span class="type">char</span> *sql,                           <span class="comment">/* SQL to be evaluated */</span></span></span><br><span class="line"><span class="params">  <span class="type">int</span> (*callback)(<span class="type">void</span>*,<span class="type">int</span>,<span class="type">char</span>**,<span class="type">char</span>**),  <span class="comment">/* Callback function */</span></span></span><br><span class="line"><span class="params">  <span class="type">void</span> *,                                    <span class="comment">/* 1st argument to callback */</span></span></span><br><span class="line"><span class="params">  <span class="type">char</span> **errmsg                              <span class="comment">/* Error msg written here */</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>回调函数：<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095245.png" style="zoom:200%;" /></p><p><strong>注意</strong>：如果提供 了errmsg，用来创建错误消息的内存是在堆上分布的。 故在调用后，应该检查一下是否为null值，如果有错误发生，使用sqlite3_free()释放errmsg占用的内存。</p><h2 id="实例：连接数据库"><a href="#实例：连接数据库" class="headerlink" title="实例：连接数据库"></a>实例：连接数据库</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test_open.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sqlite3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">   sqlite3 *db;</span><br><span class="line">   <span class="type">char</span> *zErrMsg = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> rc;</span><br><span class="line"></span><br><span class="line">   rc = sqlite3_open(<span class="string">&quot;test.db&quot;</span>, &amp;db);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>( rc )&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Can&#x27;t open database: %s\n&quot;</span>, sqlite3_errmsg(db));</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Opened database successfully\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   sqlite3_close(db);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最初使用这种方式，发现找不到头文件</span></span><br><span class="line">gcc -o test_open test_open.c</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然后将头文件拷贝到目录下，改成<span class="comment">#include &quot;sqlite3.h&quot;,</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提示找不到引用</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095308.png" style="zoom:200%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然后发现应该加 -l sqlite3, 发现依旧出错</span></span><br><span class="line">gcc -o test_open test_open.c -l sqlite3</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095321.png" style="zoom:200%;" />使用`find -name "libsqlite3.so"`发现为找到相关库；<p>最后解决方案,是没有安装sqlite-devel,安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install sqlite-devel</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095333.png" style="zoom:200%;" /><h2 id="实例：创建表"><a href="#实例：创建表" class="headerlink" title="实例：创建表"></a>实例：创建表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sqlite3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">callback</span><span class="params">(<span class="type">void</span> *NotUsed, <span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **azColName)</span>&#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;argc; i++)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\n&quot;</span>, azColName[i], argv[i] ? argv[i] : <span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">   sqlite3 *db;</span><br><span class="line">   <span class="type">char</span> *zErrMsg = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span>  rc;</span><br><span class="line">   <span class="type">char</span> *sql;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Open database */</span></span><br><span class="line">   rc = sqlite3_open(<span class="string">&quot;test.db&quot;</span>, &amp;db);</span><br><span class="line">   <span class="keyword">if</span>( rc )&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Can&#x27;t open database: %s\n&quot;</span>, sqlite3_errmsg(db));</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Opened database successfully\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Create SQL statement */</span></span><br><span class="line">   sql = <span class="string">&quot;CREATE TABLE COMPANY(&quot;</span>  \</span><br><span class="line">         <span class="string">&quot;ID INT PRIMARY KEY     NOT NULL,&quot;</span> \</span><br><span class="line">         <span class="string">&quot;NAME           TEXT    NOT NULL,&quot;</span> \</span><br><span class="line">         <span class="string">&quot;AGE            INT     NOT NULL,&quot;</span> \</span><br><span class="line">         <span class="string">&quot;ADDRESS        CHAR(50),&quot;</span> \</span><br><span class="line">         <span class="string">&quot;SALARY         REAL );&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Execute SQL statement */</span></span><br><span class="line">   rc = sqlite3_exec(db, sql, callback, <span class="number">0</span>, &amp;zErrMsg);</span><br><span class="line">   <span class="keyword">if</span>( rc != SQLITE_OK )&#123;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;SQL error: %s\n&quot;</span>, zErrMsg);</span><br><span class="line">      sqlite3_free(zErrMsg);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Table created successfully\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   sqlite3_close(db);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例：SELECT-操作"><a href="#实例：SELECT-操作" class="headerlink" title="实例：SELECT 操作"></a>实例：SELECT 操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sqlite3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">callback</span><span class="params">(<span class="type">void</span> *data, <span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **azColName)</span>&#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s: &quot;</span>, (<span class="type">const</span> <span class="type">char</span>*)data);</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;argc; i++)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\n&quot;</span>, azColName[i], argv[i] ? argv[i] : <span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">   sqlite3 *db;</span><br><span class="line">   <span class="type">char</span> *zErrMsg = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> rc;</span><br><span class="line">   <span class="type">char</span> *sql;</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span>* data = <span class="string">&quot;Callback function called&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Open database */</span></span><br><span class="line">   rc = sqlite3_open(<span class="string">&quot;test.db&quot;</span>, &amp;db);</span><br><span class="line">   <span class="keyword">if</span>( rc )&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Can&#x27;t open database: %s\n&quot;</span>, sqlite3_errmsg(db));</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Opened database successfully\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Create SQL statement */</span></span><br><span class="line">   sql = <span class="string">&quot;SELECT * from COMPANY&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Execute SQL statement */</span></span><br><span class="line">   rc = sqlite3_exec(db, sql, callback, (<span class="type">void</span>*)data, &amp;zErrMsg);</span><br><span class="line">   <span class="keyword">if</span>( rc != SQLITE_OK )&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;SQL error: %s\n&quot;</span>, zErrMsg);</span><br><span class="line">      sqlite3_free(zErrMsg);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Operation done successfully\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   sqlite3_close(db);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例：UPDATE操作"><a href="#实例：UPDATE操作" class="headerlink" title="实例：UPDATE操作"></a>实例：UPDATE操作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sqlite3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">callback</span><span class="params">(<span class="type">void</span> *data, <span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **azColName)</span>&#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s: &quot;</span>, (<span class="type">const</span> <span class="type">char</span>*)data);</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;argc; i++)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\n&quot;</span>, azColName[i], argv[i] ? argv[i] : <span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">   sqlite3 *db;</span><br><span class="line">   <span class="type">char</span> *zErrMsg = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> rc;</span><br><span class="line">   <span class="type">char</span> *sql;</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span>* data = <span class="string">&quot;Callback function called&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Open database */</span></span><br><span class="line">   rc = sqlite3_open(<span class="string">&quot;test.db&quot;</span>, &amp;db);</span><br><span class="line">   <span class="keyword">if</span>( rc )&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Can&#x27;t open database: %s\n&quot;</span>, sqlite3_errmsg(db));</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Opened database successfully\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Create merged SQL statement */</span></span><br><span class="line">   sql = <span class="string">&quot;UPDATE COMPANY set SALARY = 25000.00 where ID=1; &quot;</span> \</span><br><span class="line">         <span class="string">&quot;SELECT * from COMPANY&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Execute SQL statement */</span></span><br><span class="line">   rc = sqlite3_exec(db, sql, callback, (<span class="type">void</span>*)data, &amp;zErrMsg);</span><br><span class="line">   <span class="keyword">if</span>( rc != SQLITE_OK )&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;SQL error: %s\n&quot;</span>, zErrMsg);</span><br><span class="line">      sqlite3_free(zErrMsg);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Operation done successfully\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   sqlite3_close(db);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例：Delete"><a href="#实例：Delete" class="headerlink" title="实例：Delete"></a>实例：Delete</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sqlite3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">callback</span><span class="params">(<span class="type">void</span> *data, <span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **azColName)</span>&#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s: &quot;</span>, (<span class="type">const</span> <span class="type">char</span>*)data);</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;argc; i++)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s = %s\n&quot;</span>, azColName[i], argv[i] ? argv[i] : <span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">   sqlite3 *db;</span><br><span class="line">   <span class="type">char</span> *zErrMsg = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> rc;</span><br><span class="line">   <span class="type">char</span> *sql;</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span>* data = <span class="string">&quot;Callback function called&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Open database */</span></span><br><span class="line">   rc = sqlite3_open(<span class="string">&quot;test.db&quot;</span>, &amp;db);</span><br><span class="line">   <span class="keyword">if</span>( rc )&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Can&#x27;t open database: %s\n&quot;</span>, sqlite3_errmsg(db));</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Opened database successfully\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Create merged SQL statement */</span></span><br><span class="line">   sql = <span class="string">&quot;DELETE from COMPANY where ID=2; &quot;</span> \</span><br><span class="line">         <span class="string">&quot;SELECT * from COMPANY&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Execute SQL statement */</span></span><br><span class="line">   rc = sqlite3_exec(db, sql, callback, (<span class="type">void</span>*)data, &amp;zErrMsg);</span><br><span class="line">   <span class="keyword">if</span>( rc != SQLITE_OK )&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;SQL error: %s\n&quot;</span>, zErrMsg);</span><br><span class="line">      sqlite3_free(zErrMsg);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Operation done successfully\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   sqlite3_close(db);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SQLite线程安全和并发"><a href="#SQLite线程安全和并发" class="headerlink" title="SQLite线程安全和并发"></a>SQLite线程安全和并发</h1><h2 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095351.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095409.png" style="zoom:200%;" /><blockquote><p><a href="https://jin-yang.github.io/post/sqlite-introduce.html">https://jin-yang.github.io/post/sqlite-introduce.html</a></p></blockquote><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095421.png" style="zoom:200%;" />![](https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095442.png)<h1 id="Rollback-journal-和-WAL"><a href="#Rollback-journal-和-WAL" class="headerlink" title="Rollback journal 和 WAL"></a>Rollback journal 和 WAL</h1><ul><li><p>Rollback journal</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095455.png" style="zoom: 200%;" /></li><li><p>WAL</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200410095507.png" style="zoom:150%;" /></li></ul><h1 id="SQLite-database-lock错误"><a href="#SQLite-database-lock错误" class="headerlink" title="SQLite database lock错误"></a>SQLite database lock错误</h1><ul><li><p>说明</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200407222707.png" style="zoom:200%;" /></li><li><p>可能出现database lock错误的原因</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200407222759.png" style="zoom:200%;" /></li></ul><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="http://zetcode.com/db/sqlitec/">SQLite C tutorial</a><br><a href="https://www.runoob.com/sqlite/sqlite-tutorial.html">SQLite教程</a><br><a href="https://zhuanlan.zhihu.com/p/29234064">图解 SQL 里的各种 JOIN</a><br><a href="https://github.com/xiangwangfeng/xiangwangfeng.github.io/wiki/SQLite-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E5%B9%B6%E5%8F%91">SQLite 线程安全和并发</a><br><a href="https://xiaozhuanlan.com/topic/1754328960">SQLite WAL 模式简单介绍</a><br><a href="https://wordpress.semnaitik.com/sqlite-error-database-is-locked-code-5/">SQLite Error Database is Locked- How to resolve?</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;SQLite学习笔记，主要是语法相关，主要来源于菜鸟教程：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/sqlite/sqlite-tutorial.html&quot;&gt;https://www.runoob.com/sqlite/sqlite-tutorial.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://blog.littlekang.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="sqlite" scheme="https://blog.littlekang.xyz/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式固件升级_tomcat搭建http服务</title>
    <link href="https://blog.littlekang.xyz/article/57319/"/>
    <id>https://blog.littlekang.xyz/article/57319/</id>
    <published>2020-03-12T01:42:15.000Z</published>
    <updated>2022-03-17T11:43:13.108Z</updated>
    
    <content type="html"><![CDATA[<p>在嵌入式软件升级中，一般可以选择通过http来下载固件，tomcat是一种方式，<br>可以用来搭建web服务器，用于OTA的升级调试，而无需去了解其他比较复杂web服务器的配置。</p><h1 id="修改登陆用户名密码"><a href="#修改登陆用户名密码" class="headerlink" title="修改登陆用户名密码"></a>修改登陆用户名密码</h1><p>首先进入tomcat文件夹的conf文件夹，首先复制一份tomcat-users.xml作为备份<br>然后修改这个配置文件，用记事本打开，找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">&lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;role1&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;tomcat&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;both&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat,role1&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;role1&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;role1&quot;/&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>去掉开头和结尾的<code>&lt;!-- --&gt;</code>然后修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;manager-gui,admin-gui&quot;/&gt;</span><br></pre></td></tr></table></figure><p>其中如果你只添加manager-gui可以进去sever status和manager app，添加了admin-gui以后才能进去host-manager，然后重启tomcat<br>账号密码为：tomcat<br>如果cmd窗口一闪而过你又想知道是哪儿报错了，请用cmd进入tomcat&#x2F;bin文件夹然后用debug模式启动———catalina debug,一般是端口被占用，比如被你eclipse已经调用了tomcat</p><h1 id="tomcat-server-xml配置说明"><a href="#tomcat-server-xml配置说明" class="headerlink" title="tomcat server.xml配置说明"></a>tomcat server.xml配置说明</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200312091604.png" style="zoom:200%;" /><ul><li><p>server.xml描述了如何启动Tomcat Server</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Listener</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">GlobaNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">GlobaNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Logger</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Realm</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">host</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">Logger</span> /&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">Context</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>参数说明：</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200312092234.png" style="zoom:200%;" /></li></ul><h1 id="修改配置，增加固件文件夹"><a href="#修改配置，增加固件文件夹" class="headerlink" title="修改配置，增加固件文件夹"></a>修改配置，增加固件文件夹</h1><ul><li><p>新建固件文件夹fw</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200312094524.png" style="zoom:200%;" /></li><li><p>修改server.xml，使fw可以被访问</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200312093806.png" style="zoom:200%;" /></li><li><p>新增index.xml，helloworld</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world~~<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://www.cnblogs.com/f-ck-need-u/p/8120008.html">https://www.cnblogs.com/f-ck-need-u/p/8120008.html</a><br><a href="https://blog.csdn.net/zcyhappy1314/article/details/10356909">https://blog.csdn.net/zcyhappy1314/article/details/10356909</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在嵌入式软件升级中，一般可以选择通过http来下载固件，tomcat是一种方式，&lt;br&gt;可以用来搭建web服务器，用于OTA的升级调试，而无需去了解其他比较复杂web服务器的配置。&lt;/p&gt;
&lt;h1 id=&quot;修改登陆用户名密码&quot;&gt;&lt;a href=&quot;#修改登陆用户名密码&quot; cl</summary>
      
    
    
    
    <category term="开发环境" scheme="https://blog.littlekang.xyz/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="http" scheme="https://blog.littlekang.xyz/tags/http/"/>
    
    <category term="ota" scheme="https://blog.littlekang.xyz/tags/ota/"/>
    
  </entry>
  
  <entry>
    <title>kermit串口升级OpenWrt u-boot</title>
    <link href="https://blog.littlekang.xyz/article/62869/"/>
    <id>https://blog.littlekang.xyz/article/62869/</id>
    <published>2020-03-11T07:36:04.000Z</published>
    <updated>2022-03-17T11:47:40.201Z</updated>
    
    <content type="html"><![CDATA[<p>因为购买的MT7688模块自带uboot，tftp升级固件功能无法使用，tftp一直显示错误，无法升级文件系统；</p><p>好在还可以通过串口升级uboot.</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200311155042.png" style="zoom:200%;" /><p>在板子启动的时候，输入“7”来选择通过串口升级uboot，然后看到下面的输出：<br>Ready for binary (kermit) download to 0x80100000 at 57600 bps…</p><h1 id="ckermit串口工具"><a href="#ckermit串口工具" class="headerlink" title="ckermit串口工具"></a>ckermit串口工具</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在Linux环境下使用较多的两款串口软件分别是minicom和ckermit，其中minicom用得最多，不少Linux发行版已经自带。但不少人反映minicom有时会有问题，u-boot开发者也都推荐使用ckermit，下面我们就来认识一下ckermit串口工具。<br>c-kermit是基于kermit文件传输协议的串口工具，其配置和使用较为简单；</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ckermit</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>c-kermit启动时，会从当前用户目录下查找.kermrc配置文件，因此我们先在$HOME目录下创建一个.kermrc文件，然后编辑文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set line /dev/ttyUSB0　　 # 根据实际情况填写，可以用ls查看 /dev/tty*</span><br><span class="line">set speed 57600　　　　    # 根据实际情况填写</span><br><span class="line">set carrier-watch off </span><br><span class="line">set handshake none </span><br><span class="line">set flow-control none </span><br><span class="line">robust </span><br><span class="line">set file type bin </span><br><span class="line">set file name lit </span><br><span class="line">set rec  pack 1000 </span><br><span class="line">set send pack 1000　　    # 这里可以改大一点，方便下载内核</span><br><span class="line">set window 5 </span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接进入连接模式</span></span><br><span class="line">sudo kermit -c  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退回到命令模式，使用快捷键</span></span><br><span class="line">ctrl + \</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按下Ctrl + \ ,再按c 就跳回kermit跳回串口控制界面。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按下Ctrl + \ ,再按q ，则退出kermit。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果需要再次x显示连接模式，直接输入c</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在命令模式下可以输入shell命令来进行相应的操作,如<span class="built_in">cd</span> 、<span class="built_in">ls</span>、<span class="built_in">pwd</span>等</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">传输文件</span></span><br><span class="line">send filename</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出ckermit</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存<span class="built_in">log</span>,<span class="built_in">log</span>将会保存在当前目录</span></span><br><span class="line">log session</span><br></pre></td></tr></table></figure><h1 id="uboot升级"><a href="#uboot升级" class="headerlink" title="uboot升级"></a>uboot升级</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">与开发板的串口建立连接</span></span><br><span class="line">sudo kermit -c</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开发板上电,输入7，进入使用kermit协议升级uboot模式</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按快捷键 ctrl + \返回命令模式</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">发送uboot固件(可以在固件目录下完成以上操作，这样不需要带路径)</span></span><br><span class="line">send uboot.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">固件传送完毕，uboot升级成功，开发板将自动重启</span></span><br></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://www.cnblogs.com/pyhou/p/7196622.html">https://www.cnblogs.com/pyhou/p/7196622.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为购买的MT7688模块自带uboot，tftp升级固件功能无法使用，tftp一直显示错误，无法升级文件系统；&lt;/p&gt;
&lt;p&gt;好在还可以通过串口升级uboot.&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/echomlv/kangi</summary>
      
    
    
    
    
    <category term="u-boot" scheme="https://blog.littlekang.xyz/tags/u-boot/"/>
    
    <category term="openwrt" scheme="https://blog.littlekang.xyz/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>固件加头部信息</title>
    <link href="https://blog.littlekang.xyz/article/39543/"/>
    <id>https://blog.littlekang.xyz/article/39543/</id>
    <published>2020-03-09T06:13:52.000Z</published>
    <updated>2022-03-17T11:43:03.043Z</updated>
    
    <content type="html"><![CDATA[<p>在OTA升级中，常常需要对固件进行合法性校验，比如完整性、硬件版本、软件版本等，</p><p>这里是一个简单的格式，可用于普通的场景，正式环境中还应该考虑加密等安全措施。</p><span id="more"></span><h1 id="参考格式"><a href="#参考格式" class="headerlink" title="参考格式"></a>参考格式</h1><p>固件的头部信息，可以是多种格式，一般可能更多的是二进制数据格式，考虑到后期方便扩展，这里选择使用json格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ABCD&#123;</span><br><span class="line">    &quot;magic&quot;:&quot;device_xx&quot;,</span><br><span class="line">    &quot;appVer&quot;:&quot;1.0.1&quot;,</span><br><span class="line">    &quot;hardVer&quot;:&quot;1.0.1&quot;,</span><br><span class="line">    &quot;format&quot;:&quot;elf&quot;,</span><br><span class="line">    &quot;size&quot;:1234,</span><br><span class="line">    &quot;md5&quot;:&quot;2d02e669731cbade6a64b58d602cf2a4&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSON参数说明"><a href="#JSON参数说明" class="headerlink" title="JSON参数说明"></a>JSON参数说明</h1><p><strong>ABCD</strong> – json数据的长度，2字节，16进制字串格式，如 3456表示0x3456;</p><p><strong>magic</strong> – 魔数，表示固件的类型，以<code>设备类型_XX</code>表示，其中<code>XX</code>用于区别同一类型设备的不同版本；</p><p><strong>appVer</strong> – 固件版本号，设备根据版本号决定是否升级；</p><p><strong>hardVer</strong> – 支持的硬件(最低)版本，设备根据硬件版本信息，判断此固件是否适用，从而决定是否可以升级；</p><p><strong>format</strong> – 固件格式，主要有如下格式：</p><table><thead><tr><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>elf</td><td>linux可执行文件格式，主要用于网关</td></tr><tr><td>ipk</td><td>openwrt固件安装包格式，用于网关</td></tr><tr><td>bin</td><td>二进制格式, 主要用于子设备</td></tr><tr><td>hex</td><td>hex文件格式，主要用于子设备</td></tr></tbody></table><p><strong>size</strong> – 固件大小(不包含固件头json信息)，int型，占4字节，单位byte；</p><p><strong>md5</strong> – 固件的MD5校验值, 32位字符串。</p><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><h2 id="jq-–-JSON命令行处理工具"><a href="#jq-–-JSON命令行处理工具" class="headerlink" title="jq – JSON命令行处理工具"></a>jq – JSON命令行处理工具</h2><h3 id="jq简介"><a href="#jq简介" class="headerlink" title="jq简介"></a>jq简介</h3><p>jq 是一款命令行下处理 JSON 数据的工具。其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。</p><p>需要说明的是 jq 只能接受 well form 的 JSON 字符串作为输入内容。也就是说输入内容必须严格遵循 JSON 格式的标准。所有的属性名必须是以双引号包括的字符串。对象的最后一个属性的末尾或者数组的最后一个元素的末尾不能有逗号。否则 jq 会抛出无法解析 JSON 的错误。</p><h3 id="jq基本操作"><a href="#jq基本操作" class="headerlink" title="jq基本操作"></a>jq基本操作</h3><ul><li><p>帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jq -h</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200309090742.png" style="zoom:200%;" /></li><li><p>格式化json</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-c 删除漂亮的格式输出</span></span><br><span class="line">echo &#x27;&#123;&quot;url&quot;: &quot;mozillazg.com&quot;&#125;&#x27; |jq -c .</span><br><span class="line">&#123;&quot;url&quot;:&quot;mozillazg.com&quot;&#125;</span><br><span class="line"></span><br><span class="line">echo &#x27;&#123;&quot;url&quot;: &quot;mozillazg.com&quot;&#125;&#x27; |jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;url&quot;: &quot;mozillazg.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取某个key值<br><code>.key</code>, <code>.foo.bar</code>, <code>[&quot;key&quot;]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果key对应的值存在，则输出值</span></span><br><span class="line">echo &#x27;&#123;&quot;url&quot;: &quot;mozillazg.com&quot;&#125;&#x27; |jq .url</span><br><span class="line">&quot;mozillazg.com&quot;</span><br><span class="line">echo &#x27;&#123;&quot;url&quot;: &quot;mozillazg.com&quot;&#125;&#x27; | jq &#x27;.[&quot;url&quot;]&#x27;</span><br><span class="line">&quot;mozillazg.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果key对应的值不存在，则输出null</span></span><br><span class="line">echo &#x27;&#123;&quot;notfoo&quot;: true, &quot;alsonotfoo&quot;: false&#125;&#x27; | jq &#x27;.foo&#x27;</span><br><span class="line">null</span><br><span class="line"></span><br><span class="line">echo &#x27;&#123;&quot;notfoo&quot;: true, &quot;alsonotfoo&quot;: false&#125;&#x27; | jq .foo</span><br><span class="line">null</span><br></pre></td></tr></table></figure></li><li><p>数组操作<br><code>.[]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取出所有元素</span></span><br><span class="line">echo &#x27;[&#123;&quot;name&quot;: &quot;tom&quot;&#125;, &#123;&quot;name&quot;: &quot;mozillazg&quot;&#125;]&#x27; |jq .[]</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;tom&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;mozillazg&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取出第1个元素，下标从0开始</span></span><br><span class="line">echo &#x27;[&#123;&quot;name&quot;: &quot;tom&quot;&#125;, &#123;&quot;name&quot;: &quot;mozillazg&quot;&#125;]&#x27; |jq .[0]</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;tom&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取出下标为 0 到 2(不包括2)之间的元素</span></span><br><span class="line">echo &#x27;[&#123;&quot;name&quot;: &quot;tom&quot;&#125;, &#123;&quot;name&quot;: &quot;mozillazg&quot;&#125;, &#123;&quot;name&quot;: &quot;jim&quot;&#125;]&#x27; |jq .[0:2]</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;tom&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;mozillazg&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>取出数组元素中的key的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;[&#123;&quot;name&quot;: &quot;foo&quot;&#125;,&#123;&quot;name&quot;: &quot;bar&quot;&#125;,&#123;&quot;name&quot;: &quot;foobar&quot;&#125;]&#x27; |jq .[].name</span><br><span class="line">&quot;foo&quot;</span><br><span class="line">&quot;bar&quot;</span><br><span class="line">&quot;foobar&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用管道</span></span><br><span class="line">echo &#x27;[&#123;&quot;name&quot;: &quot;foo&quot;&#125;,&#123;&quot;name&quot;: &quot;bar&quot;&#125;,&#123;&quot;name&quot;: &quot;foobar&quot;&#125;]&#x27; |jq &#x27;.[]|.name&#x27;</span><br><span class="line">&quot;foo&quot;</span><br><span class="line">&quot;bar&quot;</span><br><span class="line">&quot;foobar&quot;</span><br></pre></td></tr></table></figure></li><li><p>将结果重新组成数组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;[&#123;&quot;name&quot;: &quot;foo&quot;&#125;,&#123;&quot;name&quot;: &quot;bar&quot;&#125;,&#123;&quot;name&quot;: &quot;foobar&quot;&#125;]&#x27; |jq [.[].name]</span><br><span class="line">[</span><br><span class="line">  &quot;foo&quot;,</span><br><span class="line">  &quot;bar&quot;,</span><br><span class="line">  &quot;foobar&quot;</span><br><span class="line">]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用map实现</span></span><br><span class="line">echo &#x27;[&#123;&quot;name&quot;: &quot;foo&quot;&#125;,&#123;&quot;name&quot;: &quot;bar&quot;&#125;,&#123;&quot;name&quot;: &quot;foobar&quot;&#125;]&#x27; |jq &#x27;map(.name)&#x27;</span><br><span class="line">[</span><br><span class="line">  &quot;foo&quot;,</span><br><span class="line">  &quot;bar&quot;,</span><br><span class="line">  &quot;foobar&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>处理文件</p><p>使用<code>jq [选项] &lt;jq表达式&gt; [files]</code>形式；<br>使用<code>cat [files] | jq [选项] &lt;jq表达式&gt;</code></p></li></ul><h3 id="jq高级操作"><a href="#jq高级操作" class="headerlink" title="jq高级操作"></a>jq高级操作</h3><ul><li><p>管道</p><ul><li>支持管道线|，它如同linux命令中的管道线——把前面命令的输出当作是后面命令的输入。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&#123;&quot;url&quot;: &quot;mozillazg.com&quot;, &quot;name&quot;: &quot;mozillazg&quot;&#125;&#x27; | jq &#x27;.|.url&#x27;</span><br><span class="line">&quot;mozillazg.com&quot;</span><br></pre></td></tr></table></figure><ul><li>获取内容的长度(字符串，数组的长度)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&#123;&quot;url&quot;: &quot;mozillazg.com&quot;, &quot;name&quot;: &quot;mozillazg&quot;&#125;&#x27; |jq &#x27;.url|length&#x27;</span><br><span class="line">13</span><br><span class="line"></span><br><span class="line">echo &#x27;[&quot;mozillazg.com&quot;, &quot;mozillazg&quot;]&#x27; |jq &#x27;.|length&#x27;</span><br><span class="line">2</span><br></pre></td></tr></table></figure></li><li><p>map<br><code>map(foo)</code>可以实现对数组的每一项进行操作，然后合并结果的功能:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;[&quot;mozillazg.com&quot;, &quot;mozillazg&quot;]&#x27; | jq &#x27;map(length)&#x27;</span><br><span class="line">[</span><br><span class="line">  13,</span><br><span class="line">  9</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>filter(select)<br><code>select(foo)</code> 可以实现对输入项进行判断，只返回符合条件的项:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;[&quot;mozillazg.com&quot;, &quot;mozillazg&quot;]&#x27; | jq &#x27;map(select(.|length &gt; 9))&#x27;</span><br><span class="line">[</span><br><span class="line">  &quot;mozillazg.com&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>字符串插值，拼接<br>可以使用 <code>\(foo)</code> 实现字符串插值功能:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&#123;&quot;url&quot;: &quot;mozillazg.com&quot;, &quot;name&quot;: &quot;mozillazg&quot;&#125;&#x27; |jq &#x27;&quot;hi \(.name)&quot;&#x27;</span><br><span class="line">&quot;hi mozillazg&quot;</span><br></pre></td></tr></table></figure><p>注意要用双引号包围起来，表示是一个字符串。</p></li><li><p>if&#x2F;elif&#x2F;else<br>可以使用 <code>if .. then .. elif .. then .. else .. end</code> 实现条件判断:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;[0, 1, 2, 3]&#x27; | jq &#x27;map(if . == 0 then &quot;zero&quot; elif . == 1 then &quot;one&quot; elif . == 2 then &quot;two&quot; else &quot;many&quot; end)&#x27;</span><br><span class="line">[</span><br><span class="line">  &quot;zero&quot;,</span><br><span class="line">  &quot;one&quot;,</span><br><span class="line">  &quot;two&quot;,</span><br><span class="line">  &quot;many&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>构造object或数组<br>可以通过 <code>&#123;&#125;</code> 和 <code>[]</code> 构造新的 object 或 数组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">object</span></span><br><span class="line">echo &#x27;[&quot;mozillazg.com&quot;, &quot;mozillazg&quot;]&#x27; |jq &#x27;&#123;name: .[1]&#125;&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;mozillazg&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">array</span></span><br><span class="line">echo &#x27;&#123;&quot;url&quot;: &quot;mozillazg.com&quot;, &quot;name&quot;: &quot;mozillazg&quot;&#125;&#x27; |jq &#x27;[.name, .url]&#x27;</span><br><span class="line">[</span><br><span class="line">  &quot;mozillazg&quot;,</span><br><span class="line">  &quot;mozillazg.com&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="jq内置运算支持"><a href="#jq内置运算支持" class="headerlink" title="jq内置运算支持"></a>jq内置运算支持</h3><p>jq 内部支持的数据类型有：数字，字符串，数组和对象(object)。并且在这些数据类型的基础上, jq 提供了一些基本的操作符来实现一些基本的运算和数据操作。列举如下：</p><ul><li>数学运算。对于数字类型，jq 实现了基本的加减乘除(&#x2F;)和求余(%)运算。对于除法运算，jq 最多支持 16 位小数。</li><li>字符串操作。jq 提供字符串的连接操作(运算符为’+’，例如：”tom “+”jerry”结果为”tom jerry”)，字符串的复制操作(例如：’a’*3 结果为’aaa’)，以及字符串分割操作(将字符串按照指定的分割符分成数组，例如”sas”&#x2F;“s”的结果为[“”,”a”,””]，而”sas”&#x2F;“a”的结果为[“s”,”s”]。</li><li>数组操作。jq 提供两种数组运算：并集(‘+’)运算，结果数组中包含参与运算的数组的所有元素。差集运算(‘-‘)，例如：有数组 a,b, a-b 的结果为所有在 a 中且不包含在 b 中的元素组成的数组。</li><li>对象操作。jq 实现了两个 JSON 对象的合并操作(merge)。当两个参与运算的对象包含相同的属性时则保留运算符右侧对象的属性值。有两种合并运算符：’+’和’<em>‘。所不同的是，运算符’+’只做顶层属性的合并，运算符’</em>‘则是递归合并。例如：有对象 a&#x3D;{“a”:{“b”:1}}, b&#x3D;{“a”:{“c”:2}}，a+b 的结果为{“a”:{“c”:2}}，而 a*b 的结果为{“a”:{“b”:1,”c”:2}}</li><li>比较操作：jq 内部支持的比较操作符有&#x3D;&#x3D;, !&#x3D;,&gt;,&gt;&#x3D;,&lt;&#x3D;和&lt;。其中，’&#x3D;&#x3D;’的规则和 javascript 中的恒等(‘&#x3D;&#x3D;&#x3D;’)类似，只有两个操作数的类型和值均相同时其结果才是 true。</li><li>逻辑运算符: and&#x2F;or&#x2F;not。在 jq 逻辑运算中，除了 false 和 null 外，其余的任何值都等同于 true。</li><li>默认操作符(‘&#x2F;&#x2F;‘), 表达式’a&#x2F;&#x2F;b’表示当表达式 a 的值不是 false 或 null 时，a&#x2F;&#x2F;b 等于 a，否则等于 b。</li></ul><h3 id="jq修改json数据"><a href="#jq修改json数据" class="headerlink" title="jq修改json数据"></a>jq修改json数据</h3><p>原json内容：<br><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200309142452.png" style="zoom:200%;" /></p><p>例如需要修改size的值为123，方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重定向到新的文件，注意不能是原文件</span></span><br><span class="line">cat firmware.json | jq &#x27;to_entries |</span><br><span class="line">map(if .key == &quot;size&quot;</span><br><span class="line">then . + &#123;&quot;value&quot;:123&#125;</span><br><span class="line">else .</span><br><span class="line">end</span><br><span class="line">) |</span><br><span class="line">from_entries&#x27; &gt; new.json</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200309143222.png" style="zoom:200%;" /><h3 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h3><blockquote><p><a href="https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html">https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html</a></p><p><a href="https://mozillazg.com/2018/01/jq-use-examples-cookbook.html#hidid4">https://mozillazg.com/2018/01/jq-use-examples-cookbook.html#hidid4</a></p><p><a href="https://github.com/meetbill/xbatch/wiki/jq#22-%E6%A0%B9%E6%8D%AE-key-%E6%9F%A5%E8%AF%A2-json-%E7%9A%84%E5%80%BC">https://github.com/meetbill/xbatch/wiki/jq#22-%E6%A0%B9%E6%8D%AE-key-%E6%9F%A5%E8%AF%A2-json-%E7%9A%84%E5%80%BC</a></p><p><a href="https://www.jianshu.com/p/f50c87b7eaea">https://www.jianshu.com/p/f50c87b7eaea</a></p></blockquote><h2 id="shell获取文件的大小"><a href="#shell获取文件的大小" class="headerlink" title="shell获取文件的大小"></a>shell获取文件的大小</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ls -l filename | awk &#x27;&#123;print $5&#125;&#x27;</span><br><span class="line">du -b filename | awk &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">wc -c filename | awk &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line">wc -c &lt; filename</span><br><span class="line">stat -c &quot;%s&quot; filename</span><br></pre></td></tr></table></figure><h2 id="shell计算文件的MD5"><a href="#shell计算文件的MD5" class="headerlink" title="shell计算文件的MD5"></a>shell计算文件的MD5</h2><p><strong>md5sum</strong>: </p><p>显示或检查 MD5(32-bit) 校验和，若没有文件选项，或者文件处为”-“，则从标准输入读取。<br><strong>echo -n</strong> : 不打印换行符。<br><strong>cut</strong>: cut用来从标准输入或文本文件中剪切列或域。剪切文本可以将之粘贴到一个文本文件。<br>        -d 指定与空格和tab键不同的域分隔符。-f1 表示第一个域。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">md5sum iot_gateway</span><br><span class="line">5b5e4be07a7960ef1450f3e8c8b22df9  iot_gateway</span><br><span class="line"></span><br><span class="line">md5sum iot_gateway | cut -d &#x27; &#x27; -f1</span><br><span class="line">5b5e4be07a7960ef1450f3e8c8b22df9</span><br></pre></td></tr></table></figure><h2 id="shell删除某个字符"><a href="#shell删除某个字符" class="headerlink" title="shell删除某个字符"></a>shell删除某个字符</h2><p>例如使用 <code>tr -d &#39;[ \t]</code> 删除换行字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;    123  567   &quot; | tr -d &#x27;[ \t]&#x27; #输出12345</span><br></pre></td></tr></table></figure><h1 id="使用shell添加头部信息"><a href="#使用shell添加头部信息" class="headerlink" title="使用shell添加头部信息"></a>使用shell添加头部信息</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除旧固件</span></span><br><span class="line">rm -rf ./iot_gateway*.elf</span><br><span class="line">rm -rf ./iot_gateway*.ipk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成的固件路径</span></span><br><span class="line">FIRMWARE_ELF_DIR= xxx</span><br><span class="line">FIRMWARE_IPK_DIR= xxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">固件加头打包时间</span></span><br><span class="line">PACK_TIME=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line"></span><br><span class="line">echo &quot;packtime: $PACK_TIME&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝固件至当前目录暂存</span></span><br><span class="line">cp $FIRMWARE_ELF_DIR/iot_gateway ./raw.elf</span><br><span class="line">cp $FIRMWARE_IPK_DIR/iot_gateway*.ipk ./raw.ipk</span><br><span class="line"></span><br><span class="line">echo &quot;copy firmware done.&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取固件的大小</span></span><br><span class="line">ELF_SIZE=$(ls -l ./raw.elf | awk &#x27;&#123;print $5&#125;&#x27;)</span><br><span class="line">IPK_SIZE=$(ls -l ./raw.ipk | awk &#x27;&#123;print $5&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">echo &quot;elf size: $ELF_SIZE&quot;</span><br><span class="line">echo &quot;ipk size: $IPK_SIZE&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">计算固件的MD5</span></span><br><span class="line">ELF_MD5=$(md5sum raw.elf | cut -d &#x27; &#x27; -f1)</span><br><span class="line">IPK_MD5=$(md5sum raw.ipk | cut -d &#x27; &#x27; -f1)</span><br><span class="line"></span><br><span class="line">echo &quot;elf md5: $ELF_MD5&quot;</span><br><span class="line">echo &quot;ipk md5: $ELF_MD5&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">填充固件头信息到json</span></span><br><span class="line">cat firmware.json |</span><br><span class="line">jq -c &quot;to_entries |</span><br><span class="line">map(if .key == \&quot;size\&quot;</span><br><span class="line">then . + &#123;\&quot;value\&quot;:$ELF_SIZE&#125;</span><br><span class="line">elif .key == \&quot;format\&quot;</span><br><span class="line">then . + &#123;\&quot;value\&quot;:\&quot;elf\&quot;&#125;</span><br><span class="line">elif .key == \&quot;timestamp\&quot;</span><br><span class="line">then . + &#123;\&quot;value\&quot;:\&quot;$PACK_TIME\&quot;&#125;</span><br><span class="line">elif .key == \&quot;md5\&quot;</span><br><span class="line">then . + &#123;\&quot;value\&quot;:\&quot;$ELF_MD5\&quot;&#125;</span><br><span class="line">else .</span><br><span class="line">end</span><br><span class="line">   ) |</span><br><span class="line">from_entries&quot; | tr -d &#x27;\n&#x27; &gt; elf.json</span><br><span class="line"></span><br><span class="line">cat firmware.json |</span><br><span class="line">jq -c &quot;to_entries |</span><br><span class="line">map(if .key == \&quot;size\&quot;</span><br><span class="line">then . + &#123;\&quot;value\&quot;:$IPK_SIZE&#125;</span><br><span class="line">elif .key == \&quot;format\&quot;</span><br><span class="line">then . + &#123;\&quot;value\&quot;:\&quot;ipk\&quot;&#125;</span><br><span class="line">elif .key == \&quot;timestamp\&quot;</span><br><span class="line">then . + &#123;\&quot;value\&quot;:\&quot;$PACK_TIME\&quot;&#125;</span><br><span class="line">elif .key == \&quot;md5\&quot;</span><br><span class="line">then . + &#123;\&quot;value\&quot;:\&quot;$IPK_MD5\&quot;&#125;</span><br><span class="line">else .</span><br><span class="line">end</span><br><span class="line">   ) |</span><br><span class="line">from_entries&quot; | tr -d &#x27;\n&#x27; &gt; ipk.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Debug: <span class="built_in">printf</span> json信息</span></span><br><span class="line">echo &quot;elf.json:&quot;</span><br><span class="line">cat ./elf.json | jq .</span><br><span class="line"></span><br><span class="line">echo &quot;ipk.json:&quot;</span><br><span class="line">cat ./ipk.json | jq .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取软件版本</span></span><br><span class="line">ELF_APP_VER=$(cat ./elf.json | jq --raw-output &#x27;.appVer&#x27;)</span><br><span class="line">IPK_APP_VER=$(cat ./ipk.json | jq --raw-output &#x27;.appVer&#x27;)</span><br><span class="line"></span><br><span class="line">echo &quot;elf app version: $ELF_APP_VER&quot;</span><br><span class="line">echo &quot;ipk app version: $IPK_APP_VER&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">计算json的长度,16进制字符串格式</span></span><br><span class="line">ELF_JSON_LEN=$(ls -l ./elf.json | awk &#x27;&#123;printf &quot;%04x\n&quot;,$5&#125;&#x27;)</span><br><span class="line">IPK_JSON_LEN=$(ls -l ./ipk.json | awk &#x27;&#123;printf &quot;%04x\n&quot;,$5&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">echo &quot;elf json len: $ELF_JSON_LEN&quot;</span><br><span class="line">echo &quot;ipk json len: $IPK_JSON_LEN&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存到文件</span></span><br><span class="line">echo -n &quot;$ELF_JSON_LEN&quot; &gt;elf.len</span><br><span class="line">echo -n &quot;$IPK_JSON_LEN&quot; &gt;ipk.len</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并文件</span></span><br><span class="line">cat elf.len elf.json raw.elf &gt;iot_gateway_$ELF_APP_VER.elf</span><br><span class="line">cat ipk.len ipk.json raw.ipk &gt;iot_gateway_$ELF_APP_VER.ipk</span><br><span class="line"></span><br><span class="line">echo &quot;Generate Pakage Done.&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除生成的临时文件</span></span><br><span class="line">rm -rf elf.json ipk.json raw.elf raw.ipk elf.len ipk.len</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在OTA升级中，常常需要对固件进行合法性校验，比如完整性、硬件版本、软件版本等，&lt;/p&gt;
&lt;p&gt;这里是一个简单的格式，可用于普通的场景，正式环境中还应该考虑加密等安全措施。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux相关" scheme="https://blog.littlekang.xyz/categories/Linux%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="linux" scheme="https://blog.littlekang.xyz/tags/linux/"/>
    
    <category term="ota" scheme="https://blog.littlekang.xyz/tags/ota/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt软件包创建</title>
    <link href="https://blog.littlekang.xyz/article/62981/"/>
    <id>https://blog.littlekang.xyz/article/62981/</id>
    <published>2020-02-17T08:37:06.000Z</published>
    <updated>2022-03-17T11:48:18.637Z</updated>
    
    <content type="html"><![CDATA[<p>OpenWrt官方Wiki</p><img src="https://nas.littlekang.xyz:9000/markdown/2022-03/1719_2129-SMZspGY1muMHeBfo.png" alt="image-20220317192129827" style="zoom:200%;" /><blockquote><p><a href="https://openwrt.org/docs/guide-developer/packages">https://openwrt.org/docs/guide-developer/packages</a></p></blockquote><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200217214719.png" style="zoom:200%;" /><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200217214930.png" style="zoom:200%;" /><blockquote><p><a href="https://lingxiankong.github.io/2014-01-06-linux-install.html">https://lingxiankong.github.io/2014-01-06-linux-install.html</a></p></blockquote><h1 id="Openwrt软件源码包的结构"><a href="#Openwrt软件源码包的结构" class="headerlink" title="Openwrt软件源码包的结构"></a>Openwrt软件源码包的结构</h1><ul><li>Makefile(必选)</li><li>提供了下载、编译、安装的步骤</li><li>patches(可选)</li><li>补丁文件，用于对源码打补丁</li><li>files(可选)</li><li>配置文件目录</li></ul><h1 id="Makefile语法"><a href="#Makefile语法" class="headerlink" title="Makefile语法"></a>Makefile语法</h1><h2 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h2><p>OpenWrt使用三个Makefile的子文件，分别为：</p><blockquote><p><strong>include $(TOPDIR)&#x2F;rules.mk</strong></p><p><strong>include $(INCLUDE_DIR)&#x2F;kernel.mk</strong></p><p><strong>include $(INCLUDE_DIR)&#x2F;package.mk</strong></p></blockquote><p>由这些Makefile子文件确定软件包加入OpenWrt的方式和方法。$(TOPDIR)&#x2F;rules.mk一般在Makefile的开头，$(INCLUDE_DIR)&#x2F;kernel.mk文件对于软件包为内核时是不可缺少的，$(INCLUDE_DIR)&#x2F;package.mk一般在软件包的基本信息完成后再引入。</p><h2 id="示例Makefile"><a href="#示例Makefile" class="headerlink" title="示例Makefile"></a>示例Makefile</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="variable">$(TOPDIR)</span>/rules.mk</span><br><span class="line"></span><br><span class="line">PKG_NAME:=bridge</span><br><span class="line">PKG_VERSION:=1.0.6</span><br><span class="line">PKG_RELEASE:=1</span><br><span class="line"></span><br><span class="line">PKG_BUILD_DIR:=<span class="variable">$(BUILD_DIR)</span>/bridge-utils-<span class="variable">$(PKG_VERSION)</span></span><br><span class="line">PKG_SOURCE:=bridge-utils-<span class="variable">$(PKG_VERSION)</span>.tar.gz</span><br><span class="line">PKG_SOURCE_URL:=@SF/bridge</span><br><span class="line">PKG_MD5SUM:=9b7dc52656f5cbec846a7ba3299f73bd</span><br><span class="line">PKG_CAT:=zcat</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(INCLUDE_DIR)</span>/package.mk</span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> Package/bridge</span><br><span class="line">  SECTION:=base</span><br><span class="line">  CATEGORY:=Network</span><br><span class="line">  TITLE:=Ethernet bridging configuration utility</span><br><span class="line">  <span class="comment">#DESCRIPTION:=This variable is obsolete. use the Package/name/description define instead!</span></span><br><span class="line">  URL:=http://bridge.sourceforge.net/</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> Package/bridge/description</span><br><span class="line"> Ethernet bridging configuration utility</span><br><span class="line"> Manage ethernet bridging; a way to connect networks together to</span><br><span class="line"> form a larger network.</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> Build/Configure</span><br><span class="line">  <span class="variable">$(<span class="built_in">call</span> Build/Configure/Default,--with-linux-headers=<span class="variable">$(LINUX_DIR)</span>)</span></span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> Package/bridge/install</span><br><span class="line">  <span class="variable">$(INSTALL_DIR)</span> $(1)/usr/sbin</span><br><span class="line">  <span class="variable">$(INSTALL_BIN)</span> <span class="variable">$(PKG_BUILD_DIR)</span>/brctl/brctl $(1)/usr/sbin/</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(<span class="built_in">eval</span> $(<span class="built_in">call</span> BuildPackage,bridge)</span>)</span><br></pre></td></tr></table></figure><p>这是最为关键的<strong>BuildPackage</strong>宏。它是在**$(INCLUDE_DIR)&#x2F;package.mk<strong>文件里定义的。</strong>BuildPackage宏只要求一个参数，即要编译的软件包名**，在本例中是“bridge”。所有其他信息都通过宏来获得，这提供了一种内在的简洁性。比如BuildPackage需要软件包的一大串描述信息，我们并不要向它传递冗长的参数，因为我们已经约定描述信息定义在DESCRIPTION宏，BuildPackage从里面读取就可以了。</p><h2 id="软件包信息"><a href="#软件包信息" class="headerlink" title="软件包信息"></a>软件包信息</h2><p>软件包的信息均以PKG_开头，其意思和作用如下：</p><ul><li><strong>PKG_NAME</strong> -软件包的名字, 在 menuconfig 和 ipkg 显示</li><li><strong>PKG_VERSION</strong> -软件包的版本，主干分支的版本正是我们要下载的</li><li><strong>PKG_RELEASE</strong> -这个 makefile 的版本</li><li><strong>PKG_BUILD_DIR</strong> -编译软件包的目录</li><li><strong>PKG_SOURCE</strong> -要下载的软件包的名字，一般是由 PKG_NAME 和 PKG_VERSION 组成</li><li><strong>PKG_SOURCE_URL</strong> -下载这个软件包的链接</li><li><strong>PKG_MD5SUM</strong> -软件包的 MD5 值</li><li><strong>PKG_CAT</strong> -解压软件包的方法 (zcat, bzcat, unzip)</li><li><strong>PKG_BUILD_DEPENDS</strong> -<strong>需要预先构建的软件包，但只是在构建本软件包时，而不是运行的时候</strong>。它的语法和下面的DEPENDS一样。</li></ul><p>PKG_*变量定义了从何处下载这个软件包；@SF是表示从sourceforge网站下载的一个特殊关键字。md5sum用来检查从网上下载的软件包是否完好无损。PKG_BUILD_DIR定义了软件包源代码的解压路径。</p><h2 id="BuildPackage相关的宏"><a href="#BuildPackage相关的宏" class="headerlink" title="BuildPackage相关的宏"></a>BuildPackage相关的宏</h2><p>应用程序的编译包以Package&#x2F;开头。然后接着软件名，在Package定义中的软件名可以与软件包名不一样，而且可以多个定义。下面使用$(PKG_NAME)只是做一个标志，并非真正使用$(PKG_NAME)，如Package&#x2F;$(PKG_NAME)。</p><ul><li><strong>SECTION</strong> 表示包的类型，预留。</li><li><strong>CATRGORY</strong> 表示分类，在make menuconfig的菜单下将可以找到。</li><li><strong>TITLE</strong> 用于软件包的简短描述。</li><li><strong>DESCRIPTION</strong> 用于软件包的详细描述，<strong>已放弃使用</strong>。如果使用DESCRIPTION将会提示“error DESCRIPTION:&#x3D; is obsolete, use Package&#x2F;PKG_NAME&#x2F;description”。</li><li><strong>URL</strong> 表示软件包的下载位置。</li><li><strong>MAINTAIER</strong> 表示维护者，选项。</li><li><strong>DEPENDS</strong> 表示与其他软件的依赖。<strong>运行本软件依赖的其他包</strong>。如果存在多个依赖，则每个依赖需要用空格分开。依赖前使用+号表示默认为显示，即对象没有选中时也会显示，使用@则默认为不显示，即当依赖对象选中后才显示。</li></ul><blockquote><p>在用户空间的应用程序软件包中没有内核驱动模块的AUTOLOAD参数。<strong>如果应用软件需要在boot时自动运行，则需要在&#x2F;etc&#x2F;init.d中增加相应的脚本文件。脚本文件需要START参数，说明在boot时的优先级，如果在boot过程启动后再关闭，则需要进一步设置STOP参数。如果STOP参数存在，其值必须大于START。脚本文件需要start()和stop()两个函数，start()是执行程序，stop()是关闭程序。</strong>关闭程序一般需要执行killall命令。<strong>由&#x2F;etc&#x2F;rc.d&#x2F;S10boot知道，装载内核驱动模块的优先级为10，需要使用自己设计的内核驱动模块的程序其START的值必须大于10。同样由&#x2F;etc&#x2F;rc.d&#x2F;S40network知道，使用网络通信的程序其START的值必须大于40</strong>。</p></blockquote><ul><li><strong>Package&#x2F;$(PKG_NAME)&#x2F;conffiles</strong> 本包安装的配置文件，一行一个。如果文件结尾使用&#x2F;，则表示为目录。用于备份配置文件说明，在sysupgrade命令执行时将会用到。</li><li><strong>Package&#x2F;$(PKG_NAME)&#x2F;description</strong> 软件包的详细描述，取代前面提到的DESCRIPTION详细描述。</li><li><strong>Build&#x2F;Prepare</strong> 编译准备方法，对于网上下载的软件包不需要再描述。对于非网上下载或自行开发的软件包必须说明编译准备方法。一般的准备方法为：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define Build/Prepare</span><br><span class="line">    mkdir -p <span class="variable">$(</span><span class="variable constant_">PKG_BUILD_DIR</span>)</span><br><span class="line">    <span class="variable">$(</span><span class="variable constant_">CP</span>) ./src/* <span class="variable">$(</span><span class="variable constant_">PKG_BUILD_DIR</span>)/</span><br><span class="line">endef</span><br></pre></td></tr></table></figure><p>按OpenWrt的习惯，一般把自己设计的程序全部在src目录下。</p><ul><li><strong>Build&#x2F;Compile</strong> 编译方法，没有特别说明的可以不予以定义。如果不定义将默认使用编译方法Build&#x2F;Compile&#x2F;Default。<br> 自行开发的软件包可以考虑使用下面的定义。</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span> Build/Compile</span><br><span class="line">    <span class="variable">$(MAKE)</span> -C <span class="variable">$(PKG_BUILD_DIR)</span> \</span><br><span class="line">    <span class="variable">$(TARGET_CONFIGURE_OPTS)</span> CFLAGS=<span class="string">&quot;<span class="variable">$(TARGET_CFLAGS)</span> -I <span class="variable">$(LINUX_DIR)</span>/include&quot;</span></span><br><span class="line"><span class="keyword">endef</span></span><br></pre></td></tr></table></figure><ul><li><strong>Package&#x2F;$(PKG_NAME)&#x2F;install</strong> 软件包的安装方法，包括一系列拷贝编译好的文件到指定位置。<strong>调用时会带一个参数，就是嵌入式系统的镜像文件系统目录</strong>，因此**$(1)表示嵌入式系统的镜像目录**。一般可以采用下面的方法：</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span> Package/<span class="variable">$(PKG_NAME)</span>/install</span><br><span class="line">    <span class="variable">$(INSTALL_DIR)</span> $(1)/usr/bin</span><br><span class="line">    <span class="variable">$(INSTALL_BIN)</span> <span class="variable">$(PKG_BUILD_DIR)</span>/<span class="variable">$(PKG_NAME)</span> $(1)/usr/bin/</span><br><span class="line"><span class="keyword">endef</span></span><br></pre></td></tr></table></figure><p>INSTALL_DIR、INSTALL_BIN在$(TOPDIR)&#x2F;rules.mk文件定义，所以本Makefile必须引入$(TOPDIR)&#x2F;rules.mk文件。<br> <strong>INSTALL_DIR:&#x3D;install -d -m0755</strong> 意思是创建所属用户可读写和执行，其他用户可读可执行的目录。<br> <strong>INSTALL_BIN:&#x3D;install -m0755</strong> 意思是编译好的文件存放到镜像文件目录。<br> 如果用户空间的应用软件在boot时要自动运行，则需要在安装方法说明中增加自动运行的脚本文件安装和配置文件安装方法。<br> 例如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span> Package/mountd/install</span><br><span class="line">    <span class="variable">$(INSTALL_DIR)</span> $(1)/sbin/ $(1)/etc/config/ $(1)/etc/init.d/</span><br><span class="line">    <span class="variable">$(INSTALL_BIN)</span> <span class="variable">$(PKG_BUILD_DIR)</span>/mountd $(1)/sbin/</span><br><span class="line">    <span class="variable">$(INSTALL_DATA)</span> ./files/mountd.config $(1)/etc/config/mountd</span><br><span class="line">    <span class="variable">$(INSTALL_BIN)</span> ./files/mountd.init $(1)/etc/init.d/mountd</span><br><span class="line"><span class="keyword">endef</span></span><br></pre></td></tr></table></figure><p>安装文件放在files子目录下，不要与源代码文件目录src混在一起，以提高可读性。使用清晰的文件扩展名，更方便安装识别文件。</p><ul><li><strong>Package&#x2F;$(PKG_NAME)&#x2F;preinst</strong> 软件包安装前处理方法，使用脚本语言，因此定义的第一行需要下面的格式<br> <code>#!/bin/sh</code><br> 调用时带入的参数为嵌入式系统的镜像目录。</li><li><strong>Package&#x2F;$(PKG_NAME)&#x2F;postinst</strong> 软件包安装后处理方法，使用脚本语言。</li><li><strong>Package&#x2F;$(PKG_NAME)&#x2F;prerm</strong> 软件包删除前处理方法，使用脚本语言。</li><li><strong>Package&#x2F;$(PKG_NAME)&#x2F;postrm</strong> 软件包删除后处理方法，使用脚本语言。</li></ul><p><strong>注意：</strong>对于所有在pre&#x2F;post, install&#x2F;removal脚本中使用的变量，<strong>都应该使用”$$“代替”$“</strong>。这是告诉make暂时不要解析这个变量，而是把它当成普通字符串以及用”$“代替”$$“</p><h2 id="内核驱动模块包定义"><a href="#内核驱动模块包定义" class="headerlink" title="内核驱动模块包定义"></a>内核驱动模块包定义</h2><p>Linux分为内核空间和用户空间。开发者开发的内核部分可以直接加入Linux的Kernel程序，也可以生成内核模块以便需要时装入内核。OpenWrt一般希望开发者生成内核模块，在Linux启动后自动装载或手工使用insmod命令装载。内核模块使用KernelPackage开头，其他与一般应用软件包基本相同。<br> 在内核驱动模块定义中增加了：</p><ul><li><strong>SUBMENU</strong> 表示子菜单位置，在$(INCLUDE)&#x2F;kernel.mk对内核模块定义了CATEGORY为kernel modules，所以内核模块在menuconfig中的主菜单为kernel modules，然后有下一级子菜单$(SUBMENU)。在子菜单下可以看到以kmod-$(PKG_NAME)项目。</li><li><strong>DEFAULT</strong> 表示直接编入内核或产生内核模块，y表示直接编入内核，m表示产生内核模块。</li><li><strong>AUTOLOAD</strong> 表示自动装入内核，一般表示方法为：<br> <code>AUTOLOAD:=$(call AutoLoad, $(PRIORITY),$(AUTOLOAD_MODS))</code><br> AutoLoad的第一个参数$(PRIORITY)为优先级，01为最优先，99为最后装载。有关自动装载可以在&#x2F;etc&#x2F;modules.d目录下看到，第二个参数$(AUTOLOAD_MODS)模块名，每个模块名以空格符分隔。即可同时装载多个内核模块。<br> 在开发过程最好不要使用自动装载，经过严格调试后再使用，可以减轻调试的工作量。</li></ul><h2 id="使用定义"><a href="#使用定义" class="headerlink" title="使用定义"></a>使用定义</h2><p>完成前面定义后，必须使用eval函数实现各种定义。其格式为：<br> 对于一般应用软件包<br> <code>$(eval $(call Package, $(PKG_NAME)))</code><br> 或对于内核驱动模块<br> <code>$(eval $(call KernelPackage, $(PKG_NAME)))</code><br> 如果一个软件包有多个程序，例如：一个应用程序有自己的内核驱动模块，上面使用PKG_NAME需要灵活变通。eval函数可以设计多个。也可以当成多个软件包处理。</p><h2 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h2><blockquote><p><a href="https://www.jianshu.com/p/21c8937ac7ea">https://www.jianshu.com/p/21c8937ac7ea</a></p><p><a href="https://openwrt.org/zh-cn/doc/devel/packages">https://openwrt.org/zh-cn/doc/devel/packages</a></p></blockquote><h1 id="开机自启动配置"><a href="#开机自启动配置" class="headerlink" title="开机自启动配置"></a>开机自启动配置</h1><ul><li><p>创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p package/helloworld/files</span><br><span class="line">cd package/helloworld/files</span><br><span class="line">touch helloworld</span><br></pre></td></tr></table></figure></li><li><p>编写脚本</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200218113811.png" style="zoom:200%;" /></li><li><p>修改helloworld 目录下的Makefile</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200218113854.png" style="zoom:200%;" /></li></ul><h1 id="重复安装保留配置文件"><a href="#重复安装保留配置文件" class="headerlink" title="重复安装保留配置文件"></a>重复安装保留配置文件</h1><ul><li><p>问题</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200218114051.png" style="zoom:200%;" /></li><li><p>解决方法</p><img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200218114157.png" style="zoom:200%;" /></li><li><p>引用</p><blockquote><p><a href="https://stackoverflow.com/questions/34512804/how-to-keep-config-after-reinstall-ipk-on-openwrt">https://stackoverflow.com/questions/34512804/how-to-keep-config-after-reinstall-ipk-on-openwrt</a></p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OpenWrt官方Wiki&lt;/p&gt;
&lt;img src=&quot;https://nas.littlekang.xyz:9000/markdown/2022-03/1719_2129-SMZspGY1muMHeBfo.png&quot; alt=&quot;image-20220317192129827</summary>
      
    
    
    
    <category term="OpenWrt" scheme="https://blog.littlekang.xyz/categories/OpenWrt/"/>
    
    
    <category term="openwrt" scheme="https://blog.littlekang.xyz/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>Typoro PicGo MarkDown协同工作</title>
    <link href="https://blog.littlekang.xyz/article/18269/"/>
    <id>https://blog.littlekang.xyz/article/18269/</id>
    <published>2020-02-12T16:12:38.000Z</published>
    <updated>2022-03-17T11:45:40.625Z</updated>
    
    <content type="html"><![CDATA[<p>Tyora 和 PicGo图床的协同工作，PicGo图床需要借助于其他VPS或者对象存储，</p><p>使用github因国内网络环境，很不稳定。</p><span id="more"></span><h1 id="Tyora简介"><a href="#Tyora简介" class="headerlink" title="Tyora简介"></a>Tyora简介</h1><ul><li><p>官网：<a href="https://typora.io/">https://typora.io/</a></p></li><li><p>Typora 是一款简单、高效而且非常优雅的 Markdown 编辑器，它提供了一种所见即所得的全新的 Markdown 写作体验。</p><p>Typora 把源码编辑和效果预览两者合二为一，在输入 Markdown 代码的时候即时生成预览效果。</p><p>Typora 是目前互联网上最受欢迎的 Markdown 编辑器之一。</p></li><li><p>Tyora快捷键</p><ul><li>段落<img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200213002205.png" style="zoom:200%;" /></li><li>格式<img src="https://cdn.jsdelivr.net/gh/echomlv/kangimages/imgs/20200213002455.png" style="zoom:200%;" /></li></ul></li></ul><h1 id="Pandoc文档格式转化"><a href="#Pandoc文档格式转化" class="headerlink" title="Pandoc文档格式转化"></a>Pandoc文档格式转化</h1><ul><li>官网 <a href="https://pandoc.org/">https://pandoc.org/</a></li><li>简介：</li></ul><p><strong>Pandoc</strong>是一个标记语言转换工具，可实现不同标记语言间的格式转换，堪称该领域中的“瑞士军刀”。<br>Typora 的文件导入&#x2F;导出功能使用 Pandoc 把 Markdown 源码转换成不同的文件格式，所以我们如果想使用文件导入&#x2F;导出功能，必须先安装 Pandoc。<br>如果不安装 Pandoc，Typora 只支持导出 HTML 和 PDF 格式的文件。<br>如果安装了 Pandoc ：<br>Typora 支持的导入文件格式: .docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub.<br>Typora 支持的导出文件格式 : HTML, PDF, Docx, odt, rtf, Epub, LaTeX, Media Wiki,Image.</p><ul><li>安装方式：<br>STEP 1. 打开下载页面：<a href="https://github.com/jgm/pandoc/releases/latest">https://github.com/jgm/pandoc/releases/latest</a><br>STEP 2. 下载最新的安装包：pandoc-版本号.msi<br>STEP 3. 双击后按照提示一步步安装</li></ul><h1 id="PicGo图床"><a href="#PicGo图床" class="headerlink" title="PicGo图床"></a>PicGo图床</h1><ul><li><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p></li><li><p>简介：<br>PicGo: 一个用于快速上传图片并获取图片URL链接的工具<br>PicGo 本体支持如下图床：</p><ul><li>微博图床 v1.0 微博图床从 2019 年 4 月开始进行防盗链，不建议继续使用</li><li>七牛图床 v1.0</li><li>腾讯云 COS v4\v5版本 v1.1 &amp; v1.5.0</li><li>又拍云 v1.2.0</li><li>GitHub v1.5.0</li><li>SM.MS v1.5.1 由于官方不再支持V1版本，暂时请使用smms-user插件</li><li>阿里云 OSS v1.6.0</li><li>Imgur v1.6.0</li></ul></li><li><p>特色功能</p><ul><li>支持拖拽图片上传</li><li>支持快捷键上传剪贴板里第一张图片</li><li>Windows和macOS支持右键图片文件通过菜单上传 (v2.1.0+)</li><li>上传图片后自动复制链接到剪贴板</li><li>支持自定义复制到剪贴板的链接格式</li><li>支持修改快捷键，默认快速上传快捷键：<code>command+shift+p</code>（macOS）| <code>control+shift+p</code>（Windows\Linux)</li><li>支持插件系统，已有插件支持Gitee、青云等第三方图床<ul><li>更多第三方插件以及使用了 PicGo 底层的应用可以在 <a href="https://github.com/PicGo/Awesome-PicGo">Awesome-PicGo</a> 找到。欢迎贡献！</li></ul></li><li>支持通过发送HTTP请求调用 PicGo 上传（v2.2.0+)</li></ul></li></ul><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://www.jianshu.com/p/45ff441ac0d6">Typora：简单高效的 Markdown 编辑器</a><br><a href="https://www.jianshu.com/p/a0bf28d7f2fd">Typora + PicGo MarkDown完美组合</a><br><a href="https://www.jianshu.com/p/44c8aaa9cda1">Typora - 不要太棒的Markdown编辑器</a><br><a href="https://www.cnblogs.com/lc1203/p/ac5d44992d9c5f84bf3383d15aff40c2.html">高效且优雅的笔记记录：为知笔记+Typora+图床</a><br><a href="https://github.com/Molunerfinn/PicGo">Picgo github readme</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Tyora 和 PicGo图床的协同工作，PicGo图床需要借助于其他VPS或者对象存储，&lt;/p&gt;
&lt;p&gt;使用github因国内网络环境，很不稳定。&lt;/p&gt;</summary>
    
    
    
    <category term="软件工具" scheme="https://blog.littlekang.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="markdown" scheme="https://blog.littlekang.xyz/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo cmd</title>
    <link href="https://blog.littlekang.xyz/article/23610/"/>
    <id>https://blog.littlekang.xyz/article/23610/</id>
    <published>2020-02-12T03:54:06.000Z</published>
    <updated>2022-03-17T11:47:29.529Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p><a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p><span id="more"></span><h1 id="新建网站"><a href="#新建网站" class="headerlink" title="新建网站"></a>新建网站</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h1 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h1 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="清除生成的静态页面"><a href="#清除生成的静态页面" class="headerlink" title="清除生成的静态页面"></a>清除生成的静态页面</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>引用地址：</p><p>从hexo.io说明文档拷贝</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/commands.html">https://hexo.io/zh-cn/docs/commands.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/commands&quot;&gt;https://hexo.io/zh-cn/docs/commands&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="软件工具" scheme="https://blog.littlekang.xyz/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="hexo" scheme="https://blog.littlekang.xyz/tags/hexo/"/>
    
  </entry>
  
</feed>
